-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package uvmhs
@version 0.0.0.0

module UVMHS.Core.Classes.Monoid
class Null a
null :: Null a => a
class Append a
(‚ß∫) :: Append a => a -> a -> a
infixl 4 ‚ß∫
class (Null a, Append a) => Monoid a
class Unit a
unit :: Unit a => a
class Cross a
(‚®≥) :: Cross a => a -> a -> a
class (Monoid a, Unit a, Cross a) => Prodoid a

module UVMHS.Init
class CHS a b | b -> a
tohs :: CHS a b => a -> b
frhs :: CHS a b => b -> a
data P (a :: k)
P :: P
data Nat
Z :: Nat
S :: Nat -> Nat
data W (c :: Constraint)
[W] :: c => W c
newtype k ‚á∞ v
ùê∑ :: Map k v -> (‚á∞) k v
[unùê∑] :: (‚á∞) k v -> Map k v
infixr 2 ‚á∞
newtype ùëÉ a
ùëÉ :: Set a -> ùëÉ a
[unùëÉ] :: ùëÉ a -> Set a
newtype ùëÑ a
ùëÑ :: Seq a -> ùëÑ a
[unùëÑ] :: ùëÑ a -> Seq a
data ùëÜ a
[ùëÜ] :: forall s a. s -> (s -> ùëÇ (a ‚àß s)) -> ùëÜ a
newtype ùêº a
ùêº :: (forall b. (a -> b -> b) -> b -> b) -> ùêº a
[unùêº] :: ùêº a -> forall b. (a -> b -> b) -> b -> b
data ùêø a
Nil :: ùêø a
(:&) :: a -> ùêø a -> ùêø a
infixr 8 :&
data ùëÇ a
None :: ùëÇ a
Some :: a -> ùëÇ a
data a ‚àß b
(:*) :: a -> b -> (‚àß) a b
infixl 5 ‚àß
infixl 1 :*
data a ‚à® b
Inl :: a -> (‚à®) a b
Inr :: b -> (‚à®) a b
infixl 4 ‚à®
type ùîπ = Bool
data Void
type ùïä = Text
type ‚ÑÇ = Char
type ùîª = Double
type ‚Ñö = Rational
type ‚Ñ§8 = Int8
type ‚Ñ§16 = Int16
type ‚Ñ§32 = Int32
type ‚Ñ§64 = Int64
type ‚Ñ§ = Integer
type ‚Ñï8 = Word8
type ‚Ñï16 = Word16
type ‚Ñï32 = Word32
type ‚Ñï64 = Word64
type ‚Ñï = Natural
fromString :: [‚ÑÇ] -> ùïä
fromInteger :: ‚Ñ§ -> ‚Ñï
negate :: ‚Ñï -> ‚Ñ§
fromRational :: Rational -> ùîª
fail :: [‚ÑÇ] -> m a
ùïü64 :: ‚Ñï -> ‚Ñï64
ùïü32 :: ‚Ñï -> ‚Ñï32
ùïü16 :: ‚Ñï -> ‚Ñï16
ùïü8 :: ‚Ñï -> ‚Ñï8
ùï´ :: ‚Ñï -> ‚Ñ§
ùï´64 :: ‚Ñï -> ‚Ñ§64
ùï´32 :: ‚Ñï -> ‚Ñ§32
ùï´16 :: ‚Ñï -> ‚Ñ§16
ùï´8 :: ‚Ñï -> ‚Ñ§8
chars :: ùïä -> [‚ÑÇ]
fromChars :: [‚ÑÇ] -> ùïä
with :: W c -> (c => a) -> a
error :: ùïä -> a
id :: a -> a
const :: a -> b -> a
(‚àò) :: (b -> c) -> (a -> b) -> a -> c
infixl 6 ‚àò
(‚àò‚àò) :: (c -> d) -> (a -> b -> c) -> a -> b -> d
flip :: (a -> b -> c) -> b -> a -> c
rotateR :: (a -> b -> c -> d) -> c -> a -> b -> d
rotateL :: (a -> b -> c -> d) -> b -> c -> a -> d
mirror :: (a -> b -> c -> d) -> c -> b -> a -> d
on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
not :: ùîπ -> ùîπ
(‚©ì) :: ùîπ -> ùîπ -> ùîπ
infixl 5 ‚©ì
(‚©î) :: ùîπ -> ùîπ -> ùîπ
infixl 4 ‚©î
cond :: ùîπ -> a -> a -> a
streamùêø :: ùêø a -> ùëÜ a
listùêº :: ùêº a -> ùêø a
streamLL :: [a] -> ùëÜ a
lazyListùêº :: ùêº a -> [a]
foldùêº :: b -> (a -> b -> b) -> ùêº a -> b
foldkùêº :: b -> (a -> (b -> b) -> b -> b) -> ùêº a -> b
foldrùêº :: b -> (a -> b -> b) -> ùêº a -> b
mapùêº :: (a -> b) -> ùêº a -> ùêº b
iterùëÜ :: ùëÜ a -> ùêº a

-- | The kind of constraints, like <tt>Show a</tt>
data Constraint

-- | <a>otherwise</a> is defined as the value <a>True</a>. It helps to make
--   guards more readable. eg.
--   
--   <pre>
--   f x | x &lt; 0     = ...
--       | otherwise = ...
--   </pre>
otherwise :: Bool

-- | Application operator. This operator is redundant, since ordinary
--   application <tt>(f x)</tt> means the same as <tt>(f <a>$</a> x)</tt>.
--   However, <a>$</a> has low, right-associative binding precedence, so it
--   sometimes allows parentheses to be omitted; for example:
--   
--   <pre>
--   f $ g $ h x  =  f (g (h x))
--   </pre>
--   
--   It is also useful in higher-order situations, such as <tt><a>map</a>
--   (<a>$</a> 0) xs</tt>, or <tt><a>zipWith</a> (<a>$</a>) fs xs</tt>.
--   
--   Note that <tt>($)</tt> is levity-polymorphic in its result type, so
--   that foo $ True where foo :: Bool -&gt; Int# is well-typed
($) :: () => (a -> b) -> a -> b
infixr 0 $

-- | The <a>Eq</a> class defines equality (<a>==</a>) and inequality
--   (<a>/=</a>). All the basic datatypes exported by the <a>Prelude</a>
--   are instances of <a>Eq</a>, and <a>Eq</a> may be derived for any
--   datatype whose constituents are also instances of <a>Eq</a>.
--   
--   The Haskell Report defines no laws for <a>Eq</a>. However, <a>==</a>
--   is customarily expected to implement an equivalence relationship where
--   two values comparing equal are indistinguishable by "public"
--   functions, with a "public" function being one not allowing to see
--   implementation details. For example, for a type representing
--   non-normalised natural numbers modulo 100, a "public" function doesn't
--   make the difference between 1 and 201. It is expected to have the
--   following properties:
--   
--   <ul>
--   <li><i><b>Reflexivity</b></i> <tt>x == x</tt> = <a>True</a></li>
--   <li><i><b>Symmetry</b></i> <tt>x == y</tt> = <tt>y == x</tt></li>
--   <li><i><b>Transitivity</b></i> if <tt>x == y &amp;&amp; y == z</tt> =
--   <a>True</a>, then <tt>x == z</tt> = <a>True</a></li>
--   <li><i><b>Substitutivity</b></i> if <tt>x == y</tt> = <a>True</a> and
--   <tt>f</tt> is a "public" function whose return type is an instance of
--   <a>Eq</a>, then <tt>f x == f y</tt> = <a>True</a></li>
--   <li><i><b>Negation</b></i> <tt>x /= y</tt> = <tt>not (x ==
--   y)</tt></li>
--   </ul>
--   
--   Minimal complete definition: either <a>==</a> or <a>/=</a>.
class Eq a
(==) :: Eq a => a -> a -> Bool
infix 4 ==

-- | The <a>Ord</a> class is used for totally ordered datatypes.
--   
--   Instances of <a>Ord</a> can be derived for any user-defined datatype
--   whose constituent types are in <a>Ord</a>. The declared order of the
--   constructors in the data declaration determines the ordering in
--   derived <a>Ord</a> instances. The <a>Ordering</a> datatype allows a
--   single comparison to determine the precise ordering of two objects.
--   
--   The Haskell Report defines no laws for <a>Ord</a>. However,
--   <a>&lt;=</a> is customarily expected to implement a non-strict partial
--   order and have the following properties:
--   
--   <ul>
--   <li><i><b>Transitivity</b></i> if <tt>x &lt;= y &amp;&amp; y &lt;=
--   z</tt> = <a>True</a>, then <tt>x &lt;= z</tt> = <a>True</a></li>
--   <li><i><b>Reflexivity</b></i> <tt>x &lt;= x</tt> = <a>True</a></li>
--   <li><i><b>Antisymmetry</b></i> if <tt>x &lt;= y &amp;&amp; y &lt;=
--   x</tt> = <a>True</a>, then <tt>x == y</tt> = <a>True</a></li>
--   </ul>
--   
--   Note that the following operator interactions are expected to hold:
--   
--   <ol>
--   <li><tt>x &gt;= y</tt> = <tt>y &lt;= x</tt></li>
--   <li><tt>x &lt; y</tt> = <tt>x &lt;= y &amp;&amp; x /= y</tt></li>
--   <li><tt>x &gt; y</tt> = <tt>y &lt; x</tt></li>
--   <li><tt>x &lt; y</tt> = <tt>compare x y == LT</tt></li>
--   <li><tt>x &gt; y</tt> = <tt>compare x y == GT</tt></li>
--   <li><tt>x == y</tt> = <tt>compare x y == EQ</tt></li>
--   <li><tt>min x y == if x &lt;= y then x else y</tt> = <a>True</a></li>
--   <li><tt>max x y == if x &gt;= y then x else y</tt> = <a>True</a></li>
--   </ol>
--   
--   Minimal complete definition: either <a>compare</a> or <a>&lt;=</a>.
--   Using <a>compare</a> can be more efficient for complex types.
class Eq a => Ord a
compare :: Ord a => a -> a -> Ordering

-- | Conversion of values to readable <a>String</a>s.
--   
--   Derived instances of <a>Show</a> have the following properties, which
--   are compatible with derived instances of <a>Read</a>:
--   
--   <ul>
--   <li>The result of <a>show</a> is a syntactically correct Haskell
--   expression containing only constants, given the fixity declarations in
--   force at the point where the type is declared. It contains only the
--   constructor names defined in the data type, parentheses, and spaces.
--   When labelled constructor fields are used, braces, commas, field
--   names, and equal signs are also used.</li>
--   <li>If the constructor is defined to be an infix operator, then
--   <a>showsPrec</a> will produce infix applications of the
--   constructor.</li>
--   <li>the representation will be enclosed in parentheses if the
--   precedence of the top-level constructor in <tt>x</tt> is less than
--   <tt>d</tt> (associativity is ignored). Thus, if <tt>d</tt> is
--   <tt>0</tt> then the result is never surrounded in parentheses; if
--   <tt>d</tt> is <tt>11</tt> it is always surrounded in parentheses,
--   unless it is an atomic expression.</li>
--   <li>If the constructor is defined using record syntax, then
--   <a>show</a> will produce the record-syntax form, with the fields given
--   in the same order as the original declaration.</li>
--   </ul>
--   
--   For example, given the declarations
--   
--   <pre>
--   infixr 5 :^:
--   data Tree a =  Leaf a  |  Tree a :^: Tree a
--   </pre>
--   
--   the derived instance of <a>Show</a> is equivalent to
--   
--   <pre>
--   instance (Show a) =&gt; Show (Tree a) where
--   
--          showsPrec d (Leaf m) = showParen (d &gt; app_prec) $
--               showString "Leaf " . showsPrec (app_prec+1) m
--            where app_prec = 10
--   
--          showsPrec d (u :^: v) = showParen (d &gt; up_prec) $
--               showsPrec (up_prec+1) u .
--               showString " :^: "      .
--               showsPrec (up_prec+1) v
--            where up_prec = 5
--   </pre>
--   
--   Note that right-associativity of <tt>:^:</tt> is ignored. For example,
--   
--   <ul>
--   <li><tt><a>show</a> (Leaf 1 :^: Leaf 2 :^: Leaf 3)</tt> produces the
--   string <tt>"Leaf 1 :^: (Leaf 2 :^: Leaf 3)"</tt>.</li>
--   </ul>
class Show a

-- | A specialised variant of <a>showsPrec</a>, using precedence context
--   zero, and returning an ordinary <a>String</a>.
show :: Show a => a -> String
data Bool
False :: Bool
True :: Bool
data Ordering
LT :: Ordering
EQ :: Ordering
GT :: Ordering

-- | A value of type <tt><a>IO</a> a</tt> is a computation which, when
--   performed, does some I/O before returning a value of type <tt>a</tt>.
--   
--   There is really only one way to "perform" an I/O action: bind it to
--   <tt>Main.main</tt> in your program. When your program is run, the I/O
--   will be performed. It isn't possible to perform I/O from an arbitrary
--   function, unless that function is itself in the <a>IO</a> monad and
--   called at some point, directly or indirectly, from <tt>Main.main</tt>.
--   
--   <a>IO</a> is a monad, so <a>IO</a> actions can be combined using
--   either the do-notation or the <tt>&gt;&gt;</tt> and <tt>&gt;&gt;=</tt>
--   operations from the <tt>Monad</tt> class.
data IO a

-- | A special case of <a>error</a>. It is expected that compilers will
--   recognize this and insert error messages which are more appropriate to
--   the context in which <a>undefined</a> appears.
undefined :: HasCallStack => a
instance (GHC.Classes.Ord k, GHC.Classes.Ord v) => GHC.Classes.Ord (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Eq k, GHC.Classes.Eq v) => GHC.Classes.Eq (k UVMHS.Init.‚á∞ v)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Init.ùëÉ a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Init.ùëÉ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Init.ùëÑ a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Init.ùëÑ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Init.ùêø a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Init.ùêø a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Init.ùëÇ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Init.ùëÇ a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Init.ùëÇ a)
instance (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (a UVMHS.Init.‚àß b)
instance (GHC.Classes.Ord a, GHC.Classes.Ord b) => GHC.Classes.Ord (a UVMHS.Init.‚àß b)
instance (GHC.Classes.Eq a, GHC.Classes.Eq b) => GHC.Classes.Eq (a UVMHS.Init.‚àß b)
instance (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (a UVMHS.Init.‚à® b)
instance (GHC.Classes.Ord a, GHC.Classes.Ord b) => GHC.Classes.Ord (a UVMHS.Init.‚à® b)
instance (GHC.Classes.Eq a, GHC.Classes.Eq b) => GHC.Classes.Eq (a UVMHS.Init.‚à® b)
instance (a Data.Type.Equality.~ b) => UVMHS.Init.CHS a b
instance UVMHS.Init.CHS UVMHS.Init.‚Ñ§32 GHC.Types.Int
instance UVMHS.Init.CHS a b => UVMHS.Init.CHS (UVMHS.Init.ùêø a) [b]
instance (UVMHS.Init.CHS a‚ÇÅ b‚ÇÅ, UVMHS.Init.CHS a‚ÇÇ b‚ÇÇ, UVMHS.Init.CHS a‚ÇÉ b‚ÇÉ) => UVMHS.Init.CHS ((a‚ÇÅ UVMHS.Init.‚àß a‚ÇÇ) UVMHS.Init.‚àß a‚ÇÉ) (b‚ÇÅ, b‚ÇÇ, b‚ÇÉ)
instance (UVMHS.Init.CHS a‚ÇÅ b‚ÇÅ, UVMHS.Init.CHS a‚ÇÇ b‚ÇÇ) => UVMHS.Init.CHS (a‚ÇÅ UVMHS.Init.‚àß a‚ÇÇ) (b‚ÇÅ, b‚ÇÇ)
instance (UVMHS.Init.CHS a‚ÇÅ b‚ÇÅ, UVMHS.Init.CHS a‚ÇÇ b‚ÇÇ) => UVMHS.Init.CHS (a‚ÇÅ UVMHS.Init.‚à® a‚ÇÇ) (Data.Either.Either b‚ÇÅ b‚ÇÇ)
instance UVMHS.Init.CHS a b => UVMHS.Init.CHS (UVMHS.Init.ùëÇ a) (GHC.Maybe.Maybe b)

module UVMHS.Core.Data.Char
toLower :: ‚ÑÇ -> ‚ÑÇ
toUpper :: ‚ÑÇ -> ‚ÑÇ
isSpace :: ‚ÑÇ -> ùîπ
isAlphaNum :: ‚ÑÇ -> ùîπ
isLetter :: ‚ÑÇ -> ùîπ
isNumber :: ‚ÑÇ -> ùîπ
isDigit :: ‚ÑÇ -> ùîπ

module UVMHS.Core.Classes.Order
(‚â°) :: Eq a => a -> a -> ùîπ
infix 3 ‚â°
(‚â¢) :: Eq a => a -> a -> ùîπ
infix 3 ‚â¢
(‚ãö) :: Ord a => a -> a -> Ordering
infix 3 ‚ãö
(‚â§) :: Ord a => a -> a -> ùîπ
infix 3 ‚â§
(‚â•) :: Ord a => a -> a -> ùîπ
infix 3 ‚â•
(<) :: Ord a => a -> a -> ùîπ
infix 3 <
(>) :: Ord a => a -> a -> ùîπ
infix 3 >
(‚©é) :: Ord a => a -> a -> a
(‚©è) :: Ord a => a -> a -> a
minBy :: Ord b => (a -> b) -> a -> a -> a
maxBy :: Ord b => (a -> b) -> a -> a -> a

module UVMHS.Core.Classes.Morphism
type (m :: ‚òÖ -> ‚òÖ) ‚Üí‚Åª (n :: ‚òÖ -> ‚òÖ) = forall a. m a -> n a
infixr 2 ‚Üí‚Åª
type (t :: (‚òÖ -> ‚òÖ) -> ‚òÖ -> ‚òÖ) ‚Üí‚Åº (u :: (‚òÖ -> ‚òÖ) -> ‚òÖ -> ‚òÖ) = forall m. t m ‚Üí‚Åª u m
infixr 2 ‚Üí‚Åº
class a ‚áÑ b | a -> b
isoto :: (‚áÑ) a b => a -> b
isofr :: (‚áÑ) a b => b -> a
infixr 2 ‚áÑ
data Iso a b
Iso :: (a -> b) -> (b -> a) -> Iso a b
[ito] :: Iso a b -> a -> b
[ifr] :: Iso a b -> b -> a
toiso :: a ‚áÑ b => Iso a b
friso :: a ‚áÑ b => Iso b a
class t ‚áÑ‚Åª u | t -> u
isoto2 :: (‚áÑ‚Åª) t u => t ‚Üí‚Åª u
isofr2 :: (‚áÑ‚Åª) t u => u ‚Üí‚Åª t
infixr 2 ‚áÑ‚Åª
data Iso2 t u
Iso2 :: (t ‚Üí‚Åª u) -> (u ‚Üí‚Åª t) -> Iso2 t u
[ito2] :: Iso2 t u -> t ‚Üí‚Åª u
[ifr2] :: Iso2 t u -> u ‚Üí‚Åª t
toiso2 :: t ‚áÑ‚Åª u => Iso2 t u
friso2 :: t ‚áÑ‚Åª u => Iso2 u t
class v ‚áÑ‚Åº w | v -> w
isoto3 :: (‚áÑ‚Åº) v w => v ‚Üí‚Åº w
isofr3 :: (‚áÑ‚Åº) v w => w ‚Üí‚Åº v
infixr 2 ‚áÑ‚Åº
data Iso3 v w
Iso3 :: (v ‚Üí‚Åº w) -> (w ‚Üí‚Åº v) -> Iso3 v w
[ito3] :: Iso3 v w -> v ‚Üí‚Åº w
[ifr3] :: Iso3 v w -> w ‚Üí‚Åº v
toiso3 :: v ‚áÑ‚Åº w => Iso3 v w
friso3 :: v ‚áÑ‚Åº w => Iso3 w v
class Category t
refl :: Category t => t a a
(‚äö) :: Category t => t b c -> t a b -> t a c
infixl 6 ‚äö
class Symmetric t
sym :: Symmetric t => t a b -> t b a
instance UVMHS.Core.Classes.Morphism.Symmetric UVMHS.Core.Classes.Morphism.Iso
instance UVMHS.Core.Classes.Morphism.Symmetric UVMHS.Core.Classes.Morphism.Iso2
instance UVMHS.Core.Classes.Morphism.Symmetric UVMHS.Core.Classes.Morphism.Iso3
instance UVMHS.Core.Classes.Morphism.Category (->)
instance UVMHS.Core.Classes.Morphism.Category UVMHS.Core.Classes.Morphism.Iso
instance UVMHS.Core.Classes.Morphism.Category UVMHS.Core.Classes.Morphism.Iso2
instance UVMHS.Core.Classes.Morphism.Category UVMHS.Core.Classes.Morphism.Iso3

module UVMHS.Core.Classes.Lattice
class POrd a
(‚äë) :: POrd a => a -> a -> ùîπ
infix 3 ‚äë
class Bot a
bot :: Bot a => a
class Join a
(‚äî) :: Join a => a -> a -> a
infixl 4 ‚äî
class (Bot a, Join a) => JoinLattice a
class Top a
top :: Top a => a
class Meet a
(‚äì) :: Meet a => a -> a -> a
infixl 5 ‚äì
class (Top a, Meet a) => MeetLattice a
class (JoinLattice a, MeetLattice a) => Lattice a
class Dual a
dual :: Dual a => a -> a
class Difference a
(‚äü) :: Difference a => a -> a -> a
infixl 4 ‚äü
data PartialOrdering
PLT :: PartialOrdering
PEQ :: PartialOrdering
PGT :: PartialOrdering
PUN :: PartialOrdering
(‚àá) :: POrd a => a -> a -> PartialOrdering
infix 3 ‚àá
(‚äí) :: POrd a => a -> a -> ùîπ
infix 3 ‚äí
(‚™§) :: POrd a => a -> a -> ùîπ
infix 3 ‚™§
lfp :: POrd a => a -> (a -> a) -> a

module UVMHS.Core.Classes.Functor
class Functor (t :: ‚òÖ -> ‚òÖ)
map :: Functor t => (a -> b) -> t a -> t b
mapOn :: Functor t => t a -> (a -> b) -> t b
mapp :: (Functor t, Functor u) => (a -> b) -> t (u a) -> t (u b)
(^‚ãÖ) :: Functor t => (a -> b) -> t a -> t b
infixl 9 ^‚ãÖ
(^^‚ãÖ) :: (Functor t, Functor u) => (a -> b) -> t (u a) -> t (u b)
infixl 9 ^^‚ãÖ
(^$) :: Functor t => (a -> b) -> t a -> t b
infixr 0 ^$
(^^$) :: (Functor t, Functor u) => (a -> b) -> t (u a) -> t (u b)
infixr 0 ^^$
(^‚àò) :: Functor t => (b -> c) -> (a -> t b) -> a -> t c
infixl 6 ^‚àò
(^^‚àò) :: (Functor t, Functor u) => (b -> c) -> (a -> t (u b)) -> a -> t (u c)
infixl 6 ^^‚àò
class Functor2 (w :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ))
map2 :: Functor2 w => (t ‚Üí‚Åª u) -> w t ‚Üí‚Åª w u
class Functor2Iso (w :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ))
map2iso :: Functor2Iso w => Iso2 t u -> w t ‚Üí‚Åª w u

module UVMHS.Core.Classes.Monad
(>>=) :: Bind m => m a -> (a -> m b) -> m b
(>>) :: Bind m => m a -> m b -> m b
class Return (m :: ‚òÖ -> ‚òÖ)
return :: Return m => a -> m a
class Bind (m :: ‚òÖ -> ‚òÖ)
(‚â´=) :: Bind m => m a -> (a -> m b) -> m b
infixr 2 ‚â´=
class (Functor m, Return m, Bind m) => Monad m
(*‚ãÖ) :: Bind m => (a -> m b) -> m a -> m b
(*$) :: Bind m => (a -> m b) -> m a -> m b
infixr 0 *$
(*‚àò) :: Bind m => (b -> m c) -> (a -> m b) -> a -> m c
infixl 6 *‚àò
kreturn :: Return m => (a -> b) -> a -> m b
extend :: Bind m => (a -> m b) -> m a -> m b
(‚â´) :: Bind m => m a -> m b -> m b
infixr 2 ‚â´
void :: Functor m => m a -> m ()
mjoin :: Bind m => m (m a) -> m a
mmap :: Monad m => (a -> b) -> m a -> m b
(<√ó>) :: Monad m => m a -> m b -> m (a ‚àß b)
infixl 5 <√ó>
(<‚ãÖ>) :: Monad m => m (a -> b) -> m a -> m b
skip :: Return m => m ()
when :: Return m => ùîπ -> m () -> m ()
whenùëÇ :: Return m => ùëÇ a -> (a -> m ()) -> m ()
whenM :: Monad m => m ùîπ -> m () -> m ()
returnùëÇ :: Return m => m a -> ùëÇ a -> m a

module UVMHS.Core.Classes.FunctorM
class FunctorM (t :: ‚òÖ -> ‚òÖ)
mapM :: (FunctorM t, Monad m) => (a -> m b) -> t a -> m (t b)
mapMOn :: (Monad m, FunctorM t) => t a -> (a -> m b) -> m (t b)

module UVMHS.Core.Classes.Constraints
class U a
class (c‚ÇÅ a, c‚ÇÇ a) => ( c‚ÇÅ :‚àß: c‚ÇÇ ) a
infixl 4 :‚àß:
class (t (u a)) => ( t :‚àò: u ) a
infixl 6 :‚àò:
class (:‚áí:) c‚ÇÅ c‚ÇÇ
impl :: (:‚áí:) c‚ÇÅ c‚ÇÇ => W c‚ÇÅ -> W c‚ÇÇ
infixr 2 :‚áí:
instance forall k1 k2 (t :: k2 -> GHC.Types.Constraint) (u :: k1 -> k2) (a :: k1). t (u a) => (UVMHS.Core.Classes.Constraints.:‚àò:) t u a
instance forall k (c‚ÇÅ :: k -> GHC.Types.Constraint) (a :: k) (c‚ÇÇ :: k -> GHC.Types.Constraint). (c‚ÇÅ a, c‚ÇÇ a) => (UVMHS.Core.Classes.Constraints.:‚àß:) c‚ÇÅ c‚ÇÇ a
instance forall k (a :: k). UVMHS.Core.Classes.Constraints.U a

module UVMHS.Core.Classes.Comonad
class Extract (w :: ‚òÖ -> ‚òÖ)
extract :: Extract w => w a -> a
class Cobind (w :: ‚òÖ -> ‚òÖ)
(=‚â´) :: Cobind w => w a -> (w a -> b) -> w b
infixr 2 =‚â´
class (Functor w, Extract w, Cobind w) => Comonad w
wextend :: Cobind w => (w a -> b) -> w a -> w b
(%‚ãÖ) :: Cobind w => (w a -> b) -> w a -> w b
(%$) :: Cobind w => (w a -> b) -> w a -> w b
(%‚àò) :: Cobind w => (w b -> c) -> (w a -> b) -> w a -> c
kextract :: Extract w => (a -> b) -> w a -> b
kextract2 :: Extract w => (a -> b -> c) -> w a -> w b -> c
siphon :: Cobind w => w a -> b -> w b
submerge :: (Functor m, Comonad w) => w (m a) -> m (w a)
wmap :: Comonad w => (a -> b) -> w a -> w b

module UVMHS.Core.Classes.Collections
class Single a t | t -> a
single :: Single a t => a -> t
class Lookup k v t | t -> k, t -> v
(‚ãï?) :: Lookup k v t => t -> k -> ùëÇ v
infixl 7 ‚ãï?
class Access k v t | t -> k, t -> v
(‚ãï) :: Access k v t => t -> k -> v
infixl 7 ‚ãï
class ToStream a t | t -> a
stream :: ToStream a t => t -> ùëÜ a
class ToIter a t | t -> a
iter :: ToIter a t => t -> ùêº a
(‚ãï!) :: Lookup k v t => t -> k -> v
infixl 7 ‚ãï!

module UVMHS.Core.Classes.DSL
class Arrow a
(‚á®) :: Arrow a => a -> a -> a
infixr 2 ‚á®
class Apply a
(‚äô) :: Apply a => a -> a -> a
infixl 6 ‚äô
class Tup a
tup :: (Tup a, ToIter a t) => t -> a
(‚äô$) :: Apply e => e -> e -> e
infixr 0 ‚äô$
(‚äô‚ãÜ) :: (Apply e, ToIter e t) => e -> t -> e
infixl 6 ‚äô‚ãÜ

module UVMHS.Core.Classes.Arithmetic
class Zero a
zero :: Zero a => a
class Plus a
(+) :: Plus a => a -> a -> a
infixl 4 +
class Minus a
(-) :: Minus a => a -> a -> a
infixl 4 -
class One a
one :: One a => a
class Times a
(√ó) :: Times a => a -> a -> a
infixl 5 √ó
class Divide a
(/) :: Divide a => a -> a -> a
infixl 5 /
class DivMod a
(‚åø) :: DivMod a => a -> a -> a
(√∑) :: DivMod a => a -> a -> a
infixl 5 √∑
infixl 5 ‚åø
class Exponential a
(^) :: Exponential a => a -> a -> a
infixl 7 ^
class Root a
root :: Root a => a -> a
class Log a
log :: Log a => a -> a
class (Zero a, Plus a) => Additive a
class (Additive a, One a, Times a) => Multiplicative a
succ :: (One a, Plus a) => a -> a
even :: (Eq a, Additive a, One a, DivMod a) => a -> ùîπ
odd :: (Eq a, Additive a, One a, DivMod a) => a -> ùîπ
neg :: (Zero a, Minus a) => a -> a
(‚®µ) :: (Functor f, Multiplicative a) => a -> f a -> f a
infixl 5 ‚®µ
class ToNat a
nat :: ToNat a => a -> ‚Ñï
class ToNat64 a
nat64 :: ToNat64 a => a -> ‚Ñï64
class ToNat32 a
nat32 :: ToNat32 a => a -> ‚Ñï32
class ToNat16 a
nat16 :: ToNat16 a => a -> ‚Ñï16
class ToNat8 a
nat8 :: ToNat8 a => a -> ‚Ñï8
class ToNatO a
natO :: ToNatO a => a -> ùëÇ ‚Ñï
class ToNatO64 a
natO64 :: ToNatO64 a => a -> ùëÇ ‚Ñï64
class ToNatO32 a
natO32 :: ToNatO32 a => a -> ùëÇ ‚Ñï32
class ToNatO16 a
natO16 :: ToNatO16 a => a -> ùëÇ ‚Ñï16
class ToNatO8 a
natO8 :: ToNatO8 a => a -> ùëÇ ‚Ñï8
natŒ© :: ToNatO a => a -> ‚Ñï
natŒ©64 :: ToNatO64 a => a -> ‚Ñï64
natŒ©32 :: ToNatO32 a => a -> ‚Ñï32
natŒ©16 :: ToNatO16 a => a -> ‚Ñï16
natŒ©8 :: ToNatO8 a => a -> ‚Ñï8
class ToInt a
int :: ToInt a => a -> ‚Ñ§
class ToInt64 a
int64 :: ToInt64 a => a -> ‚Ñ§64
class ToInt32 a
int32 :: ToInt32 a => a -> ‚Ñ§32
class ToInt16 a
int16 :: ToInt16 a => a -> ‚Ñ§16
class ToInt8 a
int8 :: ToInt8 a => a -> ‚Ñ§8
class ToIntO64 a
intO64 :: ToIntO64 a => a -> ùëÇ ‚Ñ§64
class ToIntO32 a
intO32 :: ToIntO32 a => a -> ùëÇ ‚Ñ§32
class ToIntO16 a
intO16 :: ToIntO16 a => a -> ùëÇ ‚Ñ§16
class ToIntO8 a
intO8 :: ToIntO8 a => a -> ùëÇ ‚Ñ§8
intŒ©64 :: ToIntO64 a => a -> ‚Ñ§64
intŒ©32 :: ToIntO32 a => a -> ‚Ñ§32
intŒ©16 :: ToIntO16 a => a -> ‚Ñ§16
intŒ©8 :: ToIntO8 a => a -> ‚Ñ§8
class ToDouble a
dbl :: ToDouble a => a -> ùîª

module UVMHS.Core.Classes

module UVMHS.Core.Pointed
data AddNull a
Null :: AddNull a
AddNull :: a -> AddNull a
data AddBot a
Bot :: AddBot a
AddBot :: a -> AddBot a
elimAddBot :: b -> (a -> b) -> AddBot a -> b
data AddTop a
Top :: AddTop a
AddTop :: a -> AddTop a
elimAddTop :: b -> (a -> b) -> AddTop a -> b
data AddBT a
BotBT :: AddBT a
TopBT :: AddBT a
AddBT :: a -> AddBT a
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddBT a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddBT a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddTop a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddTop a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddBot a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddBot a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Core.Pointed.AddNull a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Pointed.AddBT a)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Pointed.AddBT a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Pointed.AddBT
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Bot a => UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.JoinLattice a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Pointed.AddTop a)
instance (UVMHS.Core.Classes.Lattice.JoinLattice a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Pointed.AddTop
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Top a => UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Lattice.MeetLattice a => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Pointed.AddBot a)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.MeetLattice a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Pointed.AddBot
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Pointed.AddNull
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Core.Pointed.AddNull

module UVMHS.Core.Data.Unit
instance UVMHS.Core.Classes.Monoid.Null ()
instance UVMHS.Core.Classes.Monoid.Append ()
instance UVMHS.Core.Classes.Monoid.Monoid ()

module UVMHS.Core.Data.Pair
fst :: (a ‚àß b) -> a
snd :: (a ‚àß b) -> b
mapPair :: (a‚ÇÅ -> a‚ÇÇ) -> (b‚ÇÅ -> b‚ÇÇ) -> (a‚ÇÅ ‚àß b‚ÇÅ) -> a‚ÇÇ ‚àß b‚ÇÇ
mapFst :: (a‚ÇÅ -> a‚ÇÇ) -> (a‚ÇÅ ‚àß b) -> a‚ÇÇ ‚àß b
mapSnd :: (b‚ÇÅ -> b‚ÇÇ) -> (a ‚àß b‚ÇÅ) -> a ‚àß b‚ÇÇ
instance (UVMHS.Core.Classes.Lattice.POrd a, UVMHS.Core.Classes.Lattice.POrd b) => UVMHS.Core.Classes.Lattice.POrd (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Bot a, UVMHS.Core.Classes.Lattice.Bot b) => UVMHS.Core.Classes.Lattice.Bot (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Join b) => UVMHS.Core.Classes.Lattice.Join (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Lattice.Top b) => UVMHS.Core.Classes.Lattice.Top (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Meet a, UVMHS.Core.Classes.Lattice.Meet b) => UVMHS.Core.Classes.Lattice.Meet (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Dual a, UVMHS.Core.Classes.Lattice.Dual b) => UVMHS.Core.Classes.Lattice.Dual (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Difference a, UVMHS.Core.Classes.Lattice.Difference b) => UVMHS.Core.Classes.Lattice.Difference (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.JoinLattice a, UVMHS.Core.Classes.Lattice.JoinLattice b) => UVMHS.Core.Classes.Lattice.JoinLattice (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.MeetLattice a, UVMHS.Core.Classes.Lattice.MeetLattice b) => UVMHS.Core.Classes.Lattice.MeetLattice (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Lattice.Lattice a, UVMHS.Core.Classes.Lattice.Lattice b) => UVMHS.Core.Classes.Lattice.Lattice (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Monoid.Null a, UVMHS.Core.Classes.Monoid.Null b) => UVMHS.Core.Classes.Monoid.Null (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Append b) => UVMHS.Core.Classes.Monoid.Append (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Classes.Monoid.Monoid a, UVMHS.Core.Classes.Monoid.Monoid b) => UVMHS.Core.Classes.Monoid.Monoid (a UVMHS.Init.‚àß b)
instance UVMHS.Core.Classes.Functor.Functor ((UVMHS.Init.‚àß) a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monad.Return ((UVMHS.Init.‚àß) a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monad.Bind ((UVMHS.Init.‚àß) a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monad.Monad ((UVMHS.Init.‚àß) a)
instance UVMHS.Core.Classes.FunctorM.FunctorM ((UVMHS.Init.‚àß) a)

module UVMHS.Core.Data.Option
elimùëÇ :: b -> (a -> b) -> ùëÇ a -> b
isNone :: ùëÇ a -> ùîπ
isSome :: ùëÇ a -> ùîπ
ifNone :: a -> ùëÇ a -> a
first :: ùëÇ a -> ùëÇ a -> ùëÇ a
last :: ùëÇ a -> ùëÇ a -> ùëÇ a
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Init.ùëÇ
instance UVMHS.Core.Classes.Monad.Return UVMHS.Init.ùëÇ
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Init.ùëÇ
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Init.ùëÇ
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Init.ùëÇ
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Init.ùëÇ a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Init.ùëÇ a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Init.ùëÇ a)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Init.ùëÇ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Init.ùëÇ a)
instance UVMHS.Init.ùëÇ a UVMHS.Core.Classes.Morphism.‚áÑ (() UVMHS.Init.‚à® a)

module UVMHS.Core.Data.LazyList
emptyLL :: [a]
singleLL :: a -> [a]
consLL :: a -> [a] -> [a]
snocLL :: [a] -> a -> [a]
appendLL :: [a] -> [a] -> [a]
mapLL :: (a -> b) -> [a] -> [b]
bindLL :: [a] -> (a -> [b]) -> [b]
mapMLL :: Monad m => (a -> m b) -> [a] -> m [b]
lazyList :: ToIter a t => t -> [a]
instance UVMHS.Core.Classes.Monoid.Null [a]
instance UVMHS.Core.Classes.Monoid.Append [a]
instance UVMHS.Core.Classes.Monoid.Monoid [a]
instance UVMHS.Core.Classes.Functor.Functor []
instance UVMHS.Core.Classes.Monad.Return []
instance UVMHS.Core.Classes.Monad.Bind []
instance UVMHS.Core.Classes.Monad.Monad []
instance UVMHS.Core.Classes.FunctorM.FunctorM []
instance UVMHS.Core.Classes.Collections.Single a [a]
instance UVMHS.Core.Classes.Collections.ToStream a [a]
instance UVMHS.Core.Classes.Collections.ToIter a [a]

module UVMHS.Core.Data.List
emptyùêø :: ùêø a
singleùêø :: a -> ùêø a
consùêø :: a -> ùêø a -> ùêø a
snocùêø :: ùêø a -> a -> ùêø a
appendùêø :: ùêø a -> ùêø a -> ùêø a
mapùêø :: (a -> b) -> ùêø a -> ùêø b
bindùêø :: ùêø a -> (a -> ùêø b) -> ùêø b
mapMùêø :: Monad m => (a -> m b) -> ùêø a -> m (ùêø b)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Init.ùêø a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Init.ùêø a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Init.ùêø a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Init.ùêø
instance UVMHS.Core.Classes.Monad.Return UVMHS.Init.ùêø
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Init.ùêø
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Init.ùêø
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Init.ùêø
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Init.ùêø a)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Init.ùêø a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Init.ùêø a)

module UVMHS.Core.Data.Function
instance UVMHS.Core.Classes.Functor.Functor ((->) r)
instance UVMHS.Core.Classes.Monad.Return ((->) r)
instance UVMHS.Core.Classes.Monad.Bind ((->) r)
instance UVMHS.Core.Classes.Monad.Monad ((->) r)

module UVMHS.Core.Data.Choice
elimChoice :: (a -> c) -> (b -> c) -> (a ‚à® b) -> c
mapChoice :: (a‚ÇÅ -> a‚ÇÇ) -> (b‚ÇÅ -> b‚ÇÇ) -> (a‚ÇÅ ‚à® b‚ÇÅ) -> a‚ÇÇ ‚à® b‚ÇÇ
mapInl :: (a‚ÇÅ -> a‚ÇÇ) -> (a‚ÇÅ ‚à® b) -> a‚ÇÇ ‚à® b
mapInr :: (b‚ÇÅ -> b‚ÇÇ) -> (a ‚à® b‚ÇÅ) -> a ‚à® b‚ÇÇ
instance UVMHS.Core.Classes.Functor.Functor ((UVMHS.Init.‚à®) a)
instance UVMHS.Core.Classes.Monad.Return ((UVMHS.Init.‚à®) a)
instance UVMHS.Core.Classes.Monad.Bind ((UVMHS.Init.‚à®) a)
instance UVMHS.Core.Classes.Monad.Monad ((UVMHS.Init.‚à®) a)
instance UVMHS.Core.Classes.FunctorM.FunctorM ((UVMHS.Init.‚à®) a)
instance UVMHS.Core.Classes.Monoid.Null b => UVMHS.Core.Classes.Monoid.Null (a UVMHS.Init.‚à® b)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Append b) => UVMHS.Core.Classes.Monoid.Append (a UVMHS.Init.‚à® b)
instance (UVMHS.Core.Classes.Monoid.Append a, UVMHS.Core.Classes.Monoid.Monoid b) => UVMHS.Core.Classes.Monoid.Monoid (a UVMHS.Init.‚à® b)

module UVMHS.Core.Data.Bool
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Init.ùîπ
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Init.ùîπ
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Init.ùîπ
instance UVMHS.Core.Classes.Lattice.Lattice UVMHS.Init.ùîπ

module UVMHS.Core.Data.Arithmetic
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.‚Ñï
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.‚Ñï64
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNat32 UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.‚Ñï32
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat32 UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNat16 UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.‚Ñï16
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat64 UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat32 UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat16 UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToNat8 UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToInt16 UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.‚Ñï8
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO64 UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.‚Ñ§
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToIntO32 UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToIntO16 UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.‚Ñ§32
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToInt16 UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToIntO8 UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.‚Ñ§16
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.DivMod UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO64 UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO32 UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO16 UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToNatO8 UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt64 UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt32 UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt16 UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToInt8 UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.‚Ñ§8
instance UVMHS.Core.Classes.Arithmetic.Zero UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Plus UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Minus UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.One UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Times UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Divide UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Exponential UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Additive UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Multiplicative UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.ToDouble UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Top UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Lattice.MeetLattice UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Root UVMHS.Init.ùîª
instance UVMHS.Core.Classes.Arithmetic.Log UVMHS.Init.ùîª

module UVMHS.Core.Data.String
emptyùïä :: ùïä -> ùîπ
singleùïä :: ‚ÑÇ -> ùïä
buildùïä :: ToIter ùïä t => t -> ùïä
showùïä :: Show a => a -> ùïä
readùïä :: Read a => ùïä -> a
lowerùïä :: ùïä -> ùïä
upperùïä :: ùïä -> ùïä
isEmptyùïä :: ùïä -> ùîπ
splitOnùïä :: ùïä -> ùïä -> ùêø ùïä
lengthùïä :: ùïä -> ‚Ñï
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Init.ùïä
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Init.ùïä
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Init.ùïä
instance UVMHS.Core.Classes.Collections.Single UVMHS.Init.‚ÑÇ UVMHS.Init.ùïä
instance UVMHS.Core.Classes.Collections.ToStream UVMHS.Init.‚ÑÇ UVMHS.Init.ùïä
instance UVMHS.Core.Classes.Collections.ToIter UVMHS.Init.‚ÑÇ UVMHS.Init.ùïä

module UVMHS.Core.Data.Iter
emptyùêº :: ùêº a
singleùêº :: a -> ùêº a
consùêº :: a -> ùêº a -> ùêº a
snocùêº :: ùêº a -> a -> ùêº a
appendùêº :: ùêº a -> ùêº a -> ùêº a
mjoinùêº :: ùêº (ùêº a) -> ùêº a
bindùêº :: ùêº a -> (a -> ùêº b) -> ùêº b
mapMùêº :: Monad m => (a -> m b) -> ùêº a -> m (ùêº b)
fold :: ToIter a t => b -> (a -> b -> b) -> t -> b
foldFrom :: ToIter a t => t -> (a -> b -> b) -> b -> b
foldWith :: ToIter a t => t -> b -> (a -> b -> b) -> b
foldk :: ToIter a t => b -> (a -> (b -> b) -> b -> b) -> t -> b
foldkFrom :: ToIter a t => t -> (a -> (b -> b) -> b -> b) -> b -> b
foldkWith :: ToIter a t => t -> b -> (a -> (b -> b) -> b -> b) -> b
foldr :: ToIter a t => b -> (a -> b -> b) -> t -> b
foldrFrom :: ToIter a t => t -> (a -> b -> b) -> b -> b
foldrWith :: ToIter a t => t -> b -> (a -> b -> b) -> b
mfold :: (Monad m, ToIter a t) => b -> (a -> b -> m b) -> t -> m b
mfoldFrom :: (Monad m, ToIter a t) => t -> (a -> b -> m b) -> b -> m b
mfoldWith :: (Monad m, ToIter a t) => t -> b -> (a -> b -> m b) -> m b
mfoldr :: (Monad m, ToIter a t) => b -> (a -> b -> m b) -> t -> m b
mfoldrFrom :: (Monad m, ToIter a t) => t -> (a -> b -> m b) -> b -> m b
mfoldrWith :: (Monad m, ToIter a t) => t -> b -> (a -> b -> m b) -> m b
each :: (Monad m, ToIter a t) => (a -> m ()) -> t -> m ()
eachWith :: (Monad m, ToIter a t) => t -> (a -> m ()) -> m ()
exec :: (Monad m, ToIter (m ()) t) => t -> m ()
sum :: (ToIter a t, Additive a) => t -> a
product :: (ToIter a t, Multiplicative a) => t -> a
concat :: (Monoid a, ToIter a t) => t -> a
compose :: ToIter (a -> a) t => t -> a -> a
mcompose :: Monad m => ToIter (a -> m a) t => t -> a -> m a
wcompose :: Comonad w => ToIter (w a -> a) t => t -> w a -> a
joins :: (JoinLattice a, ToIter a t) => t -> a
meets :: (MeetLattice a, ToIter a t) => t -> a
or :: ToIter ùîπ t => t -> ùîπ
and :: ToIter ùîπ t => t -> ùîπ
count :: ToIter a t => t -> ‚Ñï
countWith :: ToIter a t => (a -> ùîπ) -> t -> ‚Ñï
reverse :: ToIter a t => t -> ùêº a
repeatI :: ‚Ñï -> (‚Ñï -> a) -> ùêº a
repeat :: ‚Ñï -> a -> ùêº a
build :: forall a. ‚Ñï -> a -> (a -> a) -> ùêº a
upTo :: ‚Ñï -> ùêº ‚Ñï
withIndex :: ToIter a t => t -> ùêº (‚Ñï ‚àß a)
withFirst :: ToIter a t => t -> ùêº (ùîπ ‚àß a)
mapFirst :: ToIter a t => (a -> a) -> t -> ùêº a
mapAfterFirst :: ToIter a t => (a -> a) -> t -> ùêº a
withLast :: ToIter a t => t -> ùêº (ùîπ ‚àß a)
mapLast :: ToIter a t => (a -> a) -> t -> ùêº a
mapBeforeLast :: ToIter a t => (a -> a) -> t -> ùêº a
filterMap :: ToIter a t => (a -> ùëÇ b) -> t -> ùêº b
filter :: ToIter a t => (a -> ùîπ) -> t -> ùêº a
inbetween :: ToIter a t => a -> t -> ùêº a
execN :: Monad m => ‚Ñï -> m () -> m ()
applyN :: ‚Ñï -> b -> (b -> b) -> b
appendN :: Monoid a => ‚Ñï -> a -> a
alignLeftFill :: ‚ÑÇ -> ‚Ñï -> ùïä -> ùïä
alignLeft :: ‚Ñï -> ùïä -> ùïä
alignRightFill :: ‚ÑÇ -> ‚Ñï -> ùïä -> ùïä
alignRight :: ‚Ñï -> ùïä -> ùïä
list :: ToIter a t => t -> ùêø a
string :: ToIter ‚ÑÇ t => t -> ùïä
showCollection :: ToIter a t => ùïä -> ùïä -> ùïä -> (a -> ùïä) -> t -> ùïä
showWithùêº :: (a -> ùïä) -> ùêº a -> ùïä
firstMaxByLT :: ToIter a t => (a -> a -> ùîπ) -> t -> ùëÇ a
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Init.ùêº a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Init.ùêº a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Init.ùêº a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Init.ùêº a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Init.ùêº
instance UVMHS.Core.Classes.Monad.Return UVMHS.Init.ùêº
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Init.ùêº
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Init.ùêº
instance UVMHS.Core.Classes.FunctorM.FunctorM UVMHS.Init.ùêº
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Init.ùêº a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Init.ùêº a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Init.ùêø a)
instance UVMHS.Init.ùïä UVMHS.Core.Classes.Morphism.‚áÑ UVMHS.Init.ùêº UVMHS.Init.‚ÑÇ

module UVMHS.Core.Data.Stream
emptyùëÜ :: ùëÜ a
singleùëÜ :: a -> ùëÜ a
appendùëÜ :: ùëÜ a -> ùëÜ a -> ùëÜ a
mapùëÜ :: (a -> b) -> ùëÜ a -> ùëÜ b
mjoinùëÜ :: forall a. ùëÜ (ùëÜ a) -> ùëÜ a
bindùëÜ :: ùëÜ a -> (a -> ùëÜ b) -> ùëÜ b
unconsùëÜ :: ùëÜ a -> ùëÇ (a ‚àß ùëÜ a)
eqByùëÜ :: (a -> a -> ùîπ) -> ùëÜ a -> ùëÜ a -> ùîπ
compareByùëÜ :: (a -> a -> Ordering) -> ùëÜ a -> ùëÜ a -> Ordering
showWithùëÜ :: (a -> ùïä) -> ùëÜ a -> ùïä
isEmpty :: ToStream a t => t -> ùîπ
naturals :: ùëÜ ‚Ñï
zip :: (ToStream a t‚ÇÅ, ToStream b t‚ÇÇ) => t‚ÇÅ -> t‚ÇÇ -> ùëÜ (a ‚àß b)
firstN :: ToStream a t => ‚Ñï -> t -> ùëÜ a
lastN :: ToStream a t => ‚Ñï -> t -> ùêº a
skipN :: ToStream a t => ‚Ñï -> t -> ùëÜ a
stripPrefixùëÜ :: (Eq a, ToStream a t‚ÇÅ, ToStream a t‚ÇÇ) => t‚ÇÅ -> t‚ÇÇ -> ùëÇ (ùëÜ a)
prefixBeforeùëÜ :: ToStream a t => (a -> ùîπ) -> t -> ùëÜ a
prefixBeforeNùëÜ :: ToStream a t => ‚Ñï -> (a -> ‚Ñï) -> t -> ùëÜ a
postfixAfterùëÜ :: ToStream a t => (a -> ùîπ) -> t -> ùëÜ a
coredata_stream_e1 :: ùëÜ ‚Ñï
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Init.ùëÜ a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Init.ùëÜ a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Init.ùëÜ a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Init.ùëÜ
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Init.ùëÜ a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Init.ùëÜ a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Init.ùëÜ a)
instance UVMHS.Core.Classes.Monad.Return UVMHS.Init.ùëÜ
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Init.ùëÜ
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Init.ùëÜ a)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Init.ùëÜ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Init.ùëÜ a)

module UVMHS.Core.Data.Set
p√∏ :: ùëÉ a
singleùëÉ :: Ord a => a -> ùëÉ a
(‚àà) :: Ord a => a -> ùëÉ a -> ùîπ
(‚àâ) :: Ord a => a -> ùëÉ a -> ùîπ
(‚äÜ) :: Ord a => ùëÉ a -> ùëÉ a -> ùîπ
(‚äá) :: Ord a => ùëÉ a -> ùëÉ a -> ùîπ
(‚à™) :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
(‚à©) :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
(‚àñ) :: Ord a => ùëÉ a -> ùëÉ a -> ùëÉ a
psize :: ùëÉ a -> ‚Ñï
pmin :: ùëÉ a -> ùëÇ (a ‚àß ùëÉ a)
pmax :: ùëÉ a -> ùëÇ (a ‚àß ùëÉ a)
pmap :: Ord b => (a -> b) -> ùëÉ a -> ùëÉ b
streamùëÉ :: ùëÉ a -> ùëÜ a
powùêº :: Ord a => ùêº a -> ùëÉ a
pow :: (Ord a, ToIter a t) => t -> ùëÉ a
uniques :: (Ord a, ToIter a t) => t -> ùêº a
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Collections.Single a (UVMHS.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.POrd (UVMHS.Init.ùëÉ a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Unit (UVMHS.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Cross (UVMHS.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Prodoid (UVMHS.Init.ùëÉ a)
instance UVMHS.Core.Classes.Arithmetic.Zero (UVMHS.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Arithmetic.Plus (UVMHS.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Arithmetic.Additive (UVMHS.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Arithmetic.Zero a) => UVMHS.Core.Classes.Arithmetic.One (UVMHS.Init.ùëÉ a)
instance (GHC.Classes.Ord a, UVMHS.Core.Classes.Arithmetic.Plus a) => UVMHS.Core.Classes.Arithmetic.Times (UVMHS.Init.ùëÉ a)
instance UVMHS.Core.Classes.Lattice.Bot (UVMHS.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Init.ùëÉ a)
instance GHC.Classes.Ord a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Init.ùëÉ a)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Init.ùëÉ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Init.ùëÉ a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Init.ùëÉ a)

module UVMHS.Core.Data.Sequence
q√∏ :: ùëÑ a
consùëÑ :: a -> ùëÑ a -> ùëÑ a
unconsùëÑ :: ùëÑ a -> ùëÇ (a ‚àß ùëÑ a)
snocùëÑ :: ùëÑ a -> a -> ùëÑ a
unsnocùëÑ :: ùëÑ a -> ùëÇ (ùëÑ a ‚àß a)
singleùëÑ :: a -> ùëÑ a
appendùëÑ :: ùëÑ a -> ùëÑ a -> ùëÑ a
mapùëÑ :: (a -> b) -> ùëÑ a -> ùëÑ b
bindùëÑ :: ùëÑ a -> (a -> ùëÑ b) -> ùëÑ b
streamùëÑ :: ùëÑ a -> ùëÜ a
seqùêº :: ùêº a -> ùëÑ a
seq :: ToIter a t => t -> ùëÑ a
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Init.ùëÑ a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Init.ùëÑ a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Init.ùëÑ a)
instance UVMHS.Core.Classes.Collections.Single a (UVMHS.Init.ùëÑ a)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Init.ùëÑ
instance UVMHS.Core.Classes.Monad.Return UVMHS.Init.ùëÑ
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Init.ùëÑ
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Init.ùëÑ
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Init.ùëÑ a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Init.ùëÑ a)
instance GHC.Show.Show a => GHC.Show.Show (UVMHS.Init.ùëÑ a)

module UVMHS.Core.Data.Dict
lookupùê∑ :: Ord k => (k ‚á∞ v) -> k -> ùëÇ v
singleùê∑ :: (k ‚àß v) -> k ‚á∞ v
d√∏ :: k ‚á∞ v
(‚Ü¶) :: Ord k => k -> v -> k ‚á∞ v
infixr 2 ‚Ü¶
(‚ãµ) :: Ord k => k -> (k ‚á∞ v) -> ùîπ
(‚©å) :: Ord k => (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
(‚©ç) :: Ord k => (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
(‚à∏) :: Ord k => (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
delete :: Ord k => k -> (k ‚á∞ v) -> k ‚á∞ v
dsize :: Ord k => (k ‚á∞ v) -> ‚Ñï
subDictBy :: Ord k => (v -> v -> ùîπ) -> (k ‚á∞ v) -> (k ‚á∞ v) -> ùîπ
unionWith :: Ord k => (v -> v -> v) -> (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
(‚äé) :: (Ord k, Additive v) => (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
interWith :: Ord k => (v -> v -> v) -> (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
diffWith :: Ord k => (v -> v -> v) -> (k ‚á∞ v) -> (k ‚á∞ v) -> k ‚á∞ v
dmin :: (k ‚á∞ v) -> ùëÇ ((k ‚àß v) ‚àß (k ‚á∞ v))
dmax :: (k ‚á∞ v) -> ùëÇ ((k ‚àß v) ‚àß (k ‚á∞ v))
dview :: Ord k => k -> (k ‚á∞ v) -> ùëÇ (v ‚àß (k ‚á∞ v))
without :: Ord k => ùëÉ k -> (k ‚á∞ v) -> k ‚á∞ v
restrict :: Ord k => ùëÉ k -> (k ‚á∞ v) -> k ‚á∞ v
keys :: Ord k => (k ‚á∞ v) -> ùëÉ k
values :: (k ‚á∞ v) -> ùêº v
mapùê∑ :: (v‚ÇÅ -> v‚ÇÇ) -> (k ‚á∞ v‚ÇÅ) -> k ‚á∞ v‚ÇÇ
streamùê∑ :: (k ‚á∞ v) -> ùëÜ (k ‚àß v)
dictùêº :: Ord k => ùêº (k ‚àß v) -> k ‚á∞ v
dict :: (Ord k, ToIter (k ‚á∞ v) t) => t -> k ‚á∞ v
assoc :: (Ord k, ToIter (k ‚àß v) t) => t -> k ‚á∞ v
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Collections.Lookup k v (k UVMHS.Init.‚á∞ v)
instance GHC.Classes.Ord k => UVMHS.Core.Classes.Collections.Single (k UVMHS.Init.‚àß v) (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.POrd v) => UVMHS.Core.Classes.Lattice.POrd (k UVMHS.Init.‚á∞ v)
instance UVMHS.Core.Classes.Monoid.Null (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append v) => UVMHS.Core.Classes.Monoid.Append (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append v) => UVMHS.Core.Classes.Monoid.Monoid (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Null k, UVMHS.Core.Classes.Monoid.Null v) => UVMHS.Core.Classes.Monoid.Unit (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Append k, UVMHS.Core.Classes.Monoid.Append v, UVMHS.Core.Classes.Monoid.Cross v) => UVMHS.Core.Classes.Monoid.Cross (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Monoid.Monoid k, UVMHS.Core.Classes.Monoid.Prodoid v) => UVMHS.Core.Classes.Monoid.Prodoid (k UVMHS.Init.‚á∞ v)
instance UVMHS.Core.Classes.Arithmetic.Zero (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Plus v) => UVMHS.Core.Classes.Arithmetic.Plus (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Plus v) => UVMHS.Core.Classes.Arithmetic.Additive (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Zero k, UVMHS.Core.Classes.Arithmetic.Zero v) => UVMHS.Core.Classes.Arithmetic.One (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Plus k, UVMHS.Core.Classes.Arithmetic.Plus v, UVMHS.Core.Classes.Arithmetic.Times v) => UVMHS.Core.Classes.Arithmetic.Times (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Arithmetic.Additive k, UVMHS.Core.Classes.Arithmetic.Multiplicative v) => UVMHS.Core.Classes.Arithmetic.Multiplicative (k UVMHS.Init.‚á∞ v)
instance UVMHS.Core.Classes.Lattice.Bot (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Join v) => UVMHS.Core.Classes.Lattice.Join (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Join v) => UVMHS.Core.Classes.Lattice.JoinLattice (k UVMHS.Init.‚á∞ v)
instance (GHC.Classes.Ord k, UVMHS.Core.Classes.Lattice.Meet v) => UVMHS.Core.Classes.Lattice.Meet (k UVMHS.Init.‚á∞ v)
instance UVMHS.Core.Classes.Functor.Functor ((UVMHS.Init.‚á∞) k)
instance UVMHS.Core.Classes.Collections.ToStream (k UVMHS.Init.‚àß v) (k UVMHS.Init.‚á∞ v)
instance UVMHS.Core.Classes.Collections.ToIter (k UVMHS.Init.‚àß v) (k UVMHS.Init.‚á∞ v)
instance (GHC.Show.Show k, GHC.Show.Show v) => GHC.Show.Show (k UVMHS.Init.‚á∞ v)

module UVMHS.Core.Data

module UVMHS.Core.Lens
newtype a ‚ü¢ b
Lens :: (a -> b ‚àß (b -> a)) -> (‚ü¢) a b
[runLens] :: (‚ü¢) a b -> a -> b ‚àß (b -> a)
infixr 2 ‚ü¢
data a ‚å≤ b
Prism :: (b -> a) -> (a -> ùëÇ b) -> (‚å≤) a b
[construct] :: (‚å≤) a b -> b -> a
[view] :: (‚å≤) a b -> a -> ùëÇ b
infixr 2 ‚å≤
class Alter (t :: ‚òÖ -> ‚òÖ -> ‚òÖ)
alter :: Alter t => t a b -> (b -> b) -> a -> a
class AlterM (t :: ‚òÖ -> ‚òÖ -> ‚òÖ)
alterM :: (AlterM t, Monad m) => t a b -> (b -> m b) -> a -> m a
update :: Alter t => t a b -> b -> a -> a
updateM :: (AlterM t, Monad m) => t a b -> m b -> a -> m a
lens :: (a -> b) -> (a -> b -> a) -> a ‚ü¢ b
isoLens :: (a -> b) -> (b -> a) -> a ‚ü¢ b
access :: (a ‚ü¢ b) -> a -> b
prism :: (b -> a) -> (a -> ùëÇ b) -> a ‚å≤ b
isoPrism :: (b -> a) -> (a -> b) -> a ‚å≤ b
unsafeView :: (a ‚å≤ b) -> a -> b
shape :: (a ‚å≤ b) -> a -> ùîπ
leftL :: (a ‚à® b) ‚å≤ a
rightL :: (a ‚à® b) ‚å≤ b
fstL :: (a ‚àß b) ‚ü¢ a
sndL :: (a ‚àß b) ‚ü¢ b
nothingL :: ùëÇ a ‚å≤ ()
justL :: ùëÇ a ‚å≤ a
singleL :: ùêø a ‚å≤ a
class HasPrism a b
hasPrism :: HasPrism a b => a ‚å≤ b
class HasLens a b
hasLens :: HasLens a b => a ‚ü¢ b
Œπ :: HasPrism a b => b -> a
Œπview :: forall b a. HasPrism a b => a -> ùëÇ b
œÄ :: HasLens a b => a -> b
instance UVMHS.Core.Lens.HasLens a a
instance UVMHS.Core.Lens.HasPrism a a
instance UVMHS.Core.Lens.AlterM (UVMHS.Core.Lens.‚ü¢)
instance UVMHS.Core.Lens.Alter (UVMHS.Core.Lens.‚ü¢)
instance UVMHS.Core.Lens.Alter (UVMHS.Core.Lens.‚å≤)
instance UVMHS.Core.Classes.Morphism.Category (UVMHS.Core.Lens.‚å≤)
instance UVMHS.Core.Classes.Morphism.Category (UVMHS.Core.Lens.‚ü¢)

module UVMHS.Core.Effects
class MonadIO (m :: ‚òÖ -> ‚òÖ)
io :: MonadIO m => IO a -> m a
class LiftIO t
liftIO :: forall m. (LiftIO t, Monad m) => (forall a. IO a -> m a) -> forall a. IO a -> t m a
class MonadReader r m | m -> r
ask :: MonadReader r m => m r
local :: forall a. MonadReader r m => r -> m a -> m a
class LiftReader t
liftAsk :: forall m r. (LiftReader t, Monad m) => m r -> t m r
liftLocal :: forall m r. (LiftReader t, Monad m) => (forall a. r -> m a -> m a) -> forall a. r -> t m a -> t m a
class MonadWriter o m | m -> o
tell :: MonadWriter o m => o -> m ()
hijack :: forall a. MonadWriter o m => m a -> m (o ‚àß a)
class LiftWriter t
liftTell :: forall m o. (LiftWriter t, Monad m) => (o -> m ()) -> o -> t m ()
liftHijack :: forall m o. (LiftWriter t, Monad m) => (forall a. m a -> m (o ‚àß a)) -> forall a. t m a -> t m (o ‚àß a)
class MonadState s m | m -> s
get :: MonadState s m => m s
put :: MonadState s m => s -> m ()
class LiftState t
liftGet :: forall m s. (LiftState t, Monad m) => m s -> t m s
liftPut :: forall m s. (LiftState t, Monad m) => (s -> m ()) -> s -> t m ()
class MonadFail m
abort :: forall a. MonadFail m => m a
(‚éÖ) :: forall a. MonadFail m => m a -> m a -> m a
infixl 4 ‚éÖ
class LiftFail t
liftAbort :: forall m. (LiftFail t, Monad m) => (forall a. m a) -> forall a. t m a
liftTry :: forall m. (LiftFail t, Monad m) => (forall a. m a -> m a -> m a) -> forall a. t m a -> t m a -> t m a
class MonadError e m | m -> e
throw :: forall a. MonadError e m => e -> m a
catch :: forall a. MonadError e m => m a -> (e -> m a) -> m a
class LiftError t
liftThrow :: forall m e. (LiftError t, Monad m) => (forall a. e -> m a) -> forall a. e -> t m a
liftCatch :: forall m e. (LiftError t, Monad m) => (forall a. m a -> (e -> m a) -> m a) -> forall a. t m a -> (e -> t m a) -> t m a
class MonadNondet m
mzero :: forall a. MonadNondet m => m a
(‚äû) :: forall a. MonadNondet m => m a -> m a -> m a
infixl 4 ‚äû
class LiftNondet t
liftMzero :: forall m. (LiftNondet t, Monad m) => (forall a. m a) -> forall a. t m a
liftMplus :: forall m. (LiftNondet t, Monad m) => (forall a. m a -> m a -> m a) -> forall a. t m a -> t m a -> t m a
class MonadTop m
mtop :: forall a. MonadTop m => m a
class LiftTop t
liftMtop :: forall m. (LiftTop t, Monad m) => (forall a. m a) -> forall a. t m a
class MonadCont r m | m -> r
callCC :: forall a. MonadCont r m => ((a -> m r) -> m r) -> m a
withC :: forall a. MonadCont r m => (a -> m r) -> m a -> m r
class LiftCont t
liftCallCC :: forall m r. (LiftCont t, Monad m) => (forall a. ((a -> m r) -> m r) -> m a) -> forall a. ((a -> t m r) -> t m r) -> t m a
liftWithC :: forall m r. (LiftCont t, Monad m) => (forall a. (a -> m r) -> m a -> m r) -> forall a. (a -> t m r) -> t m a -> t m r
askL :: (Monad m, MonadReader r m) => (r ‚ü¢ a) -> m a
mapEnv :: (Monad m, MonadReader r m) => (r -> r) -> m a -> m a
localL :: (Monad m, MonadReader r‚ÇÅ m) => (r‚ÇÅ ‚ü¢ r‚ÇÇ) -> r‚ÇÇ -> m a -> m a
mapEnvL :: (Monad m, MonadReader r‚ÇÅ m) => (r‚ÇÅ ‚ü¢ r‚ÇÇ) -> (r‚ÇÇ -> r‚ÇÇ) -> m a -> m a
tellL :: (Monoid o‚ÇÅ, Monad m, MonadWriter o‚ÇÅ m) => (o‚ÇÅ ‚ü¢ o‚ÇÇ) -> o‚ÇÇ -> m ()
hijackL :: (Monad m, MonadWriter o‚ÇÅ m, Monoid o‚ÇÇ) => (o‚ÇÅ ‚ü¢ o‚ÇÇ) -> m a -> m (o‚ÇÇ ‚àß a)
mapOut :: (Monad m, MonadWriter o m) => (o -> o) -> m a -> m a
retOut :: forall o m a. (Monad m, MonadWriter o m) => m a -> m o
getL :: (Monad m, MonadState s m) => (s ‚ü¢ a) -> m a
putL :: (Monad m, MonadState s m) => (s ‚ü¢ a) -> a -> m ()
modify :: (Monad m, MonadState s m) => (s -> s) -> m ()
modifyL :: (Monad m, MonadState s m) => (s ‚ü¢ a) -> (a -> a) -> m ()
getput :: (Monad m, MonadState s m) => s -> m s
getputL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> s‚ÇÇ -> m s‚ÇÇ
next :: (Monad m, MonadState s m, Multiplicative s) => m s
nextL :: (Monad m, MonadState s m, Multiplicative a) => (s ‚ü¢ a) -> m a
bump :: (Monad m, MonadState s m, Multiplicative s) => m ()
bumpL :: (Monad m, MonadState s m, Multiplicative a) => (s ‚ü¢ a) -> m ()
localize :: (Monad m, MonadState s m) => s -> m a -> m (s ‚àß a)
localizeL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> s‚ÇÇ -> m a -> m (s‚ÇÇ ‚àß a)
localState :: (Monad m, MonadState s m) => s -> m a -> m a
localStateL :: (Monad m, MonadState s‚ÇÅ m) => (s‚ÇÅ ‚ü¢ s‚ÇÇ) -> s‚ÇÇ -> m a -> m a
retState :: forall s m a. (Monad m, MonadState s m) => m a -> m s
abortùëÇ :: forall m a. (Monad m, MonadFail m) => ùëÇ a -> m a
tries :: (Monad m, MonadFail m, ToIter (m a) t) => t -> m a
throwùëÇ :: (Monad m, MonadError e m) => e -> ùëÇ a -> m a
mconcat :: (MonadNondet m, ToIter (m a) t) => t -> m a
from :: (Monad m, MonadNondet m, ToIter a t) => t -> m a
oneOrMoreSplit :: (Monad m, MonadNondet m) => m a -> m (a ‚àß ùêø a)
oneOrMore :: (Monad m, MonadNondet m) => m a -> m (ùêø a)
many :: (Monad m, MonadNondet m) => m a -> m (ùêø a)
twoOrMoreSplit :: (Monad m, MonadNondet m) => m a -> m ((a ‚àß a) ‚àß ùêø a)
manySepBy :: (Monad m, MonadNondet m) => m () -> m a -> m (ùêø a)
manyPrefBy :: (Monad m, MonadNondet m) => m () -> m a -> m (ùêø a)
mzeroùëÇ :: (Monad m, MonadNondet m) => ùëÇ a -> m a
returnùëÉ :: forall m a. (Monad m, MonadNondet m) => ùëÉ a -> m a
reset :: (Monad m, MonadCont r m) => m r -> m r
modifyC :: (Monad m, MonadCont r m) => (r -> m r) -> m a -> m a
withCOn :: (Monad m, MonadCont r m) => m a -> (a -> m r) -> m r
deriveAsk :: forall m‚ÇÅ m‚ÇÇ r. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadReader r m‚ÇÇ) => m‚ÇÅ r
deriveLocal :: forall m‚ÇÅ m‚ÇÇ r a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadReader r m‚ÇÇ) => r -> m‚ÇÅ a -> m‚ÇÅ a
deriveTell :: forall m‚ÇÅ m‚ÇÇ o. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadWriter o m‚ÇÇ) => o -> m‚ÇÅ ()
deriveHijack :: forall m‚ÇÅ m‚ÇÇ o a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadWriter o m‚ÇÇ) => m‚ÇÅ a -> m‚ÇÅ (o ‚àß a)
deriveGet :: forall m‚ÇÅ m‚ÇÇ s. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadState s m‚ÇÇ) => m‚ÇÅ s
derivePut :: forall m‚ÇÅ m‚ÇÇ s. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadState s m‚ÇÇ) => s -> m‚ÇÅ ()
deriveAbort :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadFail m‚ÇÇ) => m‚ÇÅ a
deriveTry :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadFail m‚ÇÇ) => m‚ÇÅ a -> m‚ÇÅ a -> m‚ÇÅ a
deriveThrow :: forall m‚ÇÅ m‚ÇÇ e a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadError e m‚ÇÇ) => e -> m‚ÇÅ a
deriveCatch :: forall m‚ÇÅ m‚ÇÇ e a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadError e m‚ÇÇ) => m‚ÇÅ a -> (e -> m‚ÇÅ a) -> m‚ÇÅ a
deriveMzero :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadNondet m‚ÇÇ) => m‚ÇÅ a
deriveMplus :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadNondet m‚ÇÇ) => m‚ÇÅ a -> m‚ÇÅ a -> m‚ÇÅ a
deriveMtop :: forall m‚ÇÅ m‚ÇÇ a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadTop m‚ÇÇ) => m‚ÇÅ a
deriveCallCC :: forall m‚ÇÅ m‚ÇÇ r a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadCont r m‚ÇÇ) => ((a -> m‚ÇÅ r) -> m‚ÇÅ r) -> m‚ÇÅ a
deriveWithC :: forall m‚ÇÅ m‚ÇÇ r a. (m‚ÇÅ ‚áÑ‚Åª m‚ÇÇ, MonadCont r m‚ÇÇ) => (a -> m‚ÇÅ r) -> m‚ÇÅ a -> m‚ÇÅ r
instance UVMHS.Core.Effects.MonadNondet UVMHS.Init.ùêº
instance UVMHS.Core.Effects.MonadNondet UVMHS.Init.ùêø
instance UVMHS.Core.Effects.MonadNondet UVMHS.Init.ùëÑ
instance UVMHS.Core.Effects.MonadError e ((UVMHS.Init.‚à®) e)
instance UVMHS.Core.Effects.MonadFail UVMHS.Init.ùëÇ
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.MonadWriter o ((UVMHS.Init.‚àß) o)
instance UVMHS.Core.Effects.MonadReader r ((->) r)

module UVMHS.Core.Transformers
newtype (‚ä°) (t‚ÇÅ :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ)) (t‚ÇÇ :: (‚òÖ -> ‚òÖ) -> (‚òÖ -> ‚òÖ)) m a
Compose2 :: t‚ÇÅ (t‚ÇÇ m) a -> (‚ä°) m a
[unCompose2] :: (‚ä°) m a -> t‚ÇÅ (t‚ÇÇ m) a
infixr 6 ‚ä°
deriveLiftIO :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftIO t‚ÇÇ) => (forall a. IO a -> m a) -> forall a. IO a -> t‚ÇÅ m a
deriveLiftAsk :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftReader t‚ÇÇ) => m r -> t‚ÇÅ m r
deriveLiftLocal :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftReader t‚ÇÇ) => (forall a. r -> m a -> m a) -> forall a. r -> t‚ÇÅ m a -> t‚ÇÅ m a
deriveLiftTell :: forall t‚ÇÅ t‚ÇÇ m o. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftWriter t‚ÇÇ) => (o -> m ()) -> o -> t‚ÇÅ m ()
deriveLiftHijack :: forall t‚ÇÅ t‚ÇÇ m o. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftWriter t‚ÇÇ) => (forall a. m a -> m (o ‚àß a)) -> forall a. t‚ÇÅ m a -> t‚ÇÅ m (o ‚àß a)
deriveLiftGet :: forall t‚ÇÅ t‚ÇÇ m s. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftState t‚ÇÇ) => m s -> t‚ÇÅ m s
deriveLiftPut :: forall t‚ÇÅ t‚ÇÇ m s. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftState t‚ÇÇ) => (s -> m ()) -> s -> t‚ÇÅ m ()
deriveLiftAbort :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftFail t‚ÇÇ) => (forall a. m a) -> forall a. t‚ÇÅ m a
deriveLiftTry :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftFail t‚ÇÇ) => (forall a. m a -> m a -> m a) -> forall a. t‚ÇÅ m a -> t‚ÇÅ m a -> t‚ÇÅ m a
deriveLiftThrow :: forall t‚ÇÅ t‚ÇÇ m e. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftError t‚ÇÇ) => (forall a. e -> m a) -> forall a. e -> t‚ÇÅ m a
deriveLiftCatch :: forall t‚ÇÅ t‚ÇÇ m e. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftError t‚ÇÇ) => (forall a. m a -> (e -> m a) -> m a) -> forall a. t‚ÇÅ m a -> (e -> t‚ÇÅ m a) -> t‚ÇÅ m a
deriveLiftMzero :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftNondet t‚ÇÇ) => (forall a. m a) -> forall a. t‚ÇÅ m a
deriveLiftMplus :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftNondet t‚ÇÇ) => (forall a. m a -> m a -> m a) -> forall a. t‚ÇÅ m a -> t‚ÇÅ m a -> t‚ÇÅ m a
deriveLiftMtop :: forall t‚ÇÅ t‚ÇÇ m. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftTop t‚ÇÇ) => (forall a. m a) -> forall a. t‚ÇÅ m a
deriveLiftCallCC :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftCont t‚ÇÇ) => (forall a. ((a -> m r) -> m r) -> m a) -> forall a. ((a -> t‚ÇÅ m r) -> t‚ÇÅ m r) -> t‚ÇÅ m a
deriveLiftWithC :: forall t‚ÇÅ t‚ÇÇ m r. (Monad m, t‚ÇÅ ‚áÑ‚Åº t‚ÇÇ, LiftCont t‚ÇÇ) => (forall a. (a -> m r) -> m a -> m r) -> forall a. (a -> t‚ÇÅ m r) -> t‚ÇÅ m a -> t‚ÇÅ m r
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Monad.Monad m) => UVMHS.Core.Classes.Functor.Functor ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Monad.Monad m) => UVMHS.Core.Classes.Monad.Return ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Monad.Monad m) => UVMHS.Core.Classes.Monad.Bind ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÅ m'), forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Classes.Monad.Monad m) => UVMHS.Core.Classes.Monad.Monad ((UVMHS.Core.Transformers.‚ä°) t‚ÇÅ t‚ÇÇ m)
instance (UVMHS.Core.Classes.Functor.Functor2 t‚ÇÅ, UVMHS.Core.Classes.Functor.Functor2 t‚ÇÇ) => UVMHS.Core.Classes.Functor.Functor2 (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftIO t‚ÇÅ, UVMHS.Core.Effects.LiftIO t‚ÇÇ) => UVMHS.Core.Effects.LiftIO (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftReader t‚ÇÅ, UVMHS.Core.Effects.LiftReader t‚ÇÇ) => UVMHS.Core.Effects.LiftReader (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftWriter t‚ÇÅ, UVMHS.Core.Effects.LiftWriter t‚ÇÇ) => UVMHS.Core.Effects.LiftWriter (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftState t‚ÇÅ, UVMHS.Core.Effects.LiftState t‚ÇÇ) => UVMHS.Core.Effects.LiftState (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftFail t‚ÇÅ, UVMHS.Core.Effects.LiftFail t‚ÇÇ) => UVMHS.Core.Effects.LiftFail (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftError t‚ÇÅ, UVMHS.Core.Effects.LiftError t‚ÇÇ) => UVMHS.Core.Effects.LiftError (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftNondet t‚ÇÅ, UVMHS.Core.Effects.LiftNondet t‚ÇÇ) => UVMHS.Core.Effects.LiftNondet (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftTop t‚ÇÅ, UVMHS.Core.Effects.LiftTop t‚ÇÇ) => UVMHS.Core.Effects.LiftTop (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (forall (m' :: * -> *). UVMHS.Core.Classes.Monad.Monad m' => UVMHS.Core.Classes.Monad.Monad (t‚ÇÇ m'), UVMHS.Core.Effects.LiftCont t‚ÇÅ, UVMHS.Core.Effects.LiftCont t‚ÇÇ) => UVMHS.Core.Effects.LiftCont (t‚ÇÅ UVMHS.Core.Transformers.‚ä° t‚ÇÇ)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadIO m, UVMHS.Core.Effects.LiftIO t) => UVMHS.Core.Effects.MonadIO (t m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadReader r m, UVMHS.Core.Effects.LiftReader t) => UVMHS.Core.Effects.MonadReader r (t m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadWriter o m, UVMHS.Core.Effects.LiftWriter t) => UVMHS.Core.Effects.MonadWriter o (t m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadState s m, UVMHS.Core.Effects.LiftState t) => UVMHS.Core.Effects.MonadState s (t m)
instance forall k (m :: * -> *) (t :: (* -> *) -> k -> *). (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadFail m, UVMHS.Core.Effects.LiftFail t) => UVMHS.Core.Effects.MonadFail (t m)
instance forall k (m :: * -> *) e (t :: (* -> *) -> k -> *). (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadError e m, UVMHS.Core.Effects.LiftError t) => UVMHS.Core.Effects.MonadError e (t m)
instance forall k (m :: * -> *) (t :: (* -> *) -> k -> *). (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadNondet m, UVMHS.Core.Effects.LiftNondet t) => UVMHS.Core.Effects.MonadNondet (t m)
instance forall k (m :: * -> *) (t :: (* -> *) -> k -> *). (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadTop m, UVMHS.Core.Effects.LiftTop t) => UVMHS.Core.Effects.MonadTop (t m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont r m, UVMHS.Core.Effects.LiftCont t) => UVMHS.Core.Effects.MonadCont r (t m)
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftIO t‚ÇÇ) => UVMHS.Core.Effects.LiftIO t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftReader t‚ÇÇ) => UVMHS.Core.Effects.LiftReader t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftWriter t‚ÇÇ) => UVMHS.Core.Effects.LiftWriter t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftState t‚ÇÇ) => UVMHS.Core.Effects.LiftState t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftFail t‚ÇÇ) => UVMHS.Core.Effects.LiftFail t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftError t‚ÇÇ) => UVMHS.Core.Effects.LiftError t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftNondet t‚ÇÇ) => UVMHS.Core.Effects.LiftNondet t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftTop t‚ÇÇ) => UVMHS.Core.Effects.LiftTop t‚ÇÅ
instance (t‚ÇÅ UVMHS.Core.Classes.Morphism.‚áÑ‚Åº t‚ÇÇ, UVMHS.Core.Effects.LiftCont t‚ÇÇ) => UVMHS.Core.Effects.LiftCont t‚ÇÅ

module UVMHS.Core.TH
class MonadQ (m :: ‚òÖ -> ‚òÖ)
qio :: MonadQ m => Q a -> m a
thString :: ùïä -> Exp
thConNames :: Con -> ùêø Name
thTyVarBndrName :: TyVarBndr -> Name
thSingleClause :: ùêø Pat -> Exp -> Clause
thSingleMatch :: Pat -> Exp -> Match
thViewSimpleCon :: Con -> ùëÇ (Name ‚àß ùêø Type)
thTyConIL :: Info ‚å≤ Dec
thDataDL :: Dec ‚å≤ (((((Cxt ‚àß Name) ‚àß ùêø TyVarBndr) ‚àß ùëÇ Kind) ‚àß ùêø Con) ‚àß ùêø DerivClause)
thNewtypeDL :: Dec ‚å≤ (((((Cxt ‚àß Name) ‚àß ùêø TyVarBndr) ‚àß ùëÇ Kind) ‚àß Con) ‚àß ùêø DerivClause)
thViewADT :: Dec -> ùëÇ (((((Cxt ‚àß Name) ‚àß ùêø TyVarBndr) ‚àß ùëÇ Kind) ‚àß ùêø Con) ‚àß ùêø DerivClause)
thViewSingleConADT :: Dec -> ùëÇ (((((Cxt ‚àß Name) ‚àß ùêø TyVarBndr) ‚àß ùëÇ Kind) ‚àß Con) ‚àß ùêø DerivClause)
thRecCL :: Con ‚å≤ (Name ‚àß ùêø VarStrictType)
instance UVMHS.Core.TH.MonadQ Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Functor.Functor Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Monad.Return Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Monad.Bind Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.Monad.Monad Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Effects.MonadIO Language.Haskell.TH.Syntax.Q
instance UVMHS.Core.Classes.DSL.Apply Language.Haskell.TH.Syntax.Exp
instance UVMHS.Core.Classes.DSL.Tup Language.Haskell.TH.Syntax.Exp
instance UVMHS.Core.Classes.DSL.Tup Language.Haskell.TH.Syntax.Pat
instance UVMHS.Core.Classes.DSL.Apply Language.Haskell.TH.Syntax.Type
instance UVMHS.Core.Classes.DSL.Tup Language.Haskell.TH.Syntax.Type
instance UVMHS.Core.Classes.DSL.Arrow Language.Haskell.TH.Syntax.Type

module UVMHS.Core.Monads
newtype ID a
ID :: a -> ID a
[unID] :: ID a -> a
newtype ReaderT r m a
ReaderT :: (r -> m a) -> ReaderT r m a
[unReaderT] :: ReaderT r m a -> r -> m a
runReaderT :: forall r m a. r -> ReaderT r m a -> m a
newtype WriterT o m a
WriterT :: m (o ‚àß a) -> WriterT o m a
[unWriterT] :: WriterT o m a -> m (o ‚àß a)
evalWriterT :: forall o m a. Functor m => WriterT o m a -> m a
newtype StateT s m a
StateT :: (s -> m (s ‚àß a)) -> StateT s m a
[unStateT] :: StateT s m a -> s -> m (s ‚àß a)
runStateT :: forall s m a. s -> StateT s m a -> m (s ‚àß a)
evalStateT :: forall s m a. Functor m => s -> StateT s m a -> m a
type State s = StateT s ID
runState :: s -> State s a -> s ‚àß a
evalState :: s -> State s a -> a
newtype FailT m a
FailT :: m (ùëÇ a) -> FailT m a
[unFailT] :: FailT m a -> m (ùëÇ a)
newtype ErrorT e m a
ErrorT :: m (e ‚à® a) -> ErrorT e m a
[unErrorT] :: ErrorT e m a -> m (e ‚à® a)
newtype NondetT m a
NondetT :: m (ùëÑ a) -> NondetT m a
[unNondetT] :: NondetT m a -> m (ùëÑ a)
newtype ContT r m a
ContT :: ((a -> m r) -> m r) -> ContT r m a
[unContT] :: ContT r m a -> (a -> m r) -> m r
runContT :: (a -> m r) -> ContT r m a -> m r
newtype RWST r o s m a
RWST :: ReaderT r (WriterT o (StateT s m)) a -> RWST r o s m a
[unRWST] :: RWST r o s m a -> ReaderT r (WriterT o (StateT s m)) a
mkRWST :: forall r o s m a. Monad m => (r -> s -> m ((s ‚àß o) ‚àß a)) -> RWST r o s m a
runRWST :: forall r o s m a. Monad m => r -> s -> RWST r o s m a -> m ((s ‚àß o) ‚àß a)
evalRWST :: forall r o s m a. Monad m => r -> s -> RWST r o s m a -> m a
type RWS r o s = RWST r o s ID
mkRWS :: forall r o s a. (r -> s -> (s ‚àß o) ‚àß a) -> RWS r o s a
runRWS :: forall r o s a. r -> s -> RWS r o s a -> (s ‚àß o) ‚àß a
evalRWS :: forall r o s a. r -> s -> RWS r o s a -> a
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadIO m) => UVMHS.Core.Effects.MonadIO (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Append o) => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Append o) => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.RWST r o s m)
instance (UVMHS.Core.Classes.Monad.Return m, UVMHS.Core.Classes.Monoid.Null o) => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.RWST r o s m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.RWST r o s m)
instance UVMHS.Core.Classes.Lattice.Difference a => UVMHS.Core.Classes.Lattice.Difference (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Dual a => UVMHS.Core.Classes.Lattice.Dual (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Lattice.Bot a, UVMHS.Core.Classes.Lattice.Join a, UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.Lattice (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Lattice.Top a, UVMHS.Core.Classes.Lattice.Meet a) => UVMHS.Core.Classes.Lattice.MeetLattice (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Meet a => UVMHS.Core.Classes.Lattice.Meet (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Top a => UVMHS.Core.Classes.Lattice.Top (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Lattice.Bot a, UVMHS.Core.Classes.Lattice.Join a) => UVMHS.Core.Classes.Lattice.JoinLattice (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Join a => UVMHS.Core.Classes.Lattice.Join (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Lattice.Bot a => UVMHS.Core.Classes.Lattice.Bot (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Monoid.Null a, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ID a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ID a)
instance (UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont (s UVMHS.Init.‚àß (o UVMHS.Init.‚àß r')) m) => UVMHS.Core.Effects.MonadCont r' (UVMHS.Core.Monads.RWST r o s m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Monoid.Null s, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.RWST r o s m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append o, UVMHS.Core.Classes.Monoid.Append s, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.RWST r o s m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Monoid.Monoid s, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.RWST r o s m a)
instance UVMHS.Core.Classes.Monoid.Monoid o => UVMHS.Core.Classes.Functor.Functor2 (UVMHS.Core.Monads.RWST r o s)
instance UVMHS.Core.Monads.RWST r o s UVMHS.Core.Classes.Morphism.‚áÑ‚Åº (UVMHS.Core.Monads.ReaderT r UVMHS.Core.Transformers.‚ä° (UVMHS.Core.Monads.WriterT o UVMHS.Core.Transformers.‚ä° UVMHS.Core.Monads.StateT s))
instance forall k (r :: k) (m :: k -> *). UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.ContT r m)
instance forall k (r :: k) (m :: k -> *). UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.ContT r m)
instance forall k (r :: k) (m :: k -> *). UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.ContT r m)
instance forall k (r :: k) (m :: k -> *). UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.ContT r m)
instance UVMHS.Core.Classes.Functor.Functor2Iso (UVMHS.Core.Monads.ContT r)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.ContT r m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null r) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ContT r m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append r) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ContT r m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Monoid r) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.ContT r m a)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.ContT r)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.ContT r)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Effects.MonadWriter o m) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.ContT (o UVMHS.Init.‚àß r) m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadState s m) => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.ContT (s UVMHS.Init.‚àß r) m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadFail m) => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.ContT (UVMHS.Init.ùëÇ r) m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadError e m) => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.ContT (e UVMHS.Init.‚à® r) m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadNondet m) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.ContT r m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadTop m) => UVMHS.Core.Effects.MonadTop (UVMHS.Core.Monads.ContT r m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.NondetT m)
instance (UVMHS.Core.Classes.Monad.Bind m, forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a')) => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.NondetT m)
instance (UVMHS.Core.Classes.Monad.Monad m, forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a')) => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.NondetT m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a')) => UVMHS.Core.Effects.MonadNondet (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Effects.LiftIO UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftReader UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftWriter UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftState UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftFail UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftError UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftNondet UVMHS.Core.Monads.NondetT
instance UVMHS.Core.Effects.LiftTop UVMHS.Core.Monads.NondetT
instance (UVMHS.Core.Classes.Monad.Monad m, forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Effects.MonadCont (UVMHS.Init.ùëÑ r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.NondetT m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Functor.Functor2 (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Effects.MonadError e (UVMHS.Core.Monads.ErrorT e m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ErrorT e m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append e, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ErrorT e m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Append e, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.ErrorT e m a)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.ErrorT e)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.ErrorT e)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont (e UVMHS.Init.‚à® r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.ErrorT e m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Functor.Functor2 UVMHS.Core.Monads.FailT
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Effects.MonadFail (UVMHS.Core.Monads.FailT m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.FailT m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.FailT m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.FailT m a)
instance UVMHS.Core.Effects.LiftIO UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftReader UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftWriter UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftState UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftFail UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftError UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftNondet UVMHS.Core.Monads.FailT
instance UVMHS.Core.Effects.LiftTop UVMHS.Core.Monads.FailT
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont (UVMHS.Init.ùëÇ r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.FailT m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Monad.Bind m => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Functor.Functor2 (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Effects.MonadState s (UVMHS.Core.Monads.StateT s m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null s, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.StateT s m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append s, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.StateT s m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Monoid s, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.StateT s m a)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.StateT s)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.StateT s)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont (s UVMHS.Init.‚àß r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.StateT s m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Monad.Return m, UVMHS.Core.Classes.Monoid.Null o) => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Append o) => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.WriterT o m)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Monoid o) => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Classes.Monoid.Monoid o => UVMHS.Core.Classes.Functor.Functor2 (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Classes.Monoid.Null o) => UVMHS.Core.Effects.MonadWriter o (UVMHS.Core.Monads.WriterT o m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null o, UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.WriterT o m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append o, UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.WriterT o m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), forall a'. UVMHS.Core.Classes.Monoid.Monoid a' => UVMHS.Core.Classes.Monoid.Monoid (m a'), UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Monoid.Monoid a) => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Core.Monads.WriterT o m a)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Classes.Monoid.Null o => UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.WriterT o)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.WriterT o)
instance (UVMHS.Core.Classes.Monoid.Monoid o, UVMHS.Core.Classes.Monad.Monad m, UVMHS.Core.Effects.MonadCont (o UVMHS.Init.‚àß r) m) => UVMHS.Core.Effects.MonadCont r (UVMHS.Core.Monads.WriterT o m)
instance UVMHS.Core.Classes.Functor.Functor m => UVMHS.Core.Classes.Functor.Functor (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Monad.Return m => UVMHS.Core.Classes.Monad.Return (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Monad.Bind m => UVMHS.Core.Classes.Monad.Bind (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Classes.Monad.Monad (UVMHS.Core.Monads.ReaderT r m)
instance UVMHS.Core.Classes.Functor.Functor2 (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Classes.Monad.Monad m => UVMHS.Core.Effects.MonadReader r (UVMHS.Core.Monads.ReaderT r m)
instance (forall a'. UVMHS.Core.Classes.Monoid.Null a' => UVMHS.Core.Classes.Monoid.Null (m a'), UVMHS.Core.Classes.Monoid.Null a) => UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Monads.ReaderT r m a)
instance (forall a'. UVMHS.Core.Classes.Monoid.Append a' => UVMHS.Core.Classes.Monoid.Append (m a'), UVMHS.Core.Classes.Monoid.Append a) => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Monads.ReaderT r m a)
instance UVMHS.Core.Effects.LiftIO (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftReader (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftWriter (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftState (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftFail (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftError (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftNondet (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftTop (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Effects.LiftCont (UVMHS.Core.Monads.ReaderT r)
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Monad.Return UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Comonad.Extract UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Comonad.Cobind UVMHS.Core.Monads.ID
instance UVMHS.Core.Classes.Comonad.Comonad UVMHS.Core.Monads.ID
instance UVMHS.Core.Effects.MonadIO GHC.Types.IO
instance UVMHS.Core.Classes.Functor.Functor GHC.Types.IO
instance UVMHS.Core.Classes.Monad.Return GHC.Types.IO
instance UVMHS.Core.Classes.Monad.Bind GHC.Types.IO
instance UVMHS.Core.Classes.Monad.Monad GHC.Types.IO

module UVMHS.Core.Vector
skipChunk :: Monad m => m ‚Ñï8 -> ‚Ñï64 -> m ()
emptyChunk :: ‚Ñï64 -> ùêº ‚Ñï8
joinBytes :: (‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8) -> ‚Ñï64
splitBytes :: ‚Ñï64 -> (‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8, ‚Ñï8)
class Chunky a
chunkSize :: Chunky a => P a -> ‚Ñï64
fromChunk :: forall m. (Chunky a, Monad m) => m ‚Ñï8 -> m a
toChunk :: Chunky a => a -> ùêº ‚Ñï8
chunkIOBytes :: UArray ‚Ñï64 ‚Ñï8 -> State ‚Ñï64 ‚Ñï8
newtype ùïç a
ùïç :: UArray ‚Ñï64 ‚Ñï8 -> ùïç a
idx·ê™ùïç :: forall a. Chunky a => ùïç a -> ‚Ñï64
rawIdxùïç :: Chunky a => P a -> ‚Ñï64 -> ‚Ñï64
idxùïç :: forall a. Chunky a => ùïç a -> ‚Ñï64 -> a
idxùïçùëÇ :: Chunky a => ùïç a -> ‚Ñï64 -> ùëÇ a
vec :: forall t a. (ToIter a t, Chunky a) => t -> ùïç a
streamùïç :: forall a. Chunky a => ùïç a -> ùëÜ a
showWithùïç :: Chunky a => (a -> ùïä) -> ùïç a -> ùïä
streamBytesùïç :: ùïç a -> ùëÜ ‚Ñï8
corelib_vector_e1 :: ùïç (‚Ñï64 ‚à® (‚Ñï64 ‚àß ‚Ñï64))
corelib_vector_e2 :: ùïç ‚ÑÇ
corelib_vector_e3 :: ùïç ùîπ
instance UVMHS.Core.Vector.Chunky a => UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Vector.Chunky a => UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Core.Vector.ùïç a)
instance (UVMHS.Core.Vector.Chunky a, GHC.Show.Show a) => GHC.Show.Show (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Vector.Chunky a => UVMHS.Core.Classes.Collections.Lookup UVMHS.Init.‚Ñï64 a (UVMHS.Core.Vector.ùïç a)
instance forall k (a :: k). UVMHS.Core.Classes.Monoid.Null (UVMHS.Core.Vector.ùïç a)
instance UVMHS.Core.Vector.Chunky a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Core.Vector.ùïç a)
instance forall k (a :: k). GHC.Classes.Eq (UVMHS.Core.Vector.ùïç a)
instance forall k (a :: k). GHC.Classes.Ord (UVMHS.Core.Vector.ùïç a)
instance (UVMHS.Core.Vector.Chunky b, a UVMHS.Core.Classes.Morphism.‚áÑ b) => UVMHS.Core.Vector.Chunky a
instance UVMHS.Core.Vector.Chunky ()
instance UVMHS.Core.Vector.Chunky UVMHS.Init.‚Ñï8
instance UVMHS.Core.Vector.Chunky UVMHS.Init.ùîπ
instance UVMHS.Core.Vector.Chunky UVMHS.Init.‚ÑÇ
instance UVMHS.Core.Vector.Chunky UVMHS.Init.‚Ñï64
instance UVMHS.Core.Vector.Chunky UVMHS.Init.‚Ñ§64
instance UVMHS.Core.Vector.Chunky UVMHS.Init.ùîª
instance (UVMHS.Core.Vector.Chunky a, UVMHS.Core.Vector.Chunky b) => UVMHS.Core.Vector.Chunky (a UVMHS.Init.‚àß b)
instance (UVMHS.Core.Vector.Chunky a, UVMHS.Core.Vector.Chunky b) => UVMHS.Core.Vector.Chunky (a UVMHS.Init.‚à® b)

module UVMHS.Core.IO
writeOut :: ùïä -> IO ()
out :: ùïä -> IO ()
outs :: ToIter ùïä t => t -> IO ()
shout :: Show a => a -> IO ()
flushOut :: IO ()
writeErr :: ùïä -> IO ()
err :: ùïä -> IO ()
flushErr :: IO ()
abortIO :: IO a
failIO :: ùïä -> IO a
stdin :: IO ùïä
args :: IO (ùêº ùïä)
read :: ùïä -> IO ùïä
write :: ùïä -> ùïä -> IO ()
trace :: ùïä -> a -> a
traceM :: Monad m => ùïä -> m ()
optionIO :: ùëÇ a -> IO a
shell :: ùïä -> IO ((ùîπ ‚àß ùïä) ‚àß ùïä)
shellOK :: ùïä -> IO ùïä
shelll :: ùïä -> IO ((ùîπ ‚àß ùïä) ‚àß ùïä)
shelllOK :: ùïä -> IO ùïä
ioUNSAFE :: IO a -> a

module UVMHS.Core.LensDeriving
makeLensLogic :: Cxt -> Name -> ùêø TyVarBndr -> Name -> Type -> Q (ùêø Dec)
makeLenses :: Name -> Q [Dec]
makePrismLogic :: Cxt -> Name -> ùêø TyVarBndr -> Name -> ùêø Type -> ‚Ñï -> Q (ùêø Dec)
makePrisms :: Name -> Q [Dec]

module UVMHS.Core

module UVMHS.Lib.Pretty.Color
data Color3Bit
Black :: Color3Bit
Red :: Color3Bit
Green :: Color3Bit
Yellow :: Color3Bit
Blue :: Color3Bit
Magenta :: Color3Bit
Cyan :: Color3Bit
White :: Color3Bit
data Color
Color :: Color3Bit -> Color
Color8 :: ‚Ñï8 -> Color
Color24 :: ‚Ñï8 -> ‚Ñï8 -> ‚Ñï8 -> Color
black :: Color
darkRed :: Color
darkGreen :: Color
darkYellow :: Color
darkBlue :: Color
darkPink :: Color
darkTeal :: Color
gray :: Color
darkGray :: Color
red :: Color
green :: Color
yellow :: Color
blue :: Color
pink :: Color
teal :: Color
lightGray :: Color
white :: Color
highlight :: Color
data Format
FG :: Color -> Format
NOFG :: Format
BG :: Color -> Format
NOBG :: Format
UL :: Format
NOUL :: Format
BD :: Format
NOBD :: Format
IT :: Format
NOIT :: Format
data Formats
Formats :: ùëÇ (ùëÇ Color) -> ùëÇ (ùëÇ Color) -> ùëÇ ùîπ -> ùëÇ ùîπ -> ùëÇ ùîπ -> Formats
[fgFormats] :: Formats -> ùëÇ (ùëÇ Color)
[bgFormats] :: Formats -> ùëÇ (ùëÇ Color)
[ulFormats] :: Formats -> ùëÇ ùîπ
[bdFormats] :: Formats -> ùëÇ ùîπ
[itFormats] :: Formats -> ùëÇ ùîπ
formats :: Format -> Formats
override :: ùêø Format
instance GHC.Show.Show UVMHS.Lib.Pretty.Color.Formats
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Color.Formats
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Color.Formats
instance GHC.Show.Show UVMHS.Lib.Pretty.Color.Format
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Color.Format
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Color.Format
instance GHC.Show.Show UVMHS.Lib.Pretty.Color.Color
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Color.Color
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Color.Color
instance GHC.Show.Show UVMHS.Lib.Pretty.Color.Color3Bit
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Color.Color3Bit
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Color.Color3Bit
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Color.Formats
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Color.Formats
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Color.Formats

module UVMHS.Lib.Pretty.Core
data Layout
Flat :: Layout
Break :: Layout
data FailMode
CanFail :: FailMode
CannotFail :: FailMode
data PrettyParams
PrettyParams :: ùêø Format -> ùêø Format -> ùêø Format -> ùêø Format -> ùêø Format -> ùêø Format -> ùêø Format -> ùêø Format -> ùêø Format -> ùêø Format -> ùêø Format -> ‚Ñï -> PrettyParams
[punctuationFormat] :: PrettyParams -> ùêø Format
[keywordPunctuationFormat] :: PrettyParams -> ùêø Format
[keywordFormat] :: PrettyParams -> ùêø Format
[constructorFormat] :: PrettyParams -> ùêø Format
[operatorFormat] :: PrettyParams -> ùêø Format
[binderFormat] :: PrettyParams -> ùêø Format
[literalFormat] :: PrettyParams -> ùêø Format
[highlightFormat] :: PrettyParams -> ùêø Format
[headerFormat] :: PrettyParams -> ùêø Format
[errorFormat] :: PrettyParams -> ùêø Format
[lineNumberFormat] :: PrettyParams -> ùêø Format
[appLevel] :: PrettyParams -> ‚Ñï
appLevelL :: (‚ü¢) PrettyParams ‚Ñï
lineNumberFormatL :: (‚ü¢) PrettyParams (ùêø Format)
errorFormatL :: (‚ü¢) PrettyParams (ùêø Format)
headerFormatL :: (‚ü¢) PrettyParams (ùêø Format)
highlightFormatL :: (‚ü¢) PrettyParams (ùêø Format)
literalFormatL :: (‚ü¢) PrettyParams (ùêø Format)
binderFormatL :: (‚ü¢) PrettyParams (ùêø Format)
operatorFormatL :: (‚ü¢) PrettyParams (ùêø Format)
constructorFormatL :: (‚ü¢) PrettyParams (ùêø Format)
keywordFormatL :: (‚ü¢) PrettyParams (ùêø Format)
keywordPunctuationFormatL :: (‚ü¢) PrettyParams (ùêø Format)
punctuationFormatL :: (‚ü¢) PrettyParams (ùêø Format)
prettyParams‚ÇÄ :: PrettyParams
data PrettyEnv
PrettyEnv :: PrettyParams -> ‚Ñï -> ‚Ñï -> ùîπ -> ùîπ -> ùëÇ (‚Ñï ‚àß ‚Ñï) -> Layout -> FailMode -> ‚Ñï -> ‚Ñï -> ùîπ -> PrettyEnv
[prettyParams] :: PrettyEnv -> PrettyParams
[maxColumnWidth] :: PrettyEnv -> ‚Ñï
[maxRibbonWidth] :: PrettyEnv -> ‚Ñï
[doFormat] :: PrettyEnv -> ùîπ
[doLineNumbers] :: PrettyEnv -> ùîπ
[blinders] :: PrettyEnv -> ùëÇ (‚Ñï ‚àß ‚Ñï)
[layout] :: PrettyEnv -> Layout
[failMode] :: PrettyEnv -> FailMode
[nesting] :: PrettyEnv -> ‚Ñï
[level] :: PrettyEnv -> ‚Ñï
[bumped] :: PrettyEnv -> ùîπ
bumpedL :: (‚ü¢) PrettyEnv ùîπ
levelL :: (‚ü¢) PrettyEnv ‚Ñï
nestingL :: (‚ü¢) PrettyEnv ‚Ñï
failModeL :: (‚ü¢) PrettyEnv FailMode
layoutL :: (‚ü¢) PrettyEnv Layout
blindersL :: (‚ü¢) PrettyEnv (ùëÇ ((‚àß) ‚Ñï ‚Ñï))
doLineNumbersL :: (‚ü¢) PrettyEnv ùîπ
doFormatL :: (‚ü¢) PrettyEnv ùîπ
maxRibbonWidthL :: (‚ü¢) PrettyEnv ‚Ñï
maxColumnWidthL :: (‚ü¢) PrettyEnv ‚Ñï
prettyParamsL :: (‚ü¢) PrettyEnv PrettyParams
prettyEnv‚ÇÄ :: PrettyEnv
data Chunk
LineNumber :: ‚Ñï -> Chunk
Text :: ùïä -> Chunk
Newline :: Chunk
data Annotation
FormatA :: ùêø Format -> Annotation
UndertagA :: ùëÇ (ùêø Format ‚àß ‚ÑÇ) -> Annotation
type Output = ùëÑ OutputElem
data OutputElem
RawChunk :: Chunk -> OutputElem
AnnotatedOutput :: Annotation -> Output -> OutputElem
data PrettyOut
PrettyOut :: Output -> ‚Ñï -> PrettyOut
[output] :: PrettyOut -> Output
[maxDisplayLineNumber] :: PrettyOut -> ‚Ñï
maxDisplayLineNumberL :: (‚ü¢) PrettyOut ‚Ñï
outputL :: (‚ü¢) PrettyOut Output
data PrettyState
PrettyState :: ‚Ñï -> ‚Ñï -> ‚Ñï -> ùîπ -> ‚Ñï -> PrettyState
[column] :: PrettyState -> ‚Ñï
[ribbon] :: PrettyState -> ‚Ñï
[lineNumber] :: PrettyState -> ‚Ñï
[beginning] :: PrettyState -> ùîπ
[displayLineNumber] :: PrettyState -> ‚Ñï
displayLineNumberL :: (‚ü¢) PrettyState ‚Ñï
beginningL :: (‚ü¢) PrettyState ùîπ
lineNumberL :: (‚ü¢) PrettyState ‚Ñï
ribbonL :: (‚ü¢) PrettyState ‚Ñï
columnL :: (‚ü¢) PrettyState ‚Ñï
prettyState‚ÇÄ :: PrettyState
newtype PrettyM a
PrettyM :: RWST PrettyEnv PrettyOut PrettyState ùëÇ a -> PrettyM a
[unPrettyM] :: PrettyM a -> RWST PrettyEnv PrettyOut PrettyState ùëÇ a
runPrettyM :: PrettyEnv -> PrettyState -> PrettyM a -> ùëÇ ((PrettyState ‚àß PrettyOut) ‚àß a)
evalPrettyM :: PrettyEnv -> PrettyState -> PrettyM a -> ùëÇ a
execPrettyM :: PrettyM () -> PrettyOut
shouldOutput :: PrettyM ùîπ
shouldOutputNewline :: PrettyM ùîπ
spit :: ùïä -> PrettyM ()
annotateOutput :: Annotation -> Output -> PrettyM Output
doLineNumber :: ùîπ -> PrettyM ()
doNesting :: ùîπ -> PrettyM ()
word :: ùïä -> PrettyM ()
newline :: PrettyM ()
newtype Doc
Doc :: PrettyM () -> Doc
[runDoc] :: Doc -> PrettyM ()
execDoc :: Doc -> PrettyOut
onDoc :: (PrettyM () -> PrettyM ()) -> Doc -> Doc
ppSpace :: ‚Ñï -> Doc
ppNewline :: Doc
ppText :: ùïä -> Doc
ppAnnotate :: Annotation -> Doc -> Doc
ppFormat :: ùêø Format -> Doc -> Doc
ppNoFormat :: Doc -> Doc
ppUndertagFormat :: ùêø Format -> ‚ÑÇ -> Doc -> Doc
ppIfFlat :: Doc -> Doc -> Doc
ppTryFlat :: Doc -> Doc
ppFlat :: Doc -> Doc
ppBreak :: Doc -> Doc
ppGroup :: Doc -> Doc
ppNest :: ‚Ñï -> Doc -> Doc
ppAlign :: Doc -> Doc
ppLength :: Doc -> ‚Ñï
ppFormatParam :: (PrettyParams ‚ü¢ ùêø Format) -> ùïä -> Doc
ppBlinders :: ‚Ñï -> ‚Ñï -> Doc -> Doc
ppLineNumbers :: Doc -> Doc
ppSetLineNumber :: ‚Ñï -> Doc -> Doc
ppFG :: Color -> Doc -> Doc
ppBG :: Color -> Doc -> Doc
ppUL :: Doc -> Doc
ppBD :: Doc -> Doc
ppPun :: ùïä -> Doc
ppKeyPun :: ùïä -> Doc
ppKey :: ùïä -> Doc
ppCon :: ùïä -> Doc
ppOp :: ùïä -> Doc
ppBdr :: ùïä -> Doc
ppLit :: ùïä -> Doc
ppHl :: ùïä -> Doc
ppHeader :: ùïä -> Doc
ppErr :: ùïä -> Doc
ppUT :: ‚ÑÇ -> Color -> Doc -> Doc
ppAlignLeft :: ‚Ñï -> Doc -> Doc
ppAlignRight :: ‚Ñï -> Doc -> Doc
ppBotLevel :: Doc -> Doc
ppClosed :: Doc -> Doc -> Doc -> Doc
ppParens :: Doc -> Doc
ppAtLevel :: ‚Ñï -> Doc -> Doc
ppBump :: Doc -> Doc
ppInf :: ‚Ñï -> Doc -> Doc -> Doc -> Doc
ppInfl :: ‚Ñï -> Doc -> Doc -> Doc -> Doc
ppInfr :: ‚Ñï -> Doc -> Doc -> Doc -> Doc
ppPre :: ‚Ñï -> Doc -> Doc -> Doc
ppPost :: ‚Ñï -> Doc -> Doc -> Doc
ppApp :: Doc -> ùêø Doc -> Doc
ppHorizontal :: ùêø Doc -> Doc
ppVertical :: ùêø Doc -> Doc
ppSoftline :: Doc
ppSeparated :: ùêø Doc -> Doc
ppCollection :: ùïä -> ùïä -> ùïä -> ùêø Doc -> Doc
ppRecord :: ùïä -> ùêø (Doc ‚àß Doc) -> Doc
instance UVMHS.Core.Effects.MonadFail UVMHS.Lib.Pretty.Core.PrettyM
instance UVMHS.Core.Effects.MonadState UVMHS.Lib.Pretty.Core.PrettyState UVMHS.Lib.Pretty.Core.PrettyM
instance UVMHS.Core.Effects.MonadWriter UVMHS.Lib.Pretty.Core.PrettyOut UVMHS.Lib.Pretty.Core.PrettyM
instance UVMHS.Core.Effects.MonadReader UVMHS.Lib.Pretty.Core.PrettyEnv UVMHS.Lib.Pretty.Core.PrettyM
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Lib.Pretty.Core.PrettyM
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Lib.Pretty.Core.PrettyM
instance UVMHS.Core.Classes.Monad.Return UVMHS.Lib.Pretty.Core.PrettyM
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Lib.Pretty.Core.PrettyM
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Core.Doc
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Core.Doc
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Core.Doc
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.PrettyState
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.PrettyState
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.PrettyState
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Core.PrettyOut
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Core.PrettyOut
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Core.PrettyOut
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.PrettyOut
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.PrettyOut
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.PrettyOut
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.OutputElem
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.OutputElem
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.OutputElem
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.Annotation
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.Annotation
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.Annotation
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.Chunk
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.Chunk
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.Chunk
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.PrettyEnv
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.PrettyEnv
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.PrettyEnv
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.PrettyParams
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.PrettyParams
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.PrettyParams
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.FailMode
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.FailMode
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.FailMode
instance GHC.Show.Show UVMHS.Lib.Pretty.Core.Layout
instance GHC.Classes.Ord UVMHS.Lib.Pretty.Core.Layout
instance GHC.Classes.Eq UVMHS.Lib.Pretty.Core.Layout

module UVMHS.Lib.Pretty.Console
data ConsoleEnv
ConsoleEnv :: ùëÇ (Formats ‚àß ‚ÑÇ) -> ‚Ñï -> ConsoleEnv
[œÅUnderFormat] :: ConsoleEnv -> ùëÇ (Formats ‚àß ‚ÑÇ)
[œÅLineNumberWidth] :: ConsoleEnv -> ‚Ñï
œÅLineNumberWidthL :: (‚ü¢) ConsoleEnv ‚Ñï
œÅUnderFormatL :: (‚ü¢) ConsoleEnv (ùëÇ ((‚àß) Formats ‚ÑÇ))
consoleEnv‚ÇÄ :: ConsoleEnv
data ConsoleOut
NullCO :: ConsoleOut
ChunkCO :: ùïä -> ConsoleOut
AppendCO :: ConsoleOut -> ConsoleOut -> ConsoleOut
FormatCO :: Formats -> ConsoleOut -> ConsoleOut
data ConsoleState
ConsoleState :: ‚Ñï -> ùêø (((‚Ñï ‚àß ‚Ñï) ‚àß Formats) ‚àß ‚ÑÇ) -> ConsoleState
[œÉCol] :: ConsoleState -> ‚Ñï
[œÉUnders] :: ConsoleState -> ùêø (((‚Ñï ‚àß ‚Ñï) ‚àß Formats) ‚àß ‚ÑÇ)
œÉUndersL :: (‚ü¢) ConsoleState (ùêø ((‚àß) ((‚àß) ((‚àß) ‚Ñï ‚Ñï) Formats) ‚ÑÇ))
œÉColL :: (‚ü¢) ConsoleState ‚Ñï
consoleState‚ÇÄ :: ConsoleState
newtype ConsoleM a
ConsoleM :: RWS ConsoleEnv ConsoleOut ConsoleState a -> ConsoleM a
[runConsoleM] :: ConsoleM a -> RWS ConsoleEnv ConsoleOut ConsoleState a
evalConsoleM :: ConsoleEnv -> ConsoleState -> ConsoleM a -> a
spitConsole :: ùïä -> ConsoleM ()
spitNLConsole :: ConsoleM ()
interpChunk :: Chunk -> ConsoleM ()
doUnders :: ConsoleM ()
finalize :: ConsoleM a -> ConsoleM a
interpAnnotation :: Annotation -> ConsoleM () -> ConsoleM ()
interpOutputElem :: OutputElem -> ConsoleM ()
interpOutput :: Output -> ConsoleM ()
execPrettyOut :: PrettyOut -> ConsoleOut
instance UVMHS.Core.Effects.MonadState UVMHS.Lib.Pretty.Console.ConsoleState UVMHS.Lib.Pretty.Console.ConsoleM
instance UVMHS.Core.Effects.MonadWriter UVMHS.Lib.Pretty.Console.ConsoleOut UVMHS.Lib.Pretty.Console.ConsoleM
instance UVMHS.Core.Effects.MonadReader UVMHS.Lib.Pretty.Console.ConsoleEnv UVMHS.Lib.Pretty.Console.ConsoleM
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Lib.Pretty.Console.ConsoleM
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Lib.Pretty.Console.ConsoleM
instance UVMHS.Core.Classes.Monad.Return UVMHS.Lib.Pretty.Console.ConsoleM
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Lib.Pretty.Console.ConsoleM
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Pretty.Console.ConsoleOut
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Pretty.Console.ConsoleOut
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Pretty.Console.ConsoleOut

module UVMHS.Lib.Pretty.NF
data NFEnv
NFEnv :: Formats -> ùëÇ (‚ÑÇ ‚àß Formats) -> NFEnv
[nfformats] :: NFEnv -> Formats
[nfundertagFormats] :: NFEnv -> ùëÇ (‚ÑÇ ‚àß Formats)
nfundertagFormatsL :: (‚ü¢) NFEnv (ùëÇ ((‚àß) ‚ÑÇ Formats))
nfformatsL :: (‚ü¢) NFEnv Formats
data OutputElemNF
LineNumberNF :: Formats -> ‚Ñï -> OutputElemNF
CharNF :: Formats -> ùëÇ (‚ÑÇ ‚àß Formats) -> ‚ÑÇ -> OutputElemNF
NewlineNF :: OutputElemNF
chunkNF :: Chunk -> ReaderT NFEnv ùëÑ OutputElemNF
annotatedOutputNF :: Annotation -> Output -> ReaderT NFEnv ùëÑ OutputElemNF
outputNF :: Output -> ReaderT NFEnv ùëÑ OutputElemNF
prettyNFOutput :: Output -> ùëÑ OutputElemNF
prettyNFDoc :: Doc -> ùëÑ OutputElemNF
instance GHC.Show.Show UVMHS.Lib.Pretty.NF.OutputElemNF
instance GHC.Classes.Ord UVMHS.Lib.Pretty.NF.OutputElemNF
instance GHC.Classes.Eq UVMHS.Lib.Pretty.NF.OutputElemNF

module UVMHS.Lib.Pretty.NoFormat
noFormatChunk :: Chunk -> ùïä
noFormatOutputElem :: OutputElem -> ùïä
noFormatOutput :: Output -> ùïä

module UVMHS.Lib.Pretty.Class
class Pretty a
pretty :: Pretty a => a -> Doc
ppshow :: Pretty a => a -> ùïä
escape :: ‚ÑÇ -> ùêº ‚ÑÇ
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Pretty.Core.Doc
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.ùîπ
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñï
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñï64
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñï32
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñï16
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñï8
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñ§
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñ§64
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñ§32
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñ§16
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñ§8
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.ùîª
instance UVMHS.Lib.Pretty.Class.Pretty ()
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚ÑÇ
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.ùïä
instance (UVMHS.Lib.Pretty.Class.Pretty a, UVMHS.Lib.Pretty.Class.Pretty b) => UVMHS.Lib.Pretty.Class.Pretty (a, b)
instance (UVMHS.Lib.Pretty.Class.Pretty a, UVMHS.Lib.Pretty.Class.Pretty b) => UVMHS.Lib.Pretty.Class.Pretty (a UVMHS.Init.‚àß b)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùëÜ a)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùêº a)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùêø a)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty [a]
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùëÑ a)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùëÉ a)
instance (UVMHS.Lib.Pretty.Class.Pretty k, UVMHS.Lib.Pretty.Class.Pretty v) => UVMHS.Lib.Pretty.Class.Pretty (k UVMHS.Init.‚á∞ v)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Core.Pointed.AddNull a)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Core.Pointed.AddBot a)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Core.Pointed.AddTop a)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Core.Pointed.AddBT a)

module UVMHS.Lib.Pretty.Examples
testPrettyFormats :: Doc
testPrettyNesting :: Doc
testPrettyUndertags :: Doc
testPrettyLineNumbers :: Doc
testPrettyBlinders :: Doc
testGrouping :: Doc

module UVMHS.Lib.Pretty.Deriving
makePrettySumLogic :: Cxt -> Name -> ùêø TyVarBndr -> ùêø (Name ‚àß ùêø Type) -> Q (ùêø Dec)
makePrettySum :: Name -> Q [Dec]
makePrettyUnionLogic :: Cxt -> Name -> ùêø TyVarBndr -> ùêø (Name ‚àß ùêø Type) -> Q (ùêø Dec)
makePrettyUnion :: Name -> Q [Dec]
makePrettyRecordLogic :: Cxt -> Name -> ùêø TyVarBndr -> Name -> ùêø (Name ‚àß Type) -> Q (ùêø Dec)
makePrettyRecord :: Name -> Q [Dec]

module UVMHS.Lib.Pretty.DerivedInstances
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Core.Monads.ID a)
instance (UVMHS.Lib.Pretty.Class.Pretty a, UVMHS.Lib.Pretty.Class.Pretty b) => UVMHS.Lib.Pretty.Class.Pretty (a UVMHS.Init.‚à® b)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùëÇ a)

module UVMHS.Lib.Pretty.ConsoleHTML
htmlColor :: ùëÇ Color -> ùïä
htmlFGCode :: ùëÇ Color -> ùëÑ ùïä -> ùëÑ ùïä
htmlBGCode :: ùëÇ Color -> ùëÑ ùïä -> ùëÑ ùïä
htmlULCode :: ùîπ -> ùëÑ ùïä -> ùëÑ ùïä
htmlBDCode :: ùîπ -> ùëÑ ùïä -> ùëÑ ùïä
htmlITCode :: ùîπ -> ùëÑ ùïä -> ùëÑ ùïä
consoleFormatHTML :: Formats -> ùëÑ ùïä -> ùëÑ ùïä
htmlEscapeChar :: ‚ÑÇ -> ùïä
htmlEscape :: ùïä -> ùëÑ ùïä
renderConsoleOutHTML :: ConsoleOut -> ùëÑ ùïä ‚àß ()
execConsoleOutHTML :: ConsoleOut -> ùëÑ ùïä
prenderHTMLWith :: Pretty a => (Doc -> Doc) -> a -> ùëÑ ùïä
prenderHTMLWidth :: Pretty a => ‚Ñï -> a -> ùëÑ ùïä
prenderHTML :: Pretty a => a -> ùëÑ ùïä
pprintHTML :: Pretty a => a -> IO ()
prenderHTMLStandalone :: Pretty a => a -> ùëÑ ùïä
pprintHTMLStandalone :: Pretty a => a -> IO ()
htmlColorFrom256 :: ‚Ñï8 ‚á∞ ùïä

module UVMHS.Lib.Pretty.ConsoleANSI
newtype ConsoleANSIM a
ConsoleANSIM :: RWS Formats (ùëÑ ùïä) () a -> ConsoleANSIM a
[runConsoleANSIM] :: ConsoleANSIM a -> RWS Formats (ùëÑ ùïä) () a
evalConsoleANSIM :: ConsoleANSIM a -> a
sgrLeader :: ùïä
sgrCloser :: ùïä
sgrReset :: ùïä
sgrFg :: ùëÇ Color -> ùïä
sgrBg :: ùëÇ Color -> ùïä
sgrUl :: ùîπ -> ùïä
sgrBd :: ùîπ -> ùïä
sgrIt :: ùîπ -> ùïä
sgrFormat :: Formats -> ùëÑ ùïä
tellSgrFormat :: ConsoleANSIM ()
localFormat :: Formats -> ConsoleANSIM () -> ConsoleANSIM ()
interpConsoleOutANSI :: ConsoleOut -> ConsoleANSIM ()
execConsoleOutANSI :: ConsoleOut -> ùïä
pprenderWith :: Pretty a => (Doc -> Doc) -> a -> ùïä
pprenderWidth :: Pretty a => ‚Ñï -> a -> ùïä
pprender :: Pretty a => a -> ùïä
pprint :: Pretty a => a -> IO ()
pptrace :: Pretty a => a -> b -> b
pptraceM :: (Monad m, Pretty a) => a -> m ()
ioError :: Pretty e => (e ‚à® a) -> IO a
instance UVMHS.Core.Effects.MonadState () UVMHS.Lib.Pretty.ConsoleANSI.ConsoleANSIM
instance UVMHS.Core.Effects.MonadWriter (UVMHS.Init.ùëÑ UVMHS.Init.ùïä) UVMHS.Lib.Pretty.ConsoleANSI.ConsoleANSIM
instance UVMHS.Core.Effects.MonadReader UVMHS.Lib.Pretty.Color.Formats UVMHS.Lib.Pretty.ConsoleANSI.ConsoleANSIM
instance UVMHS.Core.Classes.Monad.Monad UVMHS.Lib.Pretty.ConsoleANSI.ConsoleANSIM
instance UVMHS.Core.Classes.Monad.Bind UVMHS.Lib.Pretty.ConsoleANSI.ConsoleANSIM
instance UVMHS.Core.Classes.Monad.Return UVMHS.Lib.Pretty.ConsoleANSI.ConsoleANSIM
instance UVMHS.Core.Classes.Functor.Functor UVMHS.Lib.Pretty.ConsoleANSI.ConsoleANSIM

module UVMHS.Lib.Pretty

module UVMHS.Lib.Parser.Sep
data SepL i a
SepL :: a -> ùëÑ (i ‚àß a) -> SepL i a
[sepLHead] :: SepL i a -> a
[sepLTail] :: SepL i a -> ùëÑ (i ‚àß a)
mapSepL :: (i‚ÇÅ -> i‚ÇÇ) -> (a‚ÇÅ -> a‚ÇÇ) -> SepL i‚ÇÅ a‚ÇÅ -> SepL i‚ÇÇ a‚ÇÇ
eSepL :: a -> SepL i a
iSepL :: Null a => i -> SepL i a
firstNSepL :: ‚Ñï -> SepL i a -> SepL i a
data SepR i a
SepR :: ùëÑ (a ‚àß i) -> a -> SepR i a
[sepRHead] :: SepR i a -> ùëÑ (a ‚àß i)
[sepRTail] :: SepR i a -> a
mapSepR :: (i‚ÇÅ -> i‚ÇÇ) -> (a‚ÇÅ -> a‚ÇÇ) -> SepR i‚ÇÅ a‚ÇÅ -> SepR i‚ÇÇ a‚ÇÇ
eSepR :: a -> SepR i a
iSepR :: Null a => i -> SepR i a
lastNSepR :: ‚Ñï -> SepR i a -> SepR i a
sepRL :: SepR i a -> SepL i a
sepLR :: SepL i a -> SepR i a
instance (GHC.Show.Show a, GHC.Show.Show i) => GHC.Show.Show (UVMHS.Lib.Parser.Sep.SepR i a)
instance (GHC.Classes.Ord a, GHC.Classes.Ord i) => GHC.Classes.Ord (UVMHS.Lib.Parser.Sep.SepR i a)
instance (GHC.Classes.Eq a, GHC.Classes.Eq i) => GHC.Classes.Eq (UVMHS.Lib.Parser.Sep.SepR i a)
instance (GHC.Show.Show a, GHC.Show.Show i) => GHC.Show.Show (UVMHS.Lib.Parser.Sep.SepL i a)
instance (GHC.Classes.Ord a, GHC.Classes.Ord i) => GHC.Classes.Ord (UVMHS.Lib.Parser.Sep.SepL i a)
instance (GHC.Classes.Eq a, GHC.Classes.Eq i) => GHC.Classes.Eq (UVMHS.Lib.Parser.Sep.SepL i a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Sep.SepR i a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Sep.SepR i a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Sep.SepR i a)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Lib.Parser.Sep.SepR a a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Lib.Parser.Sep.SepR a a)
instance UVMHS.Core.Classes.Functor.Functor (UVMHS.Lib.Parser.Sep.SepR i)
instance UVMHS.Lib.Pretty.Class.Pretty a => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Lib.Parser.Sep.SepR a a)
instance UVMHS.Core.Classes.Monoid.Null a => UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Sep.SepL i a)
instance UVMHS.Core.Classes.Monoid.Append a => UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Sep.SepL i a)
instance UVMHS.Core.Classes.Monoid.Monoid a => UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Sep.SepL i a)
instance UVMHS.Core.Classes.Collections.ToStream a (UVMHS.Lib.Parser.Sep.SepL a a)
instance UVMHS.Core.Classes.Collections.ToIter a (UVMHS.Lib.Parser.Sep.SepL a a)
instance UVMHS.Core.Classes.Functor.Functor (UVMHS.Lib.Parser.Sep.SepL i)

module UVMHS.Lib.Parser.Loc
data Loc
Loc :: ‚Ñï -> ‚Ñï -> ‚Ñï -> Loc
[locPos] :: Loc -> ‚Ñï
[locRow] :: Loc -> ‚Ñï
[locCol] :: Loc -> ‚Ñï
locColL :: (‚ü¢) Loc ‚Ñï
locRowL :: (‚ü¢) Loc ‚Ñï
locPosL :: (‚ü¢) Loc ‚Ñï
bumpRow :: Loc -> Loc
bumpCol :: Loc -> Loc
data LocRange
LocRange :: Loc -> Loc -> LocRange
[locRangeBegin] :: LocRange -> Loc
[locRangeEnd] :: LocRange -> Loc
locRangeEndL :: (‚ü¢) LocRange Loc
locRangeBeginL :: (‚ü¢) LocRange Loc
locRange‚ÇÄ :: LocRange
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.Loc.Loc => UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.Loc.LocRange
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.Parser.Loc.LocRange
instance GHC.Classes.Ord UVMHS.Lib.Parser.Loc.LocRange
instance GHC.Classes.Eq UVMHS.Lib.Parser.Loc.LocRange
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñï => UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.Loc.Loc
instance GHC.Classes.Eq UVMHS.Lib.Parser.Loc.Loc
instance GHC.Classes.Ord UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Lib.Parser.Loc.Loc
instance UVMHS.Core.Classes.Lattice.Meet UVMHS.Lib.Parser.Loc.Loc

module UVMHS.Lib.Parser.ParserContext
data ParserContextMode
ParserContextDisplay :: ParserContextMode
ParserContextError :: ParserContextMode
newtype ParserContextDoc
ParserContextDoc :: RWS ParserContextMode Doc () () -> ParserContextDoc
[runParserContextDoc] :: ParserContextDoc -> RWS ParserContextMode Doc () ()
onParserContextDoc :: (RWS ParserContextMode Doc () () -> RWS ParserContextMode Doc () ()) -> ParserContextDoc -> ParserContextDoc
execParserContextDoc :: ParserContextDoc -> Doc
parserContextError :: ParserContextDoc -> ParserContextDoc
data ParserContextDocCached
ParserContextDocCached :: ParserContextDoc -> ùëÑ OutputElemNF -> ParserContextDocCached
[parserContextDocCachedDoc] :: ParserContextDocCached -> ParserContextDoc
[parserContextDocCachedBytes] :: ParserContextDocCached -> ùëÑ OutputElemNF
mkParserContextDocCached :: ParserContextDoc -> ParserContextDocCached
onParserContextDocCached :: (RWS ParserContextMode Doc () () -> RWS ParserContextMode Doc () ()) -> ParserContextDocCached -> ParserContextDocCached
data ParserContextChunk
ParserContextChunk :: AddBot LocRange -> ‚Ñï -> ParserContextDocCached -> ParserContextChunk
[parserContextChunkLocRange] :: ParserContextChunk -> AddBot LocRange
[parserContextChunkNewlines] :: ParserContextChunk -> ‚Ñï
[parserContextChunkDoc] :: ParserContextChunk -> ParserContextDocCached
parserContextChunkDocL :: (‚ü¢) ParserContextChunk ParserContextDocCached
parserContextChunkNewlinesL :: (‚ü¢) ParserContextChunk ‚Ñï
parserContextChunkLocRangeL :: (‚ü¢) ParserContextChunk (AddBot LocRange)
type ContextLines = SepR ParserContextChunk ParserContextChunk
data ParserContext
ParserContext :: AddBot LocRange -> ‚Ñï -> ContextLines -> ParserContext
[parserContextLocRange] :: ParserContext -> AddBot LocRange
[parserContextNewlines] :: ParserContext -> ‚Ñï
[parserContextLines] :: ParserContext -> ContextLines
parserContextLinesL :: (‚ü¢) ParserContext ContextLines
parserContextNewlinesL :: (‚ü¢) ParserContext ‚Ñï
parserContextLocRangeL :: (‚ü¢) ParserContext (AddBot LocRange)
onParserContext :: (RWS ParserContextMode Doc () () -> RWS ParserContextMode Doc () ()) -> ParserContext -> ParserContext
execParserContext :: ParserContext -> ParserContextDoc
parserContextFromLines :: ContextLines -> ParserContext
truncateParserContext :: ‚Ñï -> ParserContext -> ParserContext
newtype InputContext
InputContext :: ParserContext -> InputContext
[unInputContext] :: InputContext -> ParserContext
newtype ExpressionContext
ExpressionContext :: ParserContext -> ExpressionContext
[unExpressionContext] :: ExpressionContext -> ParserContext
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext => UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ExpressionContext
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Parser.ParserContext.ExpressionContext
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Parser.ParserContext.ExpressionContext
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Parser.ParserContext.ExpressionContext
instance GHC.Classes.Ord UVMHS.Lib.Parser.ParserContext.ExpressionContext
instance GHC.Classes.Eq UVMHS.Lib.Parser.ParserContext.ExpressionContext
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext => UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.InputContext
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Parser.ParserContext.InputContext
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Parser.ParserContext.InputContext
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Parser.ParserContext.InputContext
instance GHC.Classes.Ord UVMHS.Lib.Parser.ParserContext.InputContext
instance GHC.Classes.Eq UVMHS.Lib.Parser.ParserContext.InputContext
instance (UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Core.Pointed.AddBot UVMHS.Lib.Parser.Loc.LocRange), UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñï, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ContextLines) => UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Parser.ParserContext.ParserContext
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Parser.ParserContext.ParserContext
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Parser.ParserContext.ParserContext
instance GHC.Classes.Ord UVMHS.Lib.Parser.ParserContext.ParserContext
instance GHC.Classes.Eq UVMHS.Lib.Parser.ParserContext.ParserContext
instance (UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Core.Pointed.AddBot UVMHS.Lib.Parser.Loc.LocRange), UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñï, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ParserContextDocCached) => UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ParserContextChunk
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Parser.ParserContext.ParserContextChunk
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Parser.ParserContext.ParserContextChunk
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Parser.ParserContext.ParserContextChunk
instance GHC.Classes.Ord UVMHS.Lib.Parser.ParserContext.ParserContextChunk
instance GHC.Classes.Eq UVMHS.Lib.Parser.ParserContext.ParserContextChunk
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Parser.ParserContext.ParserContextDoc
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Parser.ParserContext.ParserContextDoc
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Parser.ParserContext.ParserContextDoc
instance GHC.Classes.Ord UVMHS.Lib.Parser.ParserContext.ParserContextMode
instance GHC.Classes.Eq UVMHS.Lib.Parser.ParserContext.ParserContextMode
instance GHC.Classes.Eq UVMHS.Lib.Parser.ParserContext.ParserContextDocCached
instance GHC.Classes.Ord UVMHS.Lib.Parser.ParserContext.ParserContextDocCached
instance UVMHS.Core.Classes.Monoid.Null UVMHS.Lib.Parser.ParserContext.ParserContextDocCached
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Parser.ParserContext.ParserContextDocCached
instance UVMHS.Core.Classes.Monoid.Monoid UVMHS.Lib.Parser.ParserContext.ParserContextDocCached
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ParserContextDocCached
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ParserContextDoc

module UVMHS.Lib.Parser.ParserInput
data ParserToken t
ParserToken :: t -> ParserContext -> ParserToken t
[parserTokenValue] :: ParserToken t -> t
[parserTokenContext] :: ParserToken t -> ParserContext
parserTokenContextL :: forall (t_a2muM :: Type). (‚ü¢) (ParserToken t_a2muM) ParserContext
parserTokenValueL :: forall (t_a2muM :: Type). (‚ü¢) (ParserToken t_a2muM) t_a2muM
renderNL :: ParserContextDoc
renderEOF :: ParserContextDoc
renderEOFContext :: AddBot Loc -> ParserContext
tokens :: ùïä -> ùëÜ (ParserToken ‚ÑÇ)
renderParserInput :: ùëÜ (ParserToken t) -> ParserContextDoc
data ParserInput t
ParserInput :: ùëÜ (ParserToken t) -> AddBot Loc -> ParserInput t
[parserInputStream] :: ParserInput t -> ùëÜ (ParserToken t)
[parserInputEndPos] :: ParserInput t -> AddBot Loc
parserInputEndPosL :: forall (t_a2mwx :: Type). (‚ü¢) (ParserInput t_a2mwx) (AddBot Loc)
parserInputStreamL :: forall (t_a2mwx :: Type). (‚ü¢) (ParserInput t_a2mwx) (ùëÜ (ParserToken t_a2mwx))
parserInput‚ÇÄ :: ùëÜ (ParserToken t) -> ParserInput t
advanceInput :: ParserInput t -> ùëÇ (ParserToken t, ParserInput t)
data FullContext
FullContext :: InputContext -> ExpressionContext -> ParserContextDoc -> FullContext
[withContextPrefix] :: FullContext -> InputContext
[withContextDisplay] :: FullContext -> ExpressionContext
[withContextSuffix] :: FullContext -> ParserContextDoc
data Annotated e a
Annotated :: e -> a -> Annotated e a
[annotatedTag] :: Annotated e a -> e
[annotatedElem] :: Annotated e a -> a
annotatedElemL :: forall (e_a2mCu :: Type) (a_a2mCv :: Type). (‚ü¢) (Annotated e_a2mCu a_a2mCv) a_a2mCv
annotatedTagL :: forall (e_a2mCu :: Type) (a_a2mCv :: Type). (‚ü¢) (Annotated e_a2mCu a_a2mCv) e_a2mCu
instance (UVMHS.Lib.Pretty.Class.Pretty e, UVMHS.Lib.Pretty.Class.Pretty a) => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Lib.Parser.ParserInput.Annotated e a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (UVMHS.Lib.Parser.ParserInput.Annotated t a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (UVMHS.Lib.Parser.ParserInput.Annotated t a)
instance UVMHS.Core.Classes.Comonad.Extract (UVMHS.Lib.Parser.ParserInput.Annotated t)
instance UVMHS.Core.Classes.Comonad.Cobind (UVMHS.Lib.Parser.ParserInput.Annotated t)
instance UVMHS.Core.Classes.Functor.Functor (UVMHS.Lib.Parser.ParserInput.Annotated t)
instance UVMHS.Core.Classes.Comonad.Comonad (UVMHS.Lib.Parser.ParserInput.Annotated t)
instance (GHC.Show.Show e, GHC.Show.Show a) => GHC.Show.Show (UVMHS.Lib.Parser.ParserInput.Annotated e a)
instance UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserInput.FullContext
instance (UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùëÜ (UVMHS.Lib.Parser.ParserInput.ParserToken t)), UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Core.Pointed.AddBot UVMHS.Lib.Parser.Loc.Loc)) => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Lib.Parser.ParserInput.ParserInput t)
instance (UVMHS.Lib.Pretty.Class.Pretty t, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ParserContext) => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Lib.Parser.ParserInput.ParserToken t)

module UVMHS.Lib.Parser.ParserError
data ParserErrorStackTraces
ParserErrorStackTraces :: ùëÉ ùïä -> (ùïä ‚á∞ ParserErrorStackTraces) -> ParserErrorStackTraces
[parserErrorStackTracesMessages] :: ParserErrorStackTraces -> ùëÉ ùïä
[parserErrorStackTracesChain] :: ParserErrorStackTraces -> ùïä ‚á∞ ParserErrorStackTraces
parserErrorStackTracesChainL :: (‚ü¢) ParserErrorStackTraces ((‚á∞) ùïä ParserErrorStackTraces)
parserErrorStackTracesMessagesL :: (‚ü¢) ParserErrorStackTraces (ùëÉ ùïä)
makeStackTraces :: ùïä -> ùêø ùïä -> ParserErrorStackTraces
data ParserError
ParserError :: ParserContext -> ParserContextDoc -> (ExpressionContext ‚á∞ (InputContext ‚àß ParserErrorStackTraces)) -> ParserError
[parserErrorToken] :: ParserError -> ParserContext
[parserErrorSuffix] :: ParserError -> ParserContextDoc
[parserErrorFailures] :: ParserError -> ExpressionContext ‚á∞ (InputContext ‚àß ParserErrorStackTraces)
instance UVMHS.Core.Classes.Monoid.Append UVMHS.Lib.Parser.ParserError.ParserError
instance (UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùëÉ UVMHS.Init.ùïä), UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùïä UVMHS.Init.‚á∞ UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces)) => UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance UVMHS.Core.Classes.Lattice.Bot UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance UVMHS.Core.Classes.Lattice.Join UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance UVMHS.Core.Classes.Lattice.JoinLattice UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance GHC.Classes.Ord UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces
instance GHC.Classes.Eq UVMHS.Lib.Parser.ParserError.ParserErrorStackTraces

module UVMHS.Lib.Parser.Core
data ParserEnv t
ParserEnv :: ‚Ñï -> ùêø Format -> (ùêø ùïä ‚àß ùïä) -> (t -> ùîπ) -> ParserEnv t
[parserEnvContextPadding] :: ParserEnv t -> ‚Ñï
[parserEnvRenderFormat] :: ParserEnv t -> ùêø Format
[parserEnvErrorStack] :: ParserEnv t -> ùêø ùïä ‚àß ùïä
[parserEnvSkip] :: ParserEnv t -> t -> ùîπ
parserEnvSkipL :: forall (t_a2q8r :: Type). (‚ü¢) (ParserEnv t_a2q8r) (t_a2q8r -> ùîπ)
parserEnvErrorStackL :: forall (t_a2q8r :: Type). (‚ü¢) (ParserEnv t_a2q8r) ((‚àß) (ùêø ùïä) ùïä)
parserEnvRenderFormatL :: forall (t_a2q8r :: Type). (‚ü¢) (ParserEnv t_a2q8r) (ùêø Format)
parserEnvContextPaddingL :: forall (t_a2q8r :: Type). (‚ü¢) (ParserEnv t_a2q8r) ‚Ñï
parserEnv‚ÇÄ :: ParserEnv t
data ParserOut t
ParserOut :: AddNull ParserError -> ParserOut t
[parserOutError] :: ParserOut t -> AddNull ParserError
parserOutErrorL :: forall (t_a2qbf :: k_a2qbF). (‚ü¢) (ParserOut t_a2qbf) (AddNull ParserError)
data ParserState t
ParserState :: ExpressionContext -> InputContext -> ParserInput t -> ParserState t
[parserStateExpressionContext] :: ParserState t -> ExpressionContext
[parserStateInputContext] :: ParserState t -> InputContext
[parserStateInput] :: ParserState t -> ParserInput t
parserStateInputL :: forall (t_a2qe4 :: Type). (‚ü¢) (ParserState t_a2qe4) (ParserInput t_a2qe4)
parserStateInputContextL :: forall (t_a2qe4 :: Type). (‚ü¢) (ParserState t_a2qe4) InputContext
parserStateExpressionContextL :: forall (t_a2qe4 :: Type). (‚ü¢) (ParserState t_a2qe4) ExpressionContext
parserState‚ÇÄ :: ParserInput t -> ParserState t
newtype Parser t a
Parser :: ReaderT (ParserEnv t) (StateT (ParserState t) (FailT ((‚àß) (ParserOut t)))) a -> Parser t a
[unParser] :: Parser t a -> ReaderT (ParserEnv t) (StateT (ParserState t) (FailT ((‚àß) (ParserOut t)))) a
runParser :: ParserEnv t -> ParserState t -> Parser t a -> ParserOut t ‚àß ùëÇ (ParserState t ‚àß a)
pFail :: ParserContext -> Parser t a
pErr :: ùïä -> Parser t a -> Parser t a
pNewWithContext :: ùïä -> Parser t a -> Parser t ((InputContext ‚àß ExpressionContext) ‚àß a)
pNew :: ùïä -> Parser t a -> Parser t a
pRender :: Format -> Parser t a -> Parser t a
pAdvance :: Parser t (AddBot Loc ‚à® ParserToken t)
pPluck :: Parser t (ParserToken t)
pEnd :: Parser t ()
pFinal :: Parser t a -> Parser t a
pAny :: Parser t t
pShaped :: ùïä -> (t -> ùëÇ a) -> Parser t a
pSatisfies :: ùïä -> (t -> ùîπ) -> Parser t t
pDie :: ùïä -> Parser t a
pLit :: (Eq t, Pretty t) => t -> Parser t t
pWord :: forall s t. (Pretty s, Eq t, Pretty t, s ‚áÑ ùêº t) => s -> Parser t s
pOptional :: Parser t a -> Parser t (ùëÇ a)
pMany :: Parser t a -> Parser t (ùêø a)
pOneOrMore :: Parser t a -> Parser t (ùêø a)
pManySepBy :: Parser t () -> Parser t a -> Parser t (ùêø a)
pOneOrMoreSepBy :: Parser t () -> Parser t a -> Parser t (ùêø a)
pSkip :: (t -> ùîπ) -> Parser t a -> Parser t a
pLParen :: Parser ‚ÑÇ ()
pRParen :: Parser ‚ÑÇ ()
pDigit :: Parser ‚ÑÇ ‚ÑÇ
pNatural :: Parser ‚ÑÇ ‚Ñï
pInteger :: Parser ‚ÑÇ ‚Ñ§
pDouble :: Parser ‚ÑÇ ùîª
pNumber :: Parser ‚ÑÇ (‚Ñ§ ‚à® ùîª)
pLetter :: Parser ‚ÑÇ ‚ÑÇ
pName :: Parser ‚ÑÇ ùïä
pWhitespace :: Parser ‚ÑÇ ùïä
pOptionalWhitespace :: Parser ‚ÑÇ ()
pSurroundedBy :: Parser t () -> Parser t () -> Parser t a -> Parser t a
pSurrounded :: Parser t () -> Parser t a -> Parser t a
displayErrorTraces :: ParserErrorStackTraces -> Doc
displaySourceError :: AddNull ParserError -> Doc
runParser‚ÇÄ :: Parser t a -> ùëÜ (ParserToken t) -> ParserOut t ‚àß ùëÇ (ParserState t ‚àß a)
parse :: Pretty a => Parser t a -> ùëÜ (ParserToken t) -> Doc ‚à® a
parseIO :: Pretty a => Parser t a -> ùëÜ (ParserToken t) -> IO a
parseIOMain :: Pretty a => Parser t a -> ùëÜ (ParserToken t) -> IO ()
tokenize :: ùêø (Parser t a) -> ùëÜ (ParserToken t) -> Doc ‚à® ùêø (ParserToken a)
tokenizeIO :: ùêø (Parser t a) -> ùëÜ (ParserToken t) -> IO (ùêø (ParserToken a))
tokenizeIOMain :: Pretty a => ùêø (Parser t a) -> ùëÜ (ParserToken t) -> IO ()
pWithContext :: ùïä -> Parser t a -> Parser t (Annotated FullContext a)
instance UVMHS.Core.Effects.MonadState (UVMHS.Lib.Parser.Core.ParserState t) (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Effects.MonadWriter (UVMHS.Lib.Parser.Core.ParserOut t) (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Effects.MonadReader (UVMHS.Lib.Parser.Core.ParserEnv t) (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Effects.MonadFail (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Monad.Monad (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Monad.Bind (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Monad.Return (UVMHS.Lib.Parser.Core.Parser t)
instance UVMHS.Core.Classes.Functor.Functor (UVMHS.Lib.Parser.Core.Parser t)
instance (UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.ExpressionContext, UVMHS.Lib.Pretty.Class.Pretty UVMHS.Lib.Parser.ParserContext.InputContext, UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Lib.Parser.ParserInput.ParserInput t)) => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Lib.Parser.Core.ParserState t)
instance forall k (t :: k). UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Core.Pointed.AddNull UVMHS.Lib.Parser.ParserError.ParserError) => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Lib.Parser.Core.ParserOut t)
instance forall k (t :: k). UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Core.ParserOut t)
instance forall k (t :: k). UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Core.ParserOut t)
instance forall k (t :: k). UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Core.ParserOut t)
instance (UVMHS.Lib.Pretty.Class.Pretty UVMHS.Init.‚Ñï, UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùêø UVMHS.Lib.Pretty.Color.Format), UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Init.ùêø UVMHS.Init.ùïä UVMHS.Init.‚àß UVMHS.Init.ùïä), UVMHS.Lib.Pretty.Class.Pretty (t -> UVMHS.Init.ùîπ)) => UVMHS.Lib.Pretty.Class.Pretty (UVMHS.Lib.Parser.Core.ParserEnv t)

module UVMHS.Lib.Parser.Mixfix
data MixesF t f a
MixesF :: Parser t (f a -> a) -> Parser t (f a -> a) -> Parser t (f a -> f a -> a) -> Parser t (f a -> f a -> a) -> Parser t (f a -> f a -> a) -> MixesF t f a
[mixesFPrefix] :: MixesF t f a -> Parser t (f a -> a)
[mixesFPostfix] :: MixesF t f a -> Parser t (f a -> a)
[mixesFInfix] :: MixesF t f a -> Parser t (f a -> f a -> a)
[mixesFInfixL] :: MixesF t f a -> Parser t (f a -> f a -> a)
[mixesFInfixR] :: MixesF t f a -> Parser t (f a -> f a -> a)
data MixF t f a
MixFPrefix :: ‚Ñï -> Parser t (f a -> a) -> MixF t f a
MixFPostfix :: ‚Ñï -> Parser t (f a -> a) -> MixF t f a
MixFInfix :: ‚Ñï -> Parser t (f a -> f a -> a) -> MixF t f a
MixFInfixL :: ‚Ñï -> Parser t (f a -> f a -> a) -> MixF t f a
MixFInfixR :: ‚Ñï -> Parser t (f a -> f a -> a) -> MixF t f a
MixFTerminal :: Parser t a -> MixF t f a
data MixfixF t f a
MixfixF :: Parser t a -> (‚Ñï ‚á∞ MixesF t f a) -> MixfixF t f a
[mixfixFTerminals] :: MixfixF t f a -> Parser t a
[mixfixFLevels] :: MixfixF t f a -> ‚Ñï ‚á∞ MixesF t f a
mixF :: MixF t f a -> MixfixF t f a
mixfixParserF :: forall t f a. Comonad f => MixfixF t f a -> (Parser t a -> Parser t (f a)) -> Parser t (f a)
data Mixes t a
Mixes :: Parser t (a -> a) -> Parser t (a -> a) -> Parser t (a -> a -> a) -> Parser t (a -> a -> a) -> Parser t (a -> a -> a) -> Mixes t a
[mixesPrefix] :: Mixes t a -> Parser t (a -> a)
[mixesPostfix] :: Mixes t a -> Parser t (a -> a)
[mixesInfix] :: Mixes t a -> Parser t (a -> a -> a)
[mixesInfixL] :: Mixes t a -> Parser t (a -> a -> a)
[mixesInfixR] :: Mixes t a -> Parser t (a -> a -> a)
mixesPure :: Mixes t a -> MixesF t ID a
data Mixfix t a
Mixfix :: Parser t a -> (‚Ñï ‚á∞ Mixes t a) -> Mixfix t a
[mixfixTerminals] :: Mixfix t a -> Parser t a
[mixfixLevels] :: Mixfix t a -> ‚Ñï ‚á∞ Mixes t a
data Mix t a
MixPrefix :: ‚Ñï -> Parser t (a -> a) -> Mix t a
MixPostfix :: ‚Ñï -> Parser t (a -> a) -> Mix t a
MixInfix :: ‚Ñï -> Parser t (a -> a -> a) -> Mix t a
MixInfixL :: ‚Ñï -> Parser t (a -> a -> a) -> Mix t a
MixInfixR :: ‚Ñï -> Parser t (a -> a -> a) -> Mix t a
MixTerminal :: Parser t a -> Mix t a
mix :: Mix t a -> Mixfix t a
mixfixPure :: Mixfix t a -> MixfixF t ID a
mixfixParser :: Mixfix t a -> Parser t a
mixfixParserWithContext :: ùïä -> MixfixF t (Annotated FullContext) a -> Parser t (Annotated FullContext a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.Mixfix t a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.Mixfix t a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.Mixfix t a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.Mixes t a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.Mixes t a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.Mixes t a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.MixfixF t f a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.MixfixF t f a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.MixfixF t f a)
instance UVMHS.Core.Classes.Monoid.Null (UVMHS.Lib.Parser.Mixfix.MixesF t f a)
instance UVMHS.Core.Classes.Monoid.Append (UVMHS.Lib.Parser.Mixfix.MixesF t f a)
instance UVMHS.Core.Classes.Monoid.Monoid (UVMHS.Lib.Parser.Mixfix.MixesF t f a)

module UVMHS.Lib.Parser.Examples
testParsingSmall :: IO ()
testParsingMultiline :: IO ()
testParsingBranching :: IO ()
testParsingGreedy :: IO ()
testParsingGreedyAmbiguity :: IO ()
testParsingSuccess :: IO ()
testParsingErrorNewline :: IO ()
testParsingErrorEof :: IO ()
testTokenizeSimple :: IO ()
testTokenize :: IO ()
testTokenizeFailure1 :: IO ()
testTokenizeFailure2 :: IO ()

module UVMHS.Lib.Parser

module UVMHS
