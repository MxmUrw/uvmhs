module UVMHS.Core.Data.Arithmetic where

  -- {-# INLINE natO #-}
  -- {-# INLINE natO64 #-}
  -- {-# INLINE natO32 #-}
  -- {-# INLINE natO16 #-}
  -- {-# INLINE natO8 #-}

import UVMHS.Core.Init
import UVMHS.Core.Classes
import UVMHS.Core.Data.Option ()

import qualified Prelude as HS

-- ‚Ñï --

instance Zero   ‚Ñï where {-# INLINE zero #-} ; zero = 0
instance Plus   ‚Ñï where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñï where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñï where {-# INLINE one  #-} ; one  = 1
instance Times  ‚Ñï where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance DivMod ‚Ñï where {-# INLINE (‚åø)  #-} ; (‚åø)  = HS.div ; (√∑) = HS.mod
instance Pon    ‚Ñï where {-# INLINE (^^) #-} ; (^^) = (HS.^)
instance Pow    ‚Ñï where {-# INLINE (^)  #-} ; (^)  = (HS.^)

instance Bot    ‚Ñï where {-# INLINE bot  #-} ; bot  = 0
instance Join   ‚Ñï where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñï where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñï where {-# INLINE null #-} ; null = 0
instance Append ‚Ñï where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñï
instance Multiplicative ‚Ñï
instance JoinLattice    ‚Ñï
instance Monoid         ‚Ñï

instance ToNat ‚Ñï where {-# INLINE nat #-} ; nat = id
instance ToNatO64 ‚Ñï where 
  {-# INLINE natO64 #-}
  natO64 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñï64) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToNatO32 ‚Ñï where 
  {-# INLINE natO32 #-}
  natO32 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñï32) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToNatO16 ‚Ñï where 
  {-# INLINE natO16 #-}
  natO16 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñï16) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToNatO8 ‚Ñï where 
  {-# INLINE natO8 #-}
  natO8 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñï8) = None
    | otherwise = Some $ HS.fromIntegral n

instance ToInt ‚Ñï where {-# INLINE int #-} ; int = HS.fromIntegral
instance ToIntO64 ‚Ñï where 
  {-# INLINE intO64 #-}
  intO64 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§64) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToIntO32 ‚Ñï where 
  {-# INLINE intO32 #-}
  intO32 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§32) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToIntO16 ‚Ñï where 
  {-# INLINE intO16 #-}
  intO16 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§16) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToIntO8 ‚Ñï where 
  {-# INLINE intO8 #-}
  intO8 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§8) = None
    | otherwise = Some $ HS.fromIntegral n

instance ToRational  ‚Ñï where {-# INLINE rat  #-} ; rat  = HS.fromIntegral
instance ToRational·¥æ ‚Ñï where {-# INLINE rat·¥æ #-} ; rat·¥æ = HS.fromIntegral
instance ToDouble    ‚Ñï where {-# INLINE dbl  #-} ; dbl  = HS.fromIntegral
instance ToDouble·¥æ   ‚Ñï where {-# INLINE dbl·¥æ #-} ; dbl·¥æ = ùîª·¥æ ‚àò HS.fromIntegral
instance ToNumber    ‚Ñï where {-# INLINE num  #-} ; num  = Integer ‚àò int
instance ToNumber·¥æ   ‚Ñï where {-# INLINE num·¥æ #-} ; num·¥æ = Natural

-- ‚Ñï64 --

instance Zero   ‚Ñï64 where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñï64 where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñï64 where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñï64 where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñï64 where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance DivMod ‚Ñï64 where {-# INLINE (‚åø)  #-} ; (‚åø)  = HS.div ; (√∑) = HS.mod
instance Pon    ‚Ñï64 where {-# INLINE (^^) #-} ; (^^) = (HS.^)
instance Pow    ‚Ñï64 where {-# INLINE (^)  #-} ; (^)  = (HS.^)

instance Bot    ‚Ñï64 where {-# INLINE bot  #-} ; bot  = zero
instance Join   ‚Ñï64 where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñï64 where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñï64 where {-# INLINE null #-} ; null = zero
instance Append ‚Ñï64 where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñï64
instance Multiplicative ‚Ñï64
instance JoinLattice    ‚Ñï64
instance Monoid         ‚Ñï64

instance ToNat   ‚Ñï64 where {-# INLINE nat   #-} ; nat   = HS.fromIntegral
instance ToNat64 ‚Ñï64 where {-# INLINE nat64 #-} ; nat64 = id
instance ToNatO32 ‚Ñï64 where 
  {-# INLINE natO32 #-}
  natO32 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñï32) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToNatO16 ‚Ñï64 where 
  {-# INLINE natO16 #-}
  natO16 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñï16) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToNatO8 ‚Ñï64 where 
  {-# INLINE natO8 #-}
  natO8 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñï8) = None
    | otherwise = Some $ HS.fromIntegral n

instance ToInt ‚Ñï64 where {-# INLINE int #-} ; int = HS.fromIntegral
instance ToIntO64 ‚Ñï64 where 
  {-# INLINE intO64 #-}
  intO64 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§64) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToIntO32 ‚Ñï64 where 
  {-# INLINE intO32 #-}
  intO32 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§32) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToIntO16 ‚Ñï64 where 
  {-# INLINE intO16 #-}
  intO16 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§16) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToIntO8 ‚Ñï64 where 
  {-# INLINE intO8 #-}
  intO8 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§8) = None
    | otherwise = Some $ HS.fromIntegral n

instance ToRational  ‚Ñï64 where {-# INLINE rat  #-} ; rat  = HS.fromIntegral
instance ToRational·¥æ ‚Ñï64 where {-# INLINE rat·¥æ #-} ; rat·¥æ = HS.fromIntegral
instance ToDouble    ‚Ñï64 where {-# INLINE dbl  #-} ; dbl  = HS.fromIntegral
instance ToDouble·¥æ   ‚Ñï64 where {-# INLINE dbl·¥æ #-} ; dbl·¥æ = ùîª·¥æ ‚àò HS.fromIntegral
instance ToNumber    ‚Ñï64 where {-# INLINE num  #-} ; num  = Integer ‚àò int
instance ToNumber·¥æ   ‚Ñï64 where {-# INLINE num·¥æ #-} ; num·¥æ = Natural ‚àò nat

-- ‚Ñï32 --

instance Zero   ‚Ñï32 where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñï32 where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñï32 where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñï32 where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñï32 where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance DivMod ‚Ñï32 where {-# INLINE (‚åø)  #-} ; (‚åø)  = HS.div ; (√∑) = HS.mod
instance Pon    ‚Ñï32 where {-# INLINE (^^) #-} ; (^^) = (HS.^)
instance Pow    ‚Ñï32 where {-# INLINE (^)  #-} ; (^)  = (HS.^)

instance Bot    ‚Ñï32 where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ‚Ñï32 where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñï32 where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñï32 where {-# INLINE null #-} ; null = zero
instance Append ‚Ñï32 where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñï32
instance Multiplicative ‚Ñï32
instance JoinLattice    ‚Ñï32
instance Monoid         ‚Ñï32

instance ToNat    ‚Ñï32 where {-# INLINE nat   #-} ; nat   = HS.fromIntegral
instance ToNat64  ‚Ñï32 where {-# INLINE nat64 #-} ; nat64 = HS.fromIntegral
instance ToNat32  ‚Ñï32 where {-# INLINE nat32 #-} ; nat32 = id
instance ToNatO16 ‚Ñï32 where 
  {-# INLINE natO16 #-}
  natO16 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñï16) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToNatO8 ‚Ñï32 where 
  {-# INLINE natO8 #-}
  natO8 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñï8) = None
    | otherwise = Some $ HS.fromIntegral n

instance ToInt   ‚Ñï32 where {-# INLINE int   #-} ; int   = HS.fromIntegral
instance ToInt64 ‚Ñï32 where {-# INLINE int64 #-} ; int64 = HS.fromIntegral
instance ToIntO32 ‚Ñï32 where 
  {-# INLINE intO32 #-}
  intO32 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§32) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToIntO16 ‚Ñï32 where 
  {-# INLINE intO16 #-}
  intO16 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§16) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToIntO8 ‚Ñï32 where 
  {-# INLINE intO8 #-}
  intO8 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§8) = None
    | otherwise = Some $ HS.fromIntegral n

instance ToRational  ‚Ñï32 where {-# INLINE rat  #-} ; rat  = HS.fromIntegral
instance ToRational·¥æ ‚Ñï32 where {-# INLINE rat·¥æ #-} ; rat·¥æ = HS.fromIntegral
instance ToDouble    ‚Ñï32 where {-# INLINE dbl  #-} ; dbl  = HS.fromIntegral
instance ToDouble·¥æ   ‚Ñï32 where {-# INLINE dbl·¥æ #-} ; dbl·¥æ = ùîª·¥æ ‚àò HS.fromIntegral
instance ToNumber    ‚Ñï32 where {-# INLINE num  #-} ; num  = Integer ‚àò int
instance ToNumber·¥æ   ‚Ñï32 where {-# INLINE num·¥æ #-} ; num·¥æ = Natural ‚àò nat

-- ‚Ñï16 --

instance Zero   ‚Ñï16 where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñï16 where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñï16 where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñï16 where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñï16 where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance DivMod ‚Ñï16 where {-# INLINE (‚åø)  #-} ; (‚åø)  = HS.div ; (√∑) = HS.mod
instance Pon    ‚Ñï16 where {-# INLINE (^^) #-} ; (^^) = (HS.^)
instance Pow    ‚Ñï16 where {-# INLINE (^)  #-} ; (^)  = (HS.^)

instance Bot    ‚Ñï16 where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ‚Ñï16 where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñï16 where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñï16 where {-# INLINE null #-} ; null = zero
instance Append ‚Ñï16 where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñï16
instance Multiplicative ‚Ñï16
instance JoinLattice    ‚Ñï16
instance Monoid         ‚Ñï16

instance ToNat   ‚Ñï16 where {-# INLINE nat   #-} ; nat   = HS.fromIntegral
instance ToNat64 ‚Ñï16 where {-# INLINE nat64 #-} ; nat64 = HS.fromIntegral
instance ToNat32 ‚Ñï16 where {-# INLINE nat32 #-} ; nat32 = HS.fromIntegral
instance ToNat16 ‚Ñï16 where {-# INLINE nat16 #-} ; nat16 = id
instance ToNatO8 ‚Ñï16 where 
  {-# INLINE natO8 #-}
  natO8 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñï8) = None
    | otherwise = Some $ HS.fromIntegral n

instance ToInt   ‚Ñï16 where {-# INLINE int   #-} ; int   = HS.fromIntegral
instance ToInt64 ‚Ñï16 where {-# INLINE int64 #-} ; int64 = HS.fromIntegral
instance ToInt32 ‚Ñï16 where {-# INLINE int32 #-} ; int32 = HS.fromIntegral
instance ToIntO16 ‚Ñï16 where 
  {-# INLINE intO16 #-}
  intO16 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§16) = None
    | otherwise = Some $ HS.fromIntegral n
instance ToIntO8 ‚Ñï16 where 
  {-# INLINE intO8 #-}
  intO8 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§8) = None
    | otherwise = Some $ HS.fromIntegral n

instance ToRational  ‚Ñï16 where {-# INLINE rat  #-} ; rat  = HS.fromIntegral
instance ToRational·¥æ ‚Ñï16 where {-# INLINE rat·¥æ #-} ; rat·¥æ = HS.fromIntegral
instance ToDouble    ‚Ñï16 where {-# INLINE dbl  #-} ; dbl  = HS.fromIntegral
instance ToDouble·¥æ   ‚Ñï16 where {-# INLINE dbl·¥æ #-} ; dbl·¥æ = ùîª·¥æ ‚àò HS.fromIntegral
instance ToNumber    ‚Ñï16 where {-# INLINE num  #-} ; num  = Integer ‚àò int
instance ToNumber·¥æ   ‚Ñï16 where {-# INLINE num·¥æ #-} ; num·¥æ = Natural ‚àò nat

-- ‚Ñï8 --

instance Zero   ‚Ñï8 where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñï8 where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñï8 where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñï8 where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñï8 where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance DivMod ‚Ñï8 where {-# INLINE (‚åø)  #-} ; (‚åø)  = HS.div ; (√∑) = HS.mod
instance Pon    ‚Ñï8 where {-# INLINE (^^) #-} ; (^^) = (HS.^)
instance Pow    ‚Ñï8 where {-# INLINE (^)  #-} ; (^)  = (HS.^)

instance Bot    ‚Ñï8 where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ‚Ñï8 where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñï8 where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñï8 where {-# INLINE null #-} ; null = zero
instance Append ‚Ñï8 where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñï8
instance Multiplicative ‚Ñï8
instance JoinLattice    ‚Ñï8
instance Monoid         ‚Ñï8

instance ToNat   ‚Ñï8 where {-# INLINE nat   #-} ; nat   = HS.fromIntegral
instance ToNat64 ‚Ñï8 where {-# INLINE nat64 #-} ; nat64 = HS.fromIntegral
instance ToNat32 ‚Ñï8 where {-# INLINE nat32 #-} ; nat32 = HS.fromIntegral
instance ToNat16 ‚Ñï8 where {-# INLINE nat16 #-} ; nat16 = HS.fromIntegral
instance ToNat8  ‚Ñï8 where {-# INLINE nat8  #-} ; nat8  = id

instance ToInt   ‚Ñï8 where {-# INLINE int   #-} ; int   = HS.fromIntegral
instance ToInt64 ‚Ñï8 where {-# INLINE int64 #-} ; int64 = HS.fromIntegral
instance ToInt32 ‚Ñï8 where {-# INLINE int32 #-} ; int32 = HS.fromIntegral
instance ToInt16 ‚Ñï8 where {-# INLINE int16 #-} ; int16 = HS.fromIntegral
instance ToIntO8 ‚Ñï8 where 
  {-# INLINE intO8 #-}
  intO8 n 
    | n > HS.fromIntegral (HS.maxBound @ ‚Ñ§8) = None
    | otherwise = Some $ HS.fromIntegral n

instance ToRational  ‚Ñï8 where {-# INLINE rat  #-} ; rat  = HS.fromIntegral
instance ToRational·¥æ ‚Ñï8 where {-# INLINE rat·¥æ #-} ; rat·¥æ = HS.fromIntegral
instance ToDouble    ‚Ñï8 where {-# INLINE dbl  #-} ; dbl  = HS.fromIntegral
instance ToDouble·¥æ   ‚Ñï8 where {-# INLINE dbl·¥æ #-} ; dbl·¥æ = ùîª·¥æ ‚àò HS.fromIntegral
instance ToNumber    ‚Ñï8 where {-# INLINE num  #-} ; num  = Integer ‚àò int
instance ToNumber·¥æ   ‚Ñï8 where {-# INLINE num·¥æ #-} ; num·¥æ = Natural ‚àò nat

-- ‚Ñ§ --

instance Zero   ‚Ñ§ where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñ§ where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñ§ where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñ§ where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñ§ where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance DivMod ‚Ñ§ where {-# INLINE (‚åø)  #-} ; (‚åø)  = HS.div ; (√∑) = HS.mod
instance Pon    ‚Ñ§ where {-# INLINE (^^) #-} ; (^^) = (HS.^)

instance Bot    ‚Ñ§ where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ‚Ñ§ where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñ§ where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñ§ where {-# INLINE null #-} ; null = zero
instance Append ‚Ñ§ where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñ§
instance Multiplicative ‚Ñ§
instance JoinLattice    ‚Ñ§
instance Monoid         ‚Ñ§

instance ToNatO ‚Ñ§ where 
  {-# INLINE natO #-}
  natO i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO64 ‚Ñ§ where 
  {-# INLINE natO64 #-}
  natO64 i 
    | i < HS.fromIntegral 0 = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñï64) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO32 ‚Ñ§ where 
  {-# INLINE natO32 #-}
  natO32 i 
    | i < HS.fromIntegral 0 = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñï32) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO16 ‚Ñ§ where 
  {-# INLINE natO16 #-}
  natO16 i 
    | i < HS.fromIntegral 0 = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñï16) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO8 ‚Ñ§ where 
  {-# INLINE natO8 #-}
  natO8 i 
    | i < HS.fromIntegral 0 = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñï8) = None
    | otherwise = Some $ HS.fromIntegral i

instance ToInt ‚Ñ§ where {-# INLINE int #-} ; int = id
instance ToIntO64 ‚Ñ§ where 
  {-# INLINE intO64 #-}
  intO64 i 
    | i < HS.fromIntegral (HS.minBound @ ‚Ñ§64) = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñ§64) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToIntO32 ‚Ñ§ where 
  {-# INLINE intO32 #-}
  intO32 i 
    | i < HS.fromIntegral (HS.minBound @ ‚Ñ§32) = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñ§32) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToIntO16 ‚Ñ§ where 
  {-# INLINE intO16 #-}
  intO16 i 
    | i < HS.fromIntegral (HS.minBound @ ‚Ñ§16) = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñ§16) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToIntO8 ‚Ñ§ where 
  {-# INLINE intO8 #-}
  intO8 i 
    | i < HS.fromIntegral (HS.minBound @ ‚Ñ§8) = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñ§8) = None
    | otherwise = Some $ HS.fromIntegral i

instance ToRational ‚Ñ§ where {-# INLINE rat #-} ; rat = HS.fromIntegral
instance ToRational·¥æO ‚Ñ§ where 
  {-# INLINE rat·¥æO #-}
  rat·¥æO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i

instance ToDouble ‚Ñ§ where {-# INLINE dbl #-} ; dbl = HS.fromIntegral
instance ToDouble·¥æO ‚Ñ§ where
  {-# INLINE dbl·¥æO #-}
  dbl·¥æO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ ùîª·¥æ $ HS.fromIntegral i

instance ToNumber ‚Ñ§ where {-# INLINE num #-} ; num = Integer
instance ToNumber·¥æO ‚Ñ§ where
  {-# INLINE num·¥æO #-}
  num·¥æO i = case natO i of
    None ‚Üí None
    Some n ‚Üí Some $ Natural n

-- ‚Ñ§64 --

instance Zero   ‚Ñ§64 where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñ§64 where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñ§64 where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñ§64 where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñ§64 where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance DivMod ‚Ñ§64 where {-# INLINE (‚åø)  #-} ; (‚åø)  = HS.div ; (√∑) = HS.mod
instance Pon    ‚Ñ§64 where {-# INLINE (^^) #-} ; (^^) = (HS.^)

instance Bot    ‚Ñ§64 where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ‚Ñ§64 where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñ§64 where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñ§64 where {-# INLINE null #-} ; null = zero
instance Append ‚Ñ§64 where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance JoinLattice    ‚Ñ§64
instance Additive       ‚Ñ§64
instance Multiplicative ‚Ñ§64
instance Monoid         ‚Ñ§64

instance ToNatO ‚Ñ§64 where 
  {-# INLINE natO #-}
  natO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO64 ‚Ñ§64 where 
  {-# INLINE natO64 #-}
  natO64 i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO32 ‚Ñ§64 where 
  {-# INLINE natO32 #-}
  natO32 i 
    | i < HS.fromIntegral 0 = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñï32) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO16 ‚Ñ§64 where 
  {-# INLINE natO16 #-}
  natO16 i 
    | i < HS.fromIntegral 0 = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñï16) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO8 ‚Ñ§64 where 
  {-# INLINE natO8 #-}
  natO8 i 
    | i < HS.fromIntegral 0 = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñï8) = None
    | otherwise = Some $ HS.fromIntegral i

instance ToInt    ‚Ñ§64 where {-# INLINE int   #-} ; int   = HS.fromIntegral
instance ToInt64  ‚Ñ§64 where {-# INLINE int64 #-} ; int64 = id
instance ToIntO32 ‚Ñ§64 where 
  {-# INLINE intO32 #-}
  intO32 i 
    | i < HS.fromIntegral (HS.minBound @ ‚Ñ§32) = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñ§32) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToIntO16 ‚Ñ§64 where 
  {-# INLINE intO16 #-}
  intO16 i 
    | i < HS.fromIntegral (HS.minBound @ ‚Ñ§16) = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñ§16) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToIntO8 ‚Ñ§64 where 
  {-# INLINE intO8 #-}
  intO8 i 
    | i < HS.fromIntegral (HS.minBound @ ‚Ñ§8) = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñ§8) = None
    | otherwise = Some $ HS.fromIntegral i

instance ToRational ‚Ñ§64 where {-# INLINE rat #-} ; rat = HS.fromIntegral
instance ToRational·¥æO ‚Ñ§64 where 
  {-# INLINE rat·¥æO #-}
  rat·¥æO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i

instance ToDouble ‚Ñ§64 where {-# INLINE dbl #-} ; dbl = HS.fromIntegral
instance ToDouble·¥æO ‚Ñ§64 where
  {-# INLINE dbl·¥æO #-}
  dbl·¥æO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ ùîª·¥æ $ HS.fromIntegral i

instance ToNumber ‚Ñ§64 where {-# INLINE num #-} ; num = Integer ‚àò int
instance ToNumber·¥æO ‚Ñ§64 where
  {-# INLINE num·¥æO #-}
  num·¥æO i = case natO i of
    None ‚Üí None
    Some n ‚Üí Some $ Natural n

-- ‚Ñ§32 --

instance Zero   ‚Ñ§32 where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñ§32 where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñ§32 where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñ§32 where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñ§32 where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance DivMod ‚Ñ§32 where {-# INLINE (‚åø)  #-} ; (‚åø)  = HS.div ; (√∑) = HS.mod
instance Pon    ‚Ñ§32 where {-# INLINE (^^) #-} ; (^^) = (HS.^)

instance Bot    ‚Ñ§32 where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ‚Ñ§32 where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñ§32 where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñ§32 where {-# INLINE null #-} ; null = zero
instance Append ‚Ñ§32 where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñ§32
instance Multiplicative ‚Ñ§32
instance JoinLattice    ‚Ñ§32
instance Monoid         ‚Ñ§32

instance ToNatO ‚Ñ§32 where
  {-# INLINE natO #-}
  natO i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO64 ‚Ñ§32 where
  {-# INLINE natO64 #-}
  natO64 i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO32 ‚Ñ§32 where
  {-# INLINE natO32 #-}
  natO32 i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO16 ‚Ñ§32 where 
  {-# INLINE natO16 #-}
  natO16 i 
    | i < HS.fromIntegral 0 = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñï16) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO8 ‚Ñ§32 where 
  {-# INLINE natO8 #-}
  natO8 i 
    | i < HS.fromIntegral 0 = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñï8) = None
    | otherwise = Some $ HS.fromIntegral i

instance ToInt   ‚Ñ§32 where {-# INLINE int   #-} ; int   = HS.fromIntegral
instance ToInt64 ‚Ñ§32 where {-# INLINE int64 #-} ; int64 = HS.fromIntegral
instance ToInt32 ‚Ñ§32 where {-# INLINE int32 #-} ; int32 = id
instance ToIntO16 ‚Ñ§32 where 
  {-# INLINE intO16 #-}
  intO16 i 
    | i < HS.fromIntegral (HS.minBound @ ‚Ñ§16) = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñ§16) = None
    | otherwise = Some $ HS.fromIntegral i
instance ToIntO8 ‚Ñ§32 where 
  {-# INLINE intO8 #-}
  intO8 i 
    | i < HS.fromIntegral (HS.minBound @ ‚Ñ§8) = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñ§8) = None
    | otherwise = Some $ HS.fromIntegral i

instance ToRational ‚Ñ§32 where {-# INLINE rat #-} ; rat = HS.fromIntegral
instance ToRational·¥æO ‚Ñ§32 where 
  {-# INLINE rat·¥æO #-}
  rat·¥æO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i

instance ToDouble ‚Ñ§32 where {-# INLINE dbl #-} ; dbl = HS.fromIntegral
instance ToDouble·¥æO ‚Ñ§32 where
  {-# INLINE dbl·¥æO #-}
  dbl·¥æO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ ùîª·¥æ $ HS.fromIntegral i

instance ToNumber ‚Ñ§32 where {-# INLINE num #-} ; num = Integer ‚àò int
instance ToNumber·¥æO ‚Ñ§32 where
  {-# INLINE num·¥æO #-}
  num·¥æO i = case natO i of
    None ‚Üí None
    Some n ‚Üí Some $ Natural n

-- ‚Ñ§16 --

instance Zero   ‚Ñ§16 where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñ§16 where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñ§16 where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñ§16 where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñ§16 where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance DivMod ‚Ñ§16 where {-# INLINE (‚åø)  #-} ; (‚åø)  = HS.div ; (√∑) = HS.mod
instance Pon    ‚Ñ§16 where {-# INLINE (^^) #-} ; (^^) = (HS.^)

instance Bot    ‚Ñ§16 where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ‚Ñ§16 where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñ§16 where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñ§16 where {-# INLINE null #-} ; null = zero
instance Append ‚Ñ§16 where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñ§16
instance Multiplicative ‚Ñ§16
instance JoinLattice    ‚Ñ§16
instance Monoid         ‚Ñ§16

instance ToNatO ‚Ñ§16 where 
  {-# INLINE natO #-}
  natO i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO64 ‚Ñ§16 where 
  {-# INLINE natO64 #-}
  natO64 i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO32 ‚Ñ§16 where 
  {-# INLINE natO32 #-}
  natO32 i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO16 ‚Ñ§16 where 
  {-# INLINE natO16 #-}
  natO16 i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO8 ‚Ñ§16 where 
  {-# INLINE natO8 #-}
  natO8 i 
    | i < HS.fromIntegral 0 = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñï8) = None
    | otherwise = Some $ HS.fromIntegral i

instance ToInt   ‚Ñ§16 where {-# INLINE int   #-} ; int   = HS.fromIntegral
instance ToInt64 ‚Ñ§16 where {-# INLINE int64 #-} ; int64 = HS.fromIntegral
instance ToInt32 ‚Ñ§16 where {-# INLINE int32 #-} ; int32 = HS.fromIntegral
instance ToInt16 ‚Ñ§16 where {-# INLINE int16 #-} ; int16 = id
instance ToIntO8 ‚Ñ§16 where 
  {-# INLINE intO8 #-}
  intO8 i 
    | i < HS.fromIntegral (HS.minBound @ ‚Ñ§8) = None
    | i > HS.fromIntegral (HS.maxBound @ ‚Ñ§8) = None
    | otherwise = Some $ HS.fromIntegral i

instance ToRational ‚Ñ§16 where {-# INLINE rat #-} ; rat = HS.fromIntegral
instance ToRational·¥æO ‚Ñ§16 where 
  {-# INLINE rat·¥æO #-}
  rat·¥æO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i

instance ToDouble ‚Ñ§16 where {-# INLINE dbl #-} ; dbl = HS.fromIntegral
instance ToDouble·¥æO ‚Ñ§16 where
  {-# INLINE dbl·¥æO #-}
  dbl·¥æO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ ùîª·¥æ $ HS.fromIntegral i

instance ToNumber ‚Ñ§16 where {-# INLINE num #-} ; num = Integer ‚àò int
instance ToNumber·¥æO ‚Ñ§16 where
  {-# INLINE num·¥æO #-}
  num·¥æO i = case natO i of
    None ‚Üí None
    Some n ‚Üí Some $ Natural n

-- ‚Ñ§8 --

instance Zero   ‚Ñ§8 where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñ§8 where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñ§8 where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñ§8 where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñ§8 where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance DivMod ‚Ñ§8 where {-# INLINE (‚åø)  #-} ; (‚åø)  = HS.div ; (√∑) = HS.mod
instance Pon    ‚Ñ§8 where {-# INLINE (^^) #-} ; (^^) = (HS.^)

instance Bot    ‚Ñ§8 where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ‚Ñ§8 where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñ§8 where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñ§8 where {-# INLINE null #-} ; null = zero
instance Append ‚Ñ§8 where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñ§8
instance Multiplicative ‚Ñ§8
instance JoinLattice    ‚Ñ§8
instance Monoid         ‚Ñ§8

instance ToNatO ‚Ñ§8 where
  {-# INLINE natO #-}
  natO i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO64 ‚Ñ§8 where
  {-# INLINE natO64 #-}
  natO64 i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO32 ‚Ñ§8 where
  {-# INLINE natO32 #-}
  natO32 i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO16 ‚Ñ§8 where
  {-# INLINE natO16 #-}
  natO16 i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i
instance ToNatO8  ‚Ñ§8 where
  {-# INLINE natO8 #-}
  natO8 i 
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i

instance ToInt   ‚Ñ§8 where {-# INLINE int   #-} ; int   = HS.fromIntegral
instance ToInt64 ‚Ñ§8 where {-# INLINE int64 #-} ; int64 = HS.fromIntegral
instance ToInt32 ‚Ñ§8 where {-# INLINE int32 #-} ; int32 = HS.fromIntegral
instance ToInt16 ‚Ñ§8 where {-# INLINE int16 #-} ; int16 = HS.fromIntegral
instance ToInt8  ‚Ñ§8 where {-# INLINE int8  #-} ; int8  = id

instance ToRational ‚Ñ§8 where {-# INLINE rat #-} ; rat = HS.fromIntegral
instance ToRational·¥æO ‚Ñ§8 where 
  {-# INLINE rat·¥æO #-}
  rat·¥æO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromIntegral i

instance ToDouble ‚Ñ§8 where {-# INLINE dbl #-} ; dbl = HS.fromIntegral
instance ToDouble·¥æO ‚Ñ§8 where
  {-# INLINE dbl·¥æO #-}
  dbl·¥æO i
    | i < HS.fromIntegral 0 = None
    | otherwise = Some $ ùîª·¥æ $ HS.fromIntegral i

instance ToNumber ‚Ñ§8 where {-# INLINE num #-} ; num = Integer ‚àò int
instance ToNumber·¥æO ‚Ñ§8 where
  {-# INLINE num·¥æO #-}
  num·¥æO i = case natO i of
    None ‚Üí None
    Some n ‚Üí Some $ Natural n

-- ‚Ñö --

instance Zero   ‚Ñö where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñö where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñö where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñö where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñö where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance Divide ‚Ñö where {-# INLINE (/)  #-} ; (/)  = (HS./)
instance Pon    ‚Ñö where {-# INLINE (^^) #-} ; (^^) = (HS.^)

instance Bot    ‚Ñö where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ‚Ñö where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñö where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñö where {-# INLINE null #-} ; null = zero
instance Append ‚Ñö where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñö
instance Multiplicative ‚Ñö
instance JoinLattice    ‚Ñö
instance Monoid         ‚Ñö

instance ToNatO ‚Ñö where
  {-# INLINE natO #-}
  natO q
    | denom q ‚â¢ 1 = None
    | otherwise = natO $ numer q
instance ToNatO64 ‚Ñö where
  {-# INLINE natO64 #-}
  natO64 q
    | denom q ‚â¢ 1 = None
    | otherwise = natO64 $ numer q
instance ToNatO32 ‚Ñö where
  {-# INLINE natO32 #-}
  natO32 q
    | denom q ‚â¢ 1 = None
    | otherwise = natO32 $ numer q
instance ToNatO16 ‚Ñö where
  {-# INLINE natO16 #-}
  natO16 q
    | denom q ‚â¢ 1 = None
    | otherwise = natO16 $ numer q
instance ToNatO8 ‚Ñö where
  {-# INLINE natO8 #-}
  natO8 q
    | denom q ‚â¢ 1 = None
    | otherwise = natO8 $ numer q
instance ToIntO ‚Ñö where
  {-# INLINE intO #-}
  intO q
    | denom q ‚â¢ 1 = None
    | otherwise = Some $ numer q
instance ToIntO64 ‚Ñö where
  {-# INLINE intO64 #-}
  intO64 q
    | denom q ‚â¢ 1 = None
    | otherwise = intO64 $ numer q
instance ToIntO32 ‚Ñö where
  {-# INLINE intO32 #-}
  intO32 q
    | denom q ‚â¢ 1 = None
    | otherwise = intO32 $ numer q
instance ToIntO16 ‚Ñö where
  {-# INLINE intO16 #-}
  intO16 q
    | denom q ‚â¢ 1 = None
    | otherwise = intO16 $ numer q
instance ToIntO8 ‚Ñö where
  {-# INLINE intO8 #-}
  intO8 q
    | denom q ‚â¢ 1 = None
    | otherwise = intO8 $ numer q

instance ToRational ‚Ñö where {-# INLINE rat #-} ; rat = id
instance ToRational·¥æO ‚Ñö where 
  {-# INLINE rat·¥æO #-}
  rat·¥æO q
    | numer q < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromRational q 

instance ToDouble ‚Ñö where {-# INLINE dbl #-} ; dbl = HS.fromRational
instance ToDouble·¥æO ‚Ñö where
  {-# INLINE dbl·¥æO #-}
  dbl·¥æO q
    | numer q < HS.fromIntegral 0 = None
    | otherwise = Some $ ùîª·¥æ $ HS.fromRational q

instance ToNumber ‚Ñö where {-# INLINE num #-} ; num = Rational
instance ToNumber·¥æO ‚Ñö where 
  {-# INLINE num·¥æO #-}
  num·¥æO q = case rat·¥æO q of
    None ‚Üí None
    Some q·¥æ ‚Üí Some $ Rational·¥æ q·¥æ

-- ‚Ñö·¥æ --

instance Zero   ‚Ñö·¥æ where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ‚Ñö·¥æ where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ‚Ñö·¥æ where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ‚Ñö·¥æ where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ‚Ñö·¥æ where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance Divide ‚Ñö·¥æ where {-# INLINE (/)  #-} ; (/)  = (HS./)
instance Pon    ‚Ñö·¥æ where {-# INLINE (^^) #-} ; (^^) = (HS.^)
                                               
instance Bot    ‚Ñö·¥æ where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ‚Ñö·¥æ where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Meet   ‚Ñö·¥æ where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ‚Ñö·¥æ where {-# INLINE null #-} ; null = zero
instance Append ‚Ñö·¥æ where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñö·¥æ
instance Multiplicative ‚Ñö·¥æ
instance JoinLattice    ‚Ñö·¥æ
instance Monoid         ‚Ñö·¥æ

instance ToNatO ‚Ñö·¥æ where
  {-# INLINE natO #-}
  natO q
    | denom·¥æ q ‚â¢ HS.fromIntegral 1 = None
    | otherwise = Some $ numer·¥æ q
instance ToNatO64 ‚Ñö·¥æ where
  {-# INLINE natO64 #-}
  natO64 q
    | denom·¥æ q ‚â¢ HS.fromIntegral 1 = None
    | otherwise = natO64 $ numer·¥æ q
instance ToNatO32 ‚Ñö·¥æ where
  {-# INLINE natO32 #-}
  natO32 q
    | denom·¥æ q ‚â¢ HS.fromIntegral 1 = None
    | otherwise = natO32 $ numer·¥æ q
instance ToNatO16 ‚Ñö·¥æ where
  {-# INLINE natO16 #-}
  natO16 q
    | denom·¥æ q ‚â¢ HS.fromIntegral 1 = None
    | otherwise = natO16 $ numer·¥æ q
instance ToNatO8 ‚Ñö·¥æ where
  {-# INLINE natO8 #-}
  natO8 q
    | denom·¥æ q ‚â¢ HS.fromIntegral 1 = None
    | otherwise = natO8 $ numer·¥æ q
instance ToIntO ‚Ñö·¥æ where
  {-# INLINE intO #-}
  intO q
    | denom·¥æ q ‚â¢ HS.fromIntegral 1 = None
    | otherwise = Some $ int $ numer·¥æ q
instance ToIntO64 ‚Ñö·¥æ where
  {-# INLINE intO64 #-}
  intO64 q
    | denom·¥æ q ‚â¢ HS.fromIntegral 1 = None
    | otherwise = intO64 $ numer·¥æ q
instance ToIntO32 ‚Ñö·¥æ where
  {-# INLINE intO32 #-}
  intO32 q
    | denom·¥æ q ‚â¢ HS.fromIntegral 1 = None
    | otherwise = intO32 $ numer·¥æ q
instance ToIntO16 ‚Ñö·¥æ where
  {-# INLINE intO16 #-}
  intO16 q
    | denom·¥æ q ‚â¢ HS.fromIntegral 1 = None
    | otherwise = intO16 $ numer·¥æ q
instance ToIntO8 ‚Ñö·¥æ where
  {-# INLINE intO8 #-}
  intO8 q
    | denom·¥æ q ‚â¢ HS.fromIntegral 1 = None
    | otherwise = intO8 $ numer·¥æ q

instance ToRational  ‚Ñö·¥æ where {-# INLINE rat  #-} ; rat  = HS.toRational
instance ToRational·¥æ ‚Ñö·¥æ where {-# INLINE rat·¥æ #-} ; rat·¥æ = id
instance ToDouble    ‚Ñö·¥æ where {-# INLINE dbl  #-} ; dbl  = HS.fromRational ‚àò rat
instance ToDouble·¥æ   ‚Ñö·¥æ where {-# INLINE dbl·¥æ #-} ; dbl·¥æ = ùîª·¥æ ‚àò dbl
instance ToNumber    ‚Ñö·¥æ where {-# INLINE num  #-} ; num  = Rational ‚àò rat
instance ToNumber·¥æ   ‚Ñö·¥æ where {-# INLINE num·¥æ #-} ; num·¥æ = Rational·¥æ

-- ùîª --

instance Zero   ùîª where {-# INLINE zero #-} ; zero = 0.0
instance Plus   ùîª where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ùîª where {-# INLINE (-)  #-} ; (-)  = (HS.-)
instance One    ùîª where {-# INLINE one  #-} ; one  = 1.0
instance Times  ùîª where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance Divide ùîª where {-# INLINE (/)  #-} ; (/)  = (HS./)
instance Pon    ùîª where {-# INLINE (^^) #-} ; (^^) = (HS.^)
instance Pow    ùîª where {-# INLINE (^)  #-} ; (^)  = (HS.**)
instance Root   ùîª where {-# INLINE root #-} ; root = HS.sqrt
instance Log    ùîª where {-# INLINE log  #-} ; log  = HS.log
instance Efn    ùîª where {-# INLINE efn  #-} ; efn  = HS.exp
instance Sin    ùîª where {-# INLINE sin  #-} ; sin  = HS.sin
instance Cos    ùîª where {-# INLINE cos  #-} ; cos  = HS.cos

instance Bot    ùîª where {-# INLINE bot  #-} ; bot  = neg 1.0/0.0
instance Join   ùîª where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Top    ùîª where {-# INLINE top  #-} ; top  = 1.0/0.0
instance Meet   ùîª where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ùîª where {-# INLINE null #-} ; null = zero
instance Append ùîª where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ùîª
instance Multiplicative ùîª
instance JoinLattice    ùîª
instance MeetLattice    ùîª
instance Monoid         ùîª

instance ToNatO ùîª where
  {-# INLINE natO #-}
  natO d =
    let i = truncate d
    in case d ‚â° dbl i of
      True ‚Üí natO i
      False ‚Üí None
instance ToNatO64 ùîª where
  {-# INLINE natO64 #-}
  natO64 d =
    let i = truncate d
    in case d ‚â° dbl i of
      True ‚Üí natO64 i
      False ‚Üí None
instance ToNatO32 ùîª where
  {-# INLINE natO32 #-}
  natO32 d =
    let i = truncate d
    in case d ‚â° dbl i of
      True ‚Üí natO32 i
      False ‚Üí None
instance ToNatO16 ùîª where
  {-# INLINE natO16 #-}
  natO16 d =
    let i = truncate d
    in case d ‚â° dbl i of
      True ‚Üí natO16 i
      False ‚Üí None
instance ToNatO8 ùîª where
  {-# INLINE natO8 #-}
  natO8 d =
    let i = truncate d
    in case d ‚â° dbl i of
      True ‚Üí natO8 i
      False ‚Üí None
instance ToIntO ùîª where
  {-# INLINE intO #-}
  intO d =
    let i = truncate d
    in case d ‚â° dbl i of
      True ‚Üí Some i
      False ‚Üí None
instance ToIntO64 ùîª where
  {-# INLINE intO64 #-}
  intO64 d =
    let i = truncate d
    in case d ‚â° dbl i of
      True ‚Üí intO64 i
      False ‚Üí None
instance ToIntO32 ùîª where
  {-# INLINE intO32 #-}
  intO32 d =
    let i = truncate d
    in case d ‚â° dbl i of
      True ‚Üí intO32 i
      False ‚Üí None
instance ToIntO16 ùîª where
  {-# INLINE intO16 #-}
  intO16 d =
    let i = truncate d
    in case d ‚â° dbl i of
      True ‚Üí intO16 i
      False ‚Üí None
instance ToIntO8 ùîª where
  {-# INLINE intO8 #-}
  intO8 d =
    let i = truncate d
    in case d ‚â° dbl i of
      True ‚Üí intO8 i
      False ‚Üí None

instance ToRational ùîª where {-# INLINE rat #-} ; rat = HS.realToFrac
instance ToRational·¥æO ùîª where 
  {-# INLINE rat·¥æO #-}
  rat·¥æO d
    | d < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.realToFrac d

instance ToDouble ùîª where {-# INLINE dbl #-} ; dbl = id
instance ToDouble·¥æO ùîª where 
  {-# INLINE dbl·¥æO #-}
  dbl·¥æO d 
    | d < HS.fromIntegral 0 = None
    | otherwise = Some $ ùîª·¥æ d

instance ToNumber ùîª where {-# INLINE num #-} ; num = Double
instance ToNumber·¥æO ùîª where
  {-# INLINE num·¥æO #-}
  num·¥æO d = case dbl·¥æO d of
    None ‚Üí None
    Some d·¥æ ‚Üí Some $ Double·¥æ d·¥æ

-- ùîª·¥æ --

minusùîª·¥æ ‚à∑ ùîª·¥æ ‚Üí ùîª·¥æ ‚Üí ùîª·¥æ
minusùîª·¥æ p‚ÇÅ p‚ÇÇ
  | p‚ÇÅ < p‚ÇÇ = error "ùîª·¥æ: subtraction: LHS is smaller than RHS"
  | otherwise = p‚ÇÅ HS.- p‚ÇÇ

instance Zero   ùîª·¥æ where {-# INLINE zero #-} ; zero = HS.fromIntegral 0
instance Plus   ùîª·¥æ where {-# INLINE (+)  #-} ; (+)  = (HS.+)
instance Minus  ùîª·¥æ where {-# INLINE (-)  #-} ; (-)  = minusùîª·¥æ
instance One    ùîª·¥æ where {-# INLINE one  #-} ; one  = HS.fromIntegral 1
instance Times  ùîª·¥æ where {-# INLINE (√ó)  #-} ; (√ó)  = (HS.*)
instance Divide ùîª·¥æ where {-# INLINE (/)  #-} ; (/)  = (HS./)
instance Pon    ùîª·¥æ where {-# INLINE (^^) #-} ; (^^) = (HS.^)
instance Pow    ùîª·¥æ where {-# INLINE (^)  #-} ; (^)  = (HS.**)
instance Root   ùîª·¥æ where {-# INLINE root #-} ; root = HS.sqrt
instance Log    ùîª·¥æ where {-# INLINE log  #-} ; log  = HS.log
instance Efn    ùîª·¥æ where {-# INLINE efn  #-} ; efn  = HS.exp
instance Sin    ùîª·¥æ where {-# INLINE sin  #-} ; sin  = HS.sin
instance Cos    ùîª·¥æ where {-# INLINE cos  #-} ; cos  = HS.cos
                                               
instance Bot    ùîª·¥æ where {-# INLINE bot  #-} ; bot  = HS.fromIntegral 0
instance Join   ùîª·¥æ where {-# INLINE (‚äî)  #-} ; (‚äî)  = (‚©è)
instance Top    ùîª·¥æ where {-# INLINE top  #-} ; top  = HS.realToFrac $ 1.0 / 0.0
instance Meet   ùîª·¥æ where {-# INLINE (‚äì)  #-} ; (‚äì)  = (‚©é)
instance Null   ùîª·¥æ where {-# INLINE null #-} ; null = zero
instance Append ùîª·¥æ where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ùîª·¥æ
instance Multiplicative ùîª·¥æ
instance JoinLattice    ùîª·¥æ
instance MeetLattice    ùîª·¥æ
instance Monoid         ùîª·¥æ

instance ToNatO ùîª·¥æ where
  {-# INLINE natO #-}
  natO d =
    let n = truncate·¥æ d
    in case d ‚â° dbl·¥æ n of
      True ‚Üí Some n
      False ‚Üí None
instance ToNatO64 ùîª·¥æ where
  {-# INLINE natO64 #-}
  natO64 d =
    let n = truncate·¥æ d
    in case d ‚â° dbl·¥æ n of
      True ‚Üí natO64 n
      False ‚Üí None
instance ToNatO32 ùîª·¥æ where
  {-# INLINE natO32 #-}
  natO32 d =
    let n = truncate·¥æ d
    in case d ‚â° dbl·¥æ n of
      True ‚Üí natO32 n
      False ‚Üí None
instance ToNatO16 ùîª·¥æ where
  {-# INLINE natO16 #-}
  natO16 d =
    let n = truncate·¥æ d
    in case d ‚â° dbl·¥æ n of
      True ‚Üí natO16 n
      False ‚Üí None
instance ToNatO8 ùîª·¥æ where
  {-# INLINE natO8 #-}
  natO8 d =
    let n = truncate·¥æ d
    in case d ‚â° dbl·¥æ n of
      True ‚Üí natO8 n
      False ‚Üí None
instance ToIntO ùîª·¥æ where
  {-# INLINE intO #-}
  intO d =
    let n = truncate·¥æ d
    in case d ‚â° dbl·¥æ n of
      True ‚Üí Some $ int n
      False ‚Üí None
instance ToIntO64 ùîª·¥æ where
  {-# INLINE intO64 #-}
  intO64 d =
    let n = truncate·¥æ d
    in case d ‚â° dbl·¥æ n of
      True ‚Üí intO64 n
      False ‚Üí None
instance ToIntO32 ùîª·¥æ where
  {-# INLINE intO32 #-}
  intO32 d =
    let n = truncate·¥æ d
    in case d ‚â° dbl·¥æ n of
      True ‚Üí intO32 n
      False ‚Üí None
instance ToIntO16 ùîª·¥æ where
  {-# INLINE intO16 #-}
  intO16 d =
    let n = truncate·¥æ d
    in case d ‚â° dbl·¥æ n of
      True ‚Üí intO16 n
      False ‚Üí None
instance ToIntO8 ùîª·¥æ where
  {-# INLINE intO8 #-}
  intO8 d =
    let n = truncate·¥æ d
    in case d ‚â° dbl·¥æ n of
      True ‚Üí intO8 n
      False ‚Üí None

instance ToRational ùîª·¥æ where {-# INLINE rat #-} ; rat = HS.toRational
instance ToRational·¥æO ùîª·¥æ where 
  {-# INLINE rat·¥æO #-}
  rat·¥æO d
    | d < HS.fromIntegral 0 = None
    | otherwise = Some $ HS.fromRational $ HS.toRational d

instance ToDouble  ùîª·¥æ where {-# INLINE dbl  #-} ; dbl  = unùîª·¥æ
instance ToDouble·¥æ ùîª·¥æ where {-# INLINE dbl·¥æ #-} ; dbl·¥æ = id
instance ToNumber  ùîª·¥æ where {-# INLINE num  #-} ; num  = Double ‚àò dbl
instance ToNumber·¥æ ùîª·¥æ where {-# INLINE num·¥æ #-} ; num·¥æ = Double·¥æ

-- ‚Ñù and ‚Ñù‚Å∫ --

{-# INLINE numberBOp #-}
numberBOp ‚à∑ (‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñù) ‚Üí (‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñù) ‚Üí (ùîª ‚Üí ùîª ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
numberBOp  oZ _oQ _oD (Integer  i‚ÇÅ) (Integer  i‚ÇÇ) = oZ i‚ÇÅ i‚ÇÇ
numberBOp _oZ  oQ _oD (Rational q‚ÇÅ) (Rational q‚ÇÇ) = oQ q‚ÇÅ q‚ÇÇ
numberBOp _oZ _oQ  oD (Double   d‚ÇÅ) (Double   d‚ÇÇ) = oD d‚ÇÅ d‚ÇÇ
numberBOp _oZ  oQ _oD (Integer  i‚ÇÅ) (Rational q‚ÇÇ) = oQ (rat i‚ÇÅ) q‚ÇÇ
numberBOp _oZ  oQ _oD (Rational q‚ÇÅ) (Integer  i‚ÇÇ) = oQ q‚ÇÅ (rat i‚ÇÇ)
numberBOp _oZ _oQ  oD (Integer  i‚ÇÅ) (Double   d‚ÇÇ) = oD (dbl i‚ÇÅ) d‚ÇÇ
numberBOp _oZ _oQ  oD (Double   d‚ÇÅ) (Integer  i‚ÇÇ) = oD d‚ÇÅ (dbl i‚ÇÇ)
numberBOp _oZ _oQ  oD (Rational q‚ÇÅ) (Double   d‚ÇÇ) = oD (dbl q‚ÇÅ) d‚ÇÇ
numberBOp _oZ _oQ  oD (Double   d‚ÇÅ) (Rational q‚ÇÇ) = oD d‚ÇÅ (dbl q‚ÇÇ)

{-# INLINE numberBOp·¥æ #-}
numberBOp·¥æ ‚à∑ (‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñù·¥æ) ‚Üí (‚Ñö·¥æ ‚Üí ‚Ñö·¥æ ‚Üí ‚Ñù·¥æ) ‚Üí (ùîª·¥æ ‚Üí ùîª·¥æ ‚Üí ‚Ñù·¥æ) ‚Üí ‚Ñù·¥æ ‚Üí ‚Ñù·¥æ ‚Üí ‚Ñù·¥æ
numberBOp·¥æ  oZ _oQ _oD (Natural   i‚ÇÅ) (Natural   i‚ÇÇ) = oZ i‚ÇÅ i‚ÇÇ
numberBOp·¥æ _oZ  oQ _oD (Rational·¥æ q‚ÇÅ) (Rational·¥æ q‚ÇÇ) = oQ q‚ÇÅ q‚ÇÇ
numberBOp·¥æ _oZ _oQ  oD (Double·¥æ   d‚ÇÅ) (Double·¥æ   d‚ÇÇ) = oD d‚ÇÅ d‚ÇÇ
numberBOp·¥æ _oZ  oQ _oD (Natural   i‚ÇÅ) (Rational·¥æ q‚ÇÇ) = oQ (rat·¥æ i‚ÇÅ) q‚ÇÇ
numberBOp·¥æ _oZ  oQ _oD (Rational·¥æ q‚ÇÅ) (Natural   i‚ÇÇ) = oQ q‚ÇÅ (rat·¥æ i‚ÇÇ)
numberBOp·¥æ _oZ _oQ  oD (Natural   i‚ÇÅ) (Double·¥æ   d‚ÇÇ) = oD (dbl·¥æ i‚ÇÅ) d‚ÇÇ
numberBOp·¥æ _oZ _oQ  oD (Double·¥æ   d‚ÇÅ) (Natural   i‚ÇÇ) = oD d‚ÇÅ (dbl·¥æ i‚ÇÇ)
numberBOp·¥æ _oZ _oQ  oD (Rational·¥æ q‚ÇÅ) (Double·¥æ   d‚ÇÇ) = oD (dbl·¥æ q‚ÇÅ) d‚ÇÇ
numberBOp·¥æ _oZ _oQ  oD (Double·¥æ   d‚ÇÅ) (Rational·¥æ q‚ÇÇ) = oD d‚ÇÅ (dbl·¥æ q‚ÇÇ)

instance Zero   ‚Ñù where {-# INLINE zero #-} ; zero = Integer zero
instance Plus   ‚Ñù where {-# INLINE (+)  #-} ; (+)  = numberBOp (Integer ‚àò‚àò (+)) (Rational ‚àò‚àò (+)) $ Double ‚àò‚àò (+)
instance Minus  ‚Ñù where {-# INLINE (-)  #-} ; (-)  = numberBOp (Integer ‚àò‚àò (-)) (Rational ‚àò‚àò (-)) $ Double ‚àò‚àò (-)
instance One    ‚Ñù where {-# INLINE one  #-} ; one  = Integer one
instance Times  ‚Ñù where {-# INLINE (√ó)  #-} ; (√ó)  = numberBOp (Integer ‚àò‚àò (√ó)) (Rational ‚àò‚àò (√ó)) $ Double ‚àò‚àò (√ó)
instance Divide ‚Ñù where {-# INLINE (/)  #-} ; (/)  = numberBOp (\ i‚ÇÅ i‚ÇÇ ‚Üí Rational $ rat i‚ÇÅ / rat i‚ÇÇ) (Rational ‚àò‚àò (/)) $ Double ‚àò‚àò (/)
instance Pon ‚Ñù where 
  {-# INLINE (^^) #-}
  Integer  m ^^ n = Integer  $ m ^^ n
  Rational q ^^ n = Rational $ q ^^ n
  Double   d ^^ n = Double   $ d ^^ n
instance Pow ‚Ñù where 
  {-# INLINE (^) #-} 
  (^) = numberBOp (\ i‚ÇÅ i‚ÇÇ ‚Üí Double $ dbl i‚ÇÅ ^ dbl i‚ÇÇ) (\ q‚ÇÅ q‚ÇÇ ‚Üí Double $ dbl q‚ÇÅ ^ dbl q‚ÇÇ) $ Double ‚àò‚àò (^)
instance Root ‚Ñù where
  {-# INLINE root #-}
  root (Integer  i) = Double $ root $ dbl i
  root (Rational q) = Double $ root $ dbl q
  root (Double   d) = Double $ root d
instance Log ‚Ñù where 
  {-# INLINE log #-}
  log (Integer  i) = Double $ log $ dbl i
  log (Rational q) = Double $ log $ dbl q
  log (Double   d) = Double $ log d
instance Efn ‚Ñù where
  {-# INLINE efn #-}
  efn (Integer  i) = Double $ efn $ dbl i
  efn (Rational q) = Double $ efn $ dbl q
  efn (Double   d) = Double $ efn d
instance Sin ‚Ñù where
  {-# INLINE sin #-}
  sin (Integer  i) = Double $ sin $ dbl i
  sin (Rational q) = Double $ sin $ dbl q
  sin (Double   d) = Double $ sin d
instance Cos ‚Ñù where
  {-# INLINE cos #-}
  cos (Integer  i) = Double $ cos $ dbl i
  cos (Rational q) = Double $ cos $ dbl q
  cos (Double   d) = Double $ cos d

instance Bot    ‚Ñù where {-# INLINE bot  #-} ; bot  = zero
instance Join   ‚Ñù where {-# INLINE (‚äî)  #-} ; (‚äî)  = numberBOp (Integer ‚àò‚àò (‚äî)) (Rational ‚àò‚àò (‚äî)) (Double ‚àò‚àò (‚äî))
instance Meet   ‚Ñù where {-# INLINE (‚äì)  #-} ; (‚äì)  = numberBOp (Integer ‚àò‚àò (‚äì)) (Rational ‚àò‚àò (‚äì)) (Double ‚àò‚àò (‚äì))
instance Null   ‚Ñù where {-# INLINE null #-} ; null = zero
instance Append ‚Ñù where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñù
instance Multiplicative ‚Ñù
instance JoinLattice    ‚Ñù
instance Monoid         ‚Ñù

instance ToNatO ‚Ñù where
  {-# INLINE natO #-}
  natO (Integer  i) = natO i
  natO (Rational q) = natO q
  natO (Double   d) = natO d
instance ToNatO64 ‚Ñù where
  {-# INLINE natO64 #-}
  natO64 (Integer  i) = natO64 i
  natO64 (Rational q) = natO64 q
  natO64 (Double   d) = natO64 d
instance ToNatO32 ‚Ñù where
  {-# INLINE natO32 #-}
  natO32 (Integer  i) = natO32 i
  natO32 (Rational q) = natO32 q
  natO32 (Double   d) = natO32 d
instance ToNatO16 ‚Ñù where
  {-# INLINE natO16 #-}
  natO16 (Integer  i) = natO16 i
  natO16 (Rational q) = natO16 q
  natO16 (Double   d) = natO16 d
instance ToNatO8 ‚Ñù where
  {-# INLINE natO8 #-}
  natO8 (Integer  i) = natO8 i
  natO8 (Rational q) = natO8 q
  natO8 (Double   d) = natO8 d
instance ToIntO ‚Ñù where
  {-# INLINE intO #-}
  intO (Integer  i) = Some i
  intO (Rational q) = intO q
  intO (Double   d) = intO d
instance ToIntO64 ‚Ñù where
  {-# INLINE intO64 #-}
  intO64 (Integer  i) = intO64 i
  intO64 (Rational q) = intO64 q
  intO64 (Double   d) = intO64 d
instance ToIntO32 ‚Ñù where
  {-# INLINE intO32 #-}
  intO32 (Integer  i) = intO32 i
  intO32 (Rational q) = intO32 q
  intO32 (Double   d) = intO32 d
instance ToIntO16 ‚Ñù where
  {-# INLINE intO16 #-}
  intO16 (Integer  i) = intO16 i
  intO16 (Rational q) = intO16 q
  intO16 (Double   d) = intO16 d
instance ToIntO8 ‚Ñù where
  {-# INLINE intO8 #-}
  intO8 (Integer  i) = intO8 i
  intO8 (Rational q) = intO8 q
  intO8 (Double   d) = intO8 d
instance ToRational ‚Ñù where
  {-# INLINE rat #-}
  rat (Integer  i) = rat i
  rat (Rational q) = q
  rat (Double   d) = rat d
instance ToRational·¥æO ‚Ñù where
  {-# INLINE rat·¥æO #-}
  rat·¥æO (Integer  i) = rat·¥æO i
  rat·¥æO (Rational q) = rat·¥æO q
  rat·¥æO (Double   d) = rat·¥æO d
instance ToDouble ‚Ñù where
  {-# INLINE dbl #-}
  dbl (Integer  i) = dbl i
  dbl (Rational q) = dbl q
  dbl (Double   d) = d
instance ToDouble·¥æO ‚Ñù where
  {-# INLINE dbl·¥æO #-}
  dbl·¥æO (Integer  i) = dbl·¥æO i
  dbl·¥æO (Rational q) = dbl·¥æO q
  dbl·¥æO (Double   d) = dbl·¥æO d

instance Zero   ‚Ñù·¥æ where {-# INLINE zero #-} ; zero = Natural zero
instance Plus   ‚Ñù·¥æ where {-# INLINE (+)  #-} ; (+)  = numberBOp·¥æ (Natural ‚àò‚àò (+)) (Rational·¥æ ‚àò‚àò (+)) (Double·¥æ ‚àò‚àò (+))
instance Minus  ‚Ñù·¥æ where {-# INLINE (-)  #-} ; (-)  = numberBOp·¥æ (Natural ‚àò‚àò (-)) (Rational·¥æ ‚àò‚àò (-)) (Double·¥æ ‚àò‚àò (-))
instance One    ‚Ñù·¥æ where {-# INLINE one  #-} ; one  = Natural one
instance Times  ‚Ñù·¥æ where {-# INLINE (√ó)  #-} ; (√ó)  = numberBOp·¥æ (Natural ‚àò‚àò (√ó)) (Rational·¥æ ‚àò‚àò (√ó)) (Double·¥æ ‚àò‚àò (√ó))
instance Divide ‚Ñù·¥æ where {-# INLINE (/)  #-} ; (/)  = numberBOp·¥æ (\ n‚ÇÅ n‚ÇÇ ‚Üí Rational·¥æ $ rat·¥æ n‚ÇÅ / rat·¥æ n‚ÇÇ) (Rational·¥æ ‚àò‚àò (/)) (Double·¥æ ‚àò‚àò (/))
instance Pon ‚Ñù·¥æ where 
  {-# INLINE (^^) #-}
  Natural   m ^^ n = Natural   $ m ^^ n
  Rational·¥æ q ^^ n = Rational·¥æ $ q ^^ n
  Double·¥æ   d ^^ n = Double·¥æ   $ d ^^ n
instance Pow ‚Ñù·¥æ where 
  {-# INLINE (^) #-}
  (^) = numberBOp·¥æ (Natural ‚àò‚àò (^)) (\ q·¥æ‚ÇÅ q·¥æ‚ÇÇ ‚Üí Double·¥æ $ dbl·¥æ q·¥æ‚ÇÅ ^ dbl·¥æ q·¥æ‚ÇÇ) (Double·¥æ ‚àò‚àò (^))
instance Root ‚Ñù·¥æ where
  {-# INLINE root #-}
  root (Natural   n) = Double·¥æ $ root $ dbl·¥æ n
  root (Rational·¥æ q) = Double·¥æ $ root $ dbl·¥æ q
  root (Double·¥æ   d) = Double·¥æ $ root d
instance Log ‚Ñù·¥æ where 
  {-# INLINE log #-}
  log (Natural   n) = Double·¥æ $ log $ dbl·¥æ n
  log (Rational·¥æ q) = Double·¥æ $ log $ dbl·¥æ q
  log (Double·¥æ   d) = Double·¥æ $ log d

instance Bot    ‚Ñù·¥æ where {-# INLINE bot  #-} ; bot  = zero
instance Join   ‚Ñù·¥æ where {-# INLINE (‚äî)  #-} ; (‚äî)  = numberBOp·¥æ (Natural ‚àò‚àò (‚äî)) (Rational·¥æ ‚àò‚àò (‚äî)) (Double·¥æ ‚àò‚àò (‚äî))
instance Meet   ‚Ñù·¥æ where {-# INLINE (‚äì)  #-} ; (‚äì)  = numberBOp·¥æ (Natural ‚àò‚àò (‚äì)) (Rational·¥æ ‚àò‚àò (‚äì)) (Double·¥æ ‚àò‚àò (‚äì))
instance Null   ‚Ñù·¥æ where {-# INLINE null #-} ; null = zero
instance Append ‚Ñù·¥æ where {-# INLINE (‚ß∫)  #-} ; (‚ß∫)  = (+)

instance Additive       ‚Ñù·¥æ
instance Multiplicative ‚Ñù·¥æ
instance JoinLattice    ‚Ñù·¥æ
instance Monoid         ‚Ñù·¥æ

instance ToNatO ‚Ñù·¥æ where
  {-# INLINE natO #-}
  natO (Natural   n)   = Some n
  natO (Rational·¥æ q) = natO q
  natO (Double·¥æ   d)   = natO d
instance ToNatO64 ‚Ñù·¥æ where
  {-# INLINE natO64 #-}
  natO64 (Natural   n) = natO64 n
  natO64 (Rational·¥æ q) = natO64 q
  natO64 (Double·¥æ   d) = natO64 d
instance ToNatO32 ‚Ñù·¥æ where
  {-# INLINE natO32 #-}
  natO32 (Natural   n) = natO32 n
  natO32 (Rational·¥æ q) = natO32 q
  natO32 (Double·¥æ   d) = natO32 d
instance ToNatO16 ‚Ñù·¥æ where
  {-# INLINE natO16 #-}
  natO16 (Natural   n) = natO16 n
  natO16 (Rational·¥æ q) = natO16 q
  natO16 (Double·¥æ   d) = natO16 d
instance ToNatO8 ‚Ñù·¥æ where
  {-# INLINE natO8 #-}
  natO8 (Natural   n) = natO8 n
  natO8 (Rational·¥æ q) = natO8 q
  natO8 (Double·¥æ   d) = natO8 d
instance ToIntO ‚Ñù·¥æ where
  {-# INLINE intO #-}
  intO (Natural   n) = Some $ int n
  intO (Rational·¥æ q) = intO q
  intO (Double·¥æ   d) = intO d
instance ToIntO64 ‚Ñù·¥æ where
  {-# INLINE intO64 #-}
  intO64 (Natural   n) = intO64 n
  intO64 (Rational·¥æ q) = intO64 q
  intO64 (Double·¥æ   d) = intO64 d
instance ToIntO32 ‚Ñù·¥æ where
  {-# INLINE intO32 #-}
  intO32 (Natural   n) = intO32 n
  intO32 (Rational·¥æ q) = intO32 q
  intO32 (Double·¥æ   d) = intO32 d
instance ToIntO16 ‚Ñù·¥æ where
  {-# INLINE intO16 #-}
  intO16 (Natural   n) = intO16 n
  intO16 (Rational·¥æ q) = intO16 q
  intO16 (Double·¥æ   d) = intO16 d
instance ToIntO8 ‚Ñù·¥æ where
  {-# INLINE intO8 #-}
  intO8 (Natural   n) = intO8 n
  intO8 (Rational·¥æ q) = intO8 q
  intO8 (Double·¥æ   d) = intO8 d
instance ToRational ‚Ñù·¥æ where
  {-# INLINE rat #-}
  rat (Natural   n) = rat n
  rat (Rational·¥æ q) = rat q
  rat (Double·¥æ   d) = rat d
instance ToRational·¥æO ‚Ñù·¥æ where
  {-# INLINE rat·¥æO #-}
  rat·¥æO (Natural   n) = Some $ rat·¥æ n
  rat·¥æO (Rational·¥æ q) = Some q
  rat·¥æO (Double·¥æ   d) = rat·¥æO d
instance ToDouble ‚Ñù·¥æ where
  {-# INLINE dbl #-}
  dbl (Natural   n) = dbl n
  dbl (Rational·¥æ q) = dbl q
  dbl (Double·¥æ   d) = dbl d
instance ToDouble·¥æ ‚Ñù·¥æ where
  {-# INLINE dbl·¥æ #-}
  dbl·¥æ (Natural   n) = dbl·¥æ n
  dbl·¥æ (Rational·¥æ q) = dbl·¥æ q
  dbl·¥æ (Double·¥æ   d) = d
