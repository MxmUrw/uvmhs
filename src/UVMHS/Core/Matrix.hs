{-# OPTIONS_GHC -rtsopts -threaded -fno-liberate-case -funfolding-use-threshold1000 -funfolding-keeness-factor1000 -optlo-O3 #-}
module UVMHS.Core.Matrix where

import UVMHS.Init
import UVMHS.Core.Classes
import UVMHS.Core.Data
import UVMHS.Core.Pointed
import UVMHS.Core.IO

import qualified Data.Array.Repa as Repa
import qualified Data.Array.Repa.Repr.Vector as Repa
import qualified Data.Array.Repa.Repr.Unboxed as Repa
import qualified Data.Array.Repa.Eval as Repa
import qualified Prelude as HS
import qualified Data.Proxy as HS
import qualified Data.Functor.Identity as HS
import qualified Data.Type.Equality as HS

import qualified GHC.TypeLits as HS

-- type lits --

type T‚Ñï = HS.Nat
type Tùïä = HS.Symbol

type (m ‚à∑ T‚Ñï) +  (n ‚à∑ T‚Ñï) = m HS.+ n
type (m ‚à∑ T‚Ñï) √ó  (n ‚à∑ T‚Ñï) = m HS.* n
type (m ‚à∑ T‚Ñï) ^  (n ‚à∑ T‚Ñï) = m HS.^ n
type (m ‚à∑ T‚Ñï) -  (n ‚à∑ T‚Ñï) = m HS.- n
type (m ‚à∑ T‚Ñï) /  (n ‚à∑ T‚Ñï) = m `HS.Div` n
type (m ‚à∑ T‚Ñï) %  (n ‚à∑ T‚Ñï) = m `HS.Mod` n
type Log2 (n ‚à∑ T‚Ñï) = HS.Log2 n

type (m ‚à∑ T‚Ñï) ‚ãö? (n ‚à∑ T‚Ñï) = HS.CmpNat m n

type (m ‚à∑ T‚Ñï) <  (n ‚à∑ T‚Ñï) = (m ‚ãö? n) ~ 'LT
type (m ‚à∑ T‚Ñï) ‚â°  (n ‚à∑ T‚Ñï) = (m ‚ãö? n) ~ 'EQ
type (m ‚à∑ T‚Ñï) >  (n ‚à∑ T‚Ñï) = (m ‚ãö? n) ~ 'GT

data (m ‚à∑ T‚Ñï) :<: (n ‚à∑ T‚Ñï) = TRUSTME_LT

newtype S‚Ñï (n ‚à∑ T‚Ñï) = TRUSTME_S‚Ñï { unS‚Ñï ‚à∑ ‚Ñï }
newtype S‚Ñï32 (n ‚à∑ T‚Ñï) = TRUSTME_S‚Ñï32 { unS‚Ñï32 ‚à∑ ‚Ñï32 }
newtype Sùïä (s ‚à∑ Tùïä) = TRUSTME_Sùïä { unSùïä ‚à∑ ùïä }

class (HS.KnownNat n) ‚áí R‚Ñï (n ‚à∑ T‚Ñï) where reify‚Ñï ‚à∑ P n ‚Üí ‚Ñï
class (HS.KnownNat n) ‚áí R‚Ñï32 (n ‚à∑ T‚Ñï) where reify‚Ñï32 ‚à∑ P n ‚Üí ‚Ñï32
class (HS.KnownSymbol s) ‚áí Rùïä (s ‚à∑ Tùïä) where reifyùïä ‚à∑ P s ‚Üí ùïä

instance (HS.KnownNat n) ‚áí R‚Ñï (n ‚à∑ T‚Ñï) where reify‚Ñï P = natŒ© $ HS.natVal @ n P
instance (HS.KnownNat n) ‚áí R‚Ñï32 (n ‚à∑ T‚Ñï) where reify‚Ñï32 P = natŒ©32 $ HS.natVal @ n P
instance (HS.KnownSymbol s) ‚áí Rùïä (s ‚à∑ Tùïä) where reifyùïä P = string $ HS.symbolVal @ s P

compareT‚Ñï ‚à∑ ‚àÄ (a ‚à∑ T‚Ñï) (b ‚à∑ T‚Ñï). (R‚Ñï a,R‚Ñï b) ‚áí ùëÇ (a ‚âü b)
compareT‚Ñï = case HS.sameNat (HS.Proxy @ a) (HS.Proxy @ b) of
  HS.Nothing ‚Üí None
  HS.Just HS.Refl ‚Üí Some Refl

sùïü ‚à∑ ‚àÄ n. (R‚Ñï n) ‚áí S‚Ñï n
sùïü = TRUSTME_S‚Ñï $ reify‚Ñï @ n P

dùïü ‚à∑ ‚Ñï ‚Üí (‚àÄ n. (R‚Ñï n) ‚áí S‚Ñï n ‚Üí a) ‚Üí a
dùïü n f = case HS.someNatVal $ int n of
  HS.Nothing ‚Üí error "impossible"
  HS.Just (HS.SomeNat (HS.Proxy ‚à∑ HS.Proxy n)) ‚Üí f $ TRUSTME_S‚Ñï @ n n

sùïü32 ‚à∑ ‚àÄ n. (R‚Ñï32 n) ‚áí S‚Ñï32 n
sùïü32 = TRUSTME_S‚Ñï32 $ reify‚Ñï32 @ n P

dùïü32 ‚à∑ ‚Ñï32 ‚Üí (‚àÄ n. (R‚Ñï32 n) ‚áí S‚Ñï32 n ‚Üí a) ‚Üí a
dùïü32 n f = case HS.someNatVal $ int n of
  HS.Nothing ‚Üí error "impossible"
  HS.Just (HS.SomeNat (HS.Proxy ‚à∑ HS.Proxy n)) ‚Üí f $ TRUSTME_S‚Ñï32 @ n n

sùï§ ‚à∑ ‚àÄ s. (HS.KnownSymbol s) ‚áí Sùïä s
sùï§ = TRUSTME_Sùïä $ reifyùïä @ s P

dùï§ ‚à∑ ùïä ‚Üí (‚àÄ s. (Rùïä s) ‚áí Sùïä s ‚Üí a) ‚Üí a
dùï§ s f = case HS.someSymbolVal $ chars s of
  HS.SomeSymbol (HS.Proxy ‚à∑ HS.Proxy s) ‚Üí f $ TRUSTME_Sùïä @ s s

infixr 8 :&&

data Sùêø (a ‚à∑ sa ‚Üí ‚òÖ) ‚à∑ [sa] ‚Üí ‚òÖ where
  SNil ‚à∑ Sùêø a '[]
  (:&&) ‚à∑ a x ‚Üí Sùêø a xs ‚Üí Sùêø a (x ': xs)

mapSùêø ‚à∑ ‚àÄ (a ‚à∑ sa ‚Üí ‚òÖ) (b ‚à∑ sa ‚Üí ‚òÖ) (xs ‚à∑ [sa]). (‚àÄ (x ‚à∑ sa). a x ‚Üí b x) ‚Üí Sùêø a xs ‚Üí Sùêø b xs
mapSùêø _ SNil = SNil
mapSùêø f (x :&& xs) = f x :&& mapSùêø f xs

newtype Const (a ‚à∑ ‚òÖ) (b ‚à∑ k) = Const { unConst ‚à∑ a }

type family (xs ‚à∑ [a]) ‚ß∫ (ys ‚à∑ [a]) ‚à∑ [a] where
  '[] ‚ß∫ ys = ys
  (x ': xs) ‚ß∫ ys = x ': (xs ‚ß∫ ys)

-- indices --

data ùïÄ32 (n ‚à∑ T‚Ñï) where
  ùïÄ32 ‚à∑ S‚Ñï32 m ‚Üí m :<: n ‚Üí ùïÄ32 n

unùïÄ32 ‚à∑ ùïÄ32 n ‚Üí ‚Ñï32
unùïÄ32 (ùïÄ32 n _) = unS‚Ñï32 n

sùïö ‚à∑ ‚àÄ m n. (R‚Ñï32 m,m < n) ‚áí P m ‚Üí ùïÄ32 n
sùïö P = ùïÄ32 (sùïü32 @ m) TRUSTME_LT

dùïö ‚à∑ S‚Ñï32 m ‚Üí ‚Ñï32 ‚Üí ùëÇ (ùïÄ32 m)
dùïö m n = case n ‚ãö unS‚Ñï32 m of
  LT ‚Üí dùïü32 n $ \ n' ‚Üí Some $ ùïÄ32 n' TRUSTME_LT
  _ ‚Üí None

-- vectors --

data B·¥ç (m ‚à∑ T‚Ñï) (n ‚à∑ T‚Ñï) a where
  B·¥ç ‚à∑ (R‚Ñï m,R‚Ñï n) 
     ‚áí { rowsB·¥ç ‚à∑ S‚Ñï32 m
       , colsB·¥ç ‚à∑ S‚Ñï32 n
       , dataB·¥ç ‚à∑ Repa.Array Repa.V (Repa.Z Repa.:. HS.Int Repa.:. HS.Int) a
       }
     ‚Üí B·¥ç m n a
data U·¥ç (m ‚à∑ T‚Ñï) (n ‚à∑ T‚Ñï) a where
  U·¥ç ‚à∑ (R‚Ñï m,R‚Ñï n,Repa.Unbox a)
     ‚áí { rowsU·¥ç ‚à∑ S‚Ñï32 m
       , colsU·¥ç ‚à∑ S‚Ñï32 n
       , dataU·¥ç ‚à∑ Repa.Array Repa.U (Repa.Z Repa.:. HS.Int Repa.:. HS.Int) a
       }
     ‚Üí U·¥ç m n a
data V·¥ç (m ‚à∑ T‚Ñï) (n ‚à∑ T‚Ñï) a where
  V·¥ç ‚à∑ (R‚Ñï m,R‚Ñï n)
     ‚áí { rowsV·¥ç ‚à∑ S‚Ñï32 m
       , colsV·¥ç ‚à∑ S‚Ñï32 n
       , dataV·¥ç ‚à∑ Repa.Array Repa.D (Repa.Z Repa.:. HS.Int Repa.:. HS.Int) a
       }
     ‚Üí V·¥ç m n a

infixl 7 ùÑ™
class Matrix t where 
  xrows ‚à∑ t m n a ‚Üí S‚Ñï32 m
  xcols ‚à∑ t m n a ‚Üí S‚Ñï32 n
  (ùÑ™) ‚à∑ t m n a ‚Üí (ùïÄ32 m,ùïÄ32 n) ‚Üí a
  xvirt ‚à∑ t m n a ‚Üí V·¥ç m n a

-- boxed --

indexB·¥ç ‚à∑ ùïÄ32 m ‚Üí ùïÄ32 n ‚Üí B·¥ç m n a ‚Üí a
indexB·¥ç i j xs = dataB·¥ç xs Repa.! (Repa.Z Repa.:. HS.fromIntegral (unùïÄ32 i) Repa.:. HS.fromIntegral (unùïÄ32 j))

virtB·¥ç ‚à∑ B·¥ç m n a ‚Üí V·¥ç m n a
virtB·¥ç (B·¥ç m n xs) = V·¥ç m n $ Repa.delay xs

instance Matrix B·¥ç where 
  xrows = rowsB·¥ç
  xcols = colsB·¥ç
  xs ùÑ™ (i,j) = indexB·¥ç i j xs
  xvirt = virtB·¥ç

-- unboxed --

indexU·¥ç ‚à∑ ùïÄ32 m ‚Üí ùïÄ32 n ‚Üí U·¥ç m n a ‚Üí a
indexU·¥ç i j (U·¥ç _ _ xs) = xs Repa.! (Repa.Z Repa.:. HS.fromIntegral (unùïÄ32 i) Repa.:. HS.fromIntegral (unùïÄ32 j))

virtU·¥ç ‚à∑ U·¥ç m n a ‚Üí V·¥ç m n a
virtU·¥ç (U·¥ç m n xs) = V·¥ç m n $ Repa.delay xs

instance Matrix U·¥ç where 
  xrows = rowsU·¥ç
  xcols = colsU·¥ç
  xs ùÑ™ (i,j) = indexU·¥ç i j xs
  xvirt = virtU·¥ç

-- virtual --

indexV·¥ç ‚à∑ ùïÄ32 m ‚Üí ùïÄ32 n ‚Üí V·¥ç m n a ‚Üí a
indexV·¥ç i j xs = dataV·¥ç xs Repa.! (Repa.Z Repa.:. HS.fromIntegral (unùïÄ32 i) Repa.:. HS.fromIntegral (unùïÄ32 j)) 

instance Matrix V·¥ç where
  xrows = rowsV·¥ç
  xcols = colsV·¥ç
  xs ùÑ™ (i,j) = indexV·¥ç i j xs
  xvirt = id

matrix ‚à∑ (R‚Ñï m,R‚Ñï n) ‚áí S‚Ñï32 m ‚Üí S‚Ñï32 n ‚Üí (ùïÄ32 m ‚Üí ùïÄ32 n ‚Üí a) ‚Üí V·¥ç m n a
matrix m n f = 
  V·¥ç m n $ Repa.fromFunction (Repa.Z Repa.:. HS.fromIntegral (unS‚Ñï32 m) Repa.:. HS.fromIntegral (unS‚Ñï32 n)) $ \ (Repa.Z Repa.:. i Repa.:. j) ‚Üí 
    dùïü32 (HS.fromIntegral i) $ \ i' ‚Üí 
      dùïü32 (HS.fromIntegral j) $ \ j' ‚Üí
        f (ùïÄ32 i' TRUSTME_LT) (ùïÄ32 j' TRUSTME_LT)

xconst ‚à∑ (R‚Ñï m,R‚Ñï n) ‚áí S‚Ñï32 m ‚Üí S‚Ñï32 n ‚Üí a ‚Üí V·¥ç m n a
xconst m n x = matrix m n $ \ _ _ ‚Üí x

xbs ‚à∑ V·¥ç m n a ‚Üí B·¥ç m n a
xbs (V·¥ç m n xs) = B·¥ç m n $ Repa.computeS xs

xbp ‚à∑ V·¥ç m n a ‚Üí B·¥ç m n a
xbp (V·¥ç m n xs) = B·¥ç m n $ HS.runIdentity $ Repa.computeP xs

xus ‚à∑ (Repa.Unbox a) ‚áí V·¥ç m n a ‚Üí U·¥ç m n a
xus (V·¥ç m n xs) = U·¥ç m n $ Repa.computeS xs

xup ‚à∑ (Repa.Unbox a) ‚áí V·¥ç m n a ‚Üí U·¥ç m n a
xup (V·¥ç m n xs) = U·¥ç m n $ HS.runIdentity $ Repa.computeP xs

xiter ‚à∑ V·¥ç m n a ‚Üí ùêº a
xiter xs = iter $ Repa.toList $ dataV·¥ç xs

instance ToIter a (B·¥ç m n a) where iter = iter ‚àò xvirt
instance ToIter a (U·¥ç m n a) where iter = iter ‚àò xvirt
instance ToIter a (V·¥ç m n a) where iter = xiter

-------------
-- DERIVED --
-------------

xtranspose ‚à∑ V·¥ç m n a ‚Üí V·¥ç n m a
xtranspose xs@(V·¥ç _ _ _) = matrix (xcols xs) (xrows xs) $ \ j i ‚Üí xs ùÑ™ (i,j)

xmap ‚à∑ (a ‚Üí b) ‚Üí V·¥ç m n a ‚Üí V·¥ç m n b
xmap f xs@(V·¥ç _ _ _) = matrix (xrows xs) (xcols xs) $ \ i j ‚Üí f $ xs ùÑ™ (i,j)

instance Functor (V·¥ç m n) where map = xmap

xmap2 ‚à∑ (a ‚Üí b ‚Üí c) ‚Üí V·¥ç m n a ‚Üí V·¥ç m n b ‚Üí V·¥ç m n c
xmap2 f xs@(V·¥ç _ _ _) ys@(V·¥ç _ _ _) = matrix (xrows xs) (xcols xs) $ \ i j ‚Üí f (xs ùÑ™ (i,j)) (ys ùÑ™ (i,j))

xmeld ‚à∑ (R‚Ñï n) ‚áí S‚Ñï32 n ‚Üí V·¥ç m 1 (V·¥ç 1 n a) ‚Üí V·¥ç m n a
xmeld n xys@(V·¥ç _ _ _) = matrix (xrows xys) n $ \ i j ‚Üí indexV·¥ç (sùïö @ 0 P) j $ indexV·¥ç i (sùïö @ 0 P) xys

xsplit ‚à∑ V·¥ç m n a ‚Üí V·¥ç m 1 (V·¥ç 1 n a)
xsplit xys@(V·¥ç _ _ _) = matrix (xrows xys) (sùïü32 @ 1) $ \ i _ ‚Üí matrix (sùïü32 @ 1) (colsV·¥ç xys) $ \ _ j ‚Üí indexV·¥ç i j xys

xrow ‚à∑ ùïÄ32 m ‚Üí V·¥ç m n a ‚Üí V·¥ç 1 n a
xrow i xs@(V·¥ç _ _ _) = matrix (sùïü32 @ 1) (colsV·¥ç xs) $ \ _ j ‚Üí indexV·¥ç i j xs

xcol ‚à∑ ùïÄ32 n ‚Üí V·¥ç m n a ‚Üí V·¥ç 1 m a
xcol i xs = xrow i $ xtranspose xs

xproduct ‚à∑ (Additive a,Times a) ‚áí V·¥ç m n a ‚Üí V·¥ç n o a ‚Üí V·¥ç m o a
xproduct xs@(V·¥ç _ _ _) ys@(V·¥ç _ _ _) =
  matrix (xrows xs) (xcols ys) $ \ i k ‚Üí
    let r‚ÇÅ = xrow i xs
        r‚ÇÇ = xcol k ys
    in sum $ iter $ xmap2 (√ó) r‚ÇÅ r‚ÇÇ

xbmapM ‚à∑ (Monad m) ‚áí (a ‚Üí m b) ‚Üí V·¥ç n o a ‚Üí m (B·¥ç n o b)
xbmapM f xs@(V·¥ç _ _ _) = do
  xs' ‚Üê mapM (mapM f) $ xiter2 xs
  return $ xbùêø (list $ map list xs') $ \ (B·¥ç _ _ xs'') ‚Üí B·¥ç (xrows xs) (xcols xs) xs''

xumapM ‚à∑ (Monad m,Repa.Unbox a,Repa.Unbox b) ‚áí (a ‚Üí m b) ‚Üí V·¥ç n o a ‚Üí m (U·¥ç n o b)
xumapM f xs@(V·¥ç _ _ _) = do
  xs' ‚Üê mapM (mapM f) $ xiter2 xs
  return $ xuùêø (list $ map list xs') $ \ (U·¥ç _ _ xs'') ‚Üí U·¥ç (xrows xs) (xcols xs) xs''

xindirect ‚à∑ V·¥ç m n a ‚Üí V·¥ç 1 o (ùïÄ32 m) ‚Üí V·¥ç o n a
xindirect xs@(V·¥ç _ _ _) is@(V·¥ç _ _ _) = matrix (xcols is) (xcols xs) $ \ o n ‚Üí xs ùÑ™ (is ùÑ™ (sùïö @ 0 P,o),n)

xiter2 ‚à∑ V·¥ç m n a ‚Üí ùêº (ùêº a)
xiter2 = map iter ‚àò iter ‚àò xsplit

xlist2 ‚à∑ V·¥ç m n a ‚Üí ùêø (ùêø a)
xlist2 = list ‚àò map list ‚àò xiter2

xbùêø ‚à∑ ùêø (ùêø a) ‚Üí (‚àÄ m n. (R‚Ñï m,R‚Ñï n) ‚áí B·¥ç m n a ‚Üí b) ‚Üí b
xbùêø xs f =
  let uc = joins $ map (natŒ©32 ‚àò count) xs
      lc = meets $ map (AddTop ‚àò natŒ©32 ‚àò count) xs
  in case AddTop uc ‚â° lc of
    True ‚Üí 
      dùïü32 uc $ \ n ‚Üí
      dùïü32 (natŒ©32 $ count xs) $ \ m ‚Üí
        f $ B·¥ç m n $ Repa.fromList (Repa.Z Repa.:. HS.fromIntegral (unS‚Ñï32 m) Repa.:. HS.fromIntegral (unS‚Ñï32 n)) $ tohs $ concat xs
    False ‚Üí error "`xbùêø`: bad input list: input list is either empty (no columns) or has columns of different length"

xuùêø ‚à∑ (Repa.Unbox a) ‚áí ùêø (ùêø a) ‚Üí (‚àÄ m n. (R‚Ñï m,R‚Ñï n) ‚áí U·¥ç m n a ‚Üí b) ‚Üí b
xuùêø xs f =
  let uc = joins $ map (natŒ©32 ‚àò count) xs
      lc = meets $ map (AddTop ‚àò natŒ©32 ‚àò count) xs
  in case AddTop uc ‚â° lc of
    True ‚Üí 
      dùïü32 uc $ \ n ‚Üí
      dùïü32 (natŒ©32 $ count xs) $ \ m ‚Üí
        f $ U·¥ç m n $ Repa.fromList (Repa.Z Repa.:. HS.fromIntegral (unS‚Ñï32 m) Repa.:. HS.fromIntegral (unS‚Ñï32 n)) $ tohs $ concat xs
    False ‚Üí error "`xbùêø`: bad input list: input list is either empty (no columns) or has columns of different length"

testMatrix1 ‚à∑ IO ()
testMatrix1 = do
  let xs = list [list [1,2,3],list [4,5,6],list [7,8,9]]
  shout xs
  xbùêø xs $ \ xs' ‚Üí do
    let ys = xlist2 $ xtranspose $ xvirt xs'
    shout ys
