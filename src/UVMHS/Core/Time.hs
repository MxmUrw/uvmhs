module UVMHS.Core.Time where

import UVMHS.Core.Init
import UVMHS.Core.Classes

import qualified Data.Time.Clock as Time
import qualified Prelude as HS

infixl 5 ‚®∫,‚®π

type Time = Time.UTCTime
type TimeD = Time.NominalDiffTime

secondsTimeD ‚à∑ TimeD ‚Üí ùîª
secondsTimeD = HS.realToFrac

instance Zero TimeD where {zero = HS.fromIntegral 0}
instance Plus TimeD where {(+) = (HS.+)}
instance One TimeD where {one = HS.fromIntegral 1}
instance Times TimeD where {(√ó) = (HS.*)}

instance Additive TimeD
instance Multiplicative TimeD

(‚®∫) ‚à∑ Time ‚Üí Time ‚Üí TimeD
(‚®∫) = Time.diffUTCTime

(‚®π) ‚à∑ Time ‚Üí TimeD ‚Üí Time
(‚®π) = flip Time.addUTCTime

now ‚à∑ IO Time
now = Time.getCurrentTime
