module UVMHS.Lib.Parser.Mixfix where

import UVMHS.Core
import UVMHS.Lib.Pretty
import UVMHS.Lib.Parser.Core

-----------------------------------
-- Fully Functor/Comonad general --
-----------------------------------

data MixesF t f a = MixesF
  { mixesFPre  ‚à∑ Parser t (f a ‚Üí a)
  , mixesFPost ‚à∑ Parser t (f a ‚Üí a)
  , mixesFInf  ‚à∑ Parser t (f a ‚Üí f a ‚Üí a)
  , mixesFInfl ‚à∑ Parser t (f a ‚Üí f a ‚Üí a)
  , mixesFInfr ‚à∑ Parser t (f a ‚Üí f a ‚Üí a)
  }

instance Null (MixesF t f a) where null = MixesF abort abort abort abort abort
instance Append (MixesF t f a) where
  MixesF pre‚ÇÅ post‚ÇÅ inf‚ÇÅ infl‚ÇÅ infr‚ÇÅ ‚ß∫ MixesF pre‚ÇÇ post‚ÇÇ inf‚ÇÇ infl‚ÇÇ infr‚ÇÇ = 
    MixesF (pre‚ÇÅ ‚éÖ pre‚ÇÇ) (post‚ÇÅ ‚éÖ post‚ÇÇ) (inf‚ÇÅ ‚éÖ inf‚ÇÇ) (infl‚ÇÅ ‚éÖ infl‚ÇÇ) (infr‚ÇÅ ‚éÖ infr‚ÇÇ)
instance Monoid (MixesF t f a)

data MixF t f a =
    PreF  ‚Ñï (Parser t (f a ‚Üí a))
  | PostF ‚Ñï (Parser t (f a ‚Üí a))
  | InfF  ‚Ñï (Parser t (f a ‚Üí f a ‚Üí a))
  | InflF ‚Ñï (Parser t (f a ‚Üí f a ‚Üí a))
  | InfrF ‚Ñï (Parser t (f a ‚Üí f a ‚Üí a))
  | TerminalF (Parser t a)

data MixfixF t f a = MixfixF
  { mixfixFTerminals ‚à∑ Parser t a
  , mixfixFLevels ‚à∑ ‚Ñï ‚á∞ MixesF t f a
  }
instance Null (MixfixF t f a) where null = MixfixF abort bot
instance Append (MixfixF t f a) where MixfixF ts‚ÇÅ ls‚ÇÅ ‚ß∫ MixfixF ts‚ÇÇ ls‚ÇÇ = MixfixF (ts‚ÇÅ ‚éÖ ts‚ÇÇ) (ls‚ÇÅ ‚ß∫ ls‚ÇÇ)

mixF ‚à∑ MixF t f a ‚Üí MixfixF t f a
mixF (PreF l pre) = null {mixfixFLevels = dict [l ‚Ü¶ null {mixesFPre = pre}]}
mixF (PostF l post) = null {mixfixFLevels = dict [l ‚Ü¶ null {mixesFPost = post}]}
mixF (InfF l inf) = null {mixfixFLevels = dict [l ‚Ü¶ null {mixesFInf = inf}]}
mixF (InflF l infl) = null {mixfixFLevels = dict [l ‚Ü¶ null {mixesFInfl = infl}]}
mixF (InfrF l infr) = null {mixfixFLevels = dict [l ‚Ü¶ null {mixesFInfr = infr}]}
mixF (TerminalF term) = null {mixfixFTerminals = term}

-- PRE (PRE (x INFR (PRE (PRE y))))
-- PRE PRE x INFR PRE PRE y
-- 
-- ((((x POST) POST) INFL y) POST) POST
-- x POST POST INFL y POST POST

mixfixParserF ‚à∑ 
  ‚àÄ t f a. (Comonad f)
  ‚áí MixfixF t f a ‚Üí (Parser t a ‚Üí Parser t (f a)) ‚Üí Parser t (f a)
mixfixParserF (MixfixF terms levels‚ÇÄ) fld = loop levels‚ÇÄ
  where
    loop ‚à∑ ‚Ñï ‚á∞ MixesF t f a ‚Üí Parser t (f a)
    loop levels = case dmin levels of
      None ‚Üí fld $ terms
      Some ((i :Íòç mixes) :Íòç levels') ‚Üí
        let msg = "lvl " ‚ß∫ alignRightFill '0' 3 (pprender i)
        in 
        fld $ buildLevelDirected msg mixes $ 
        fld $ buildLevelNondirected msg mixes $ 
        loop levels'
    buildLevelNondirected ‚à∑ ùïä ‚Üí MixesF t f a ‚Üí Parser t (f a) ‚Üí Parser t a
    buildLevelNondirected msg mixes nextLevel = do
      x ‚Üê nextLevel
      tries
        [ pErr (msg ‚ß∫ " infix") $ levelInfAfterOne x nextLevel mixes
        , return $ extract x
        ]
    buildLevelDirected ‚à∑ ùïä ‚Üí MixesF t f a ‚Üí Parser t (f a) ‚Üí Parser t a
    buildLevelDirected msg mixes nextLevel = tries
      [ do
          x ‚Üê nextLevel
          tries
            [ pErr (msg ‚ß∫ " infixl") $ levelInflAfterOne x nextLevel mixes
            , pErr (msg ‚ß∫ " infixr") $ levelInfrAfterOne x nextLevel mixes
            , return $ extract x
            ]
      , pErr (msg ‚ß∫ " infixr") $ levelInfrNotAfterOne nextLevel mixes
      ]
    levelInflAfterOne ‚à∑ f a ‚Üí Parser t (f a) ‚Üí MixesF t f a ‚Üí Parser t a
    levelInflAfterOne x nextLevel mixes = do
      fxs ‚Üê pOneOrMore $ tries
        [ mixesFPost mixes
        , do
            f ‚Üê mixesFInfl mixes
            x‚ÇÇ ‚Üê nextLevel
            return $ \ x‚ÇÅ ‚Üí f x‚ÇÅ x‚ÇÇ
        ]
      return $ wcompose (reverse fxs) x
    _levelInfr ‚à∑ Parser t (f a) ‚Üí MixesF t f a ‚Üí Parser t a
    _levelInfr nextLevel mixes = do
      fxs ‚Üê pOneOrMore $ tries
        [ mixesFPre mixes
        , do
            x‚ÇÅ ‚Üê nextLevel
            f ‚Üê mixesFInfr mixes
            return $ \ x‚ÇÇ ‚Üí f x‚ÇÅ x‚ÇÇ
        ]
      x ‚Üê nextLevel
      return $ wcompose fxs x
    levelInfrAfterOne ‚à∑ f a ‚Üí Parser t (f a) ‚Üí MixesF t f a ‚Üí Parser t a
    levelInfrAfterOne x‚ÇÅ nextLevel mixes = do
      f ‚Üê mixesFInfr mixes
      levelInfrAfterOneCombo (\ x‚ÇÇ ‚Üí f x‚ÇÅ x‚ÇÇ) nextLevel mixes
    levelInfrNotAfterOne ‚à∑ Parser t (f a) ‚Üí MixesF t f a ‚Üí Parser t a
    levelInfrNotAfterOne nextLevel mixes = do
      f ‚Üê mixesFPre mixes
      levelInfrAfterOneCombo f nextLevel mixes
    levelInfrAfterOneCombo ‚à∑ (f a ‚Üí a) ‚Üí Parser t (f a) ‚Üí MixesF t f a ‚Üí Parser t a
    levelInfrAfterOneCombo f nextLevel mixes = do
      fxs ‚à∑ ùêø (f a ‚Üí a) ‚Üê pMany $ tries
        [ mixesFPre mixes
        , do
            x‚ÇÅ ‚Üê nextLevel
            f' ‚Üê mixesFInfr mixes
            return $ \ x‚ÇÇ ‚Üí f' x‚ÇÅ x‚ÇÇ
        ]
      x‚ÇÇ ‚Üê nextLevel
      return $ wcompose (f:&fxs) x‚ÇÇ
    levelInfAfterOne ‚à∑ f a ‚Üí Parser t (f a) ‚Üí MixesF t f a ‚Üí Parser t a
    levelInfAfterOne x‚ÇÅ nextLevel mixes = do
      f ‚Üê mixesFInf mixes
      x‚ÇÇ ‚Üê nextLevel
      return $ f x‚ÇÅ x‚ÇÇ

---------------
-- Non-fancy --
---------------

data Mixes t a = Mixes
  { mixesPre  ‚à∑ Parser t (a ‚Üí a)
  , mixesPost ‚à∑ Parser t (a ‚Üí a)
  , mixesInf  ‚à∑ Parser t (a ‚Üí a ‚Üí a)
  , mixesInfl ‚à∑ Parser t (a ‚Üí a ‚Üí a)
  , mixesInfr ‚à∑ Parser t (a ‚Üí a ‚Üí a)
  }

instance Null (Mixes t a) where null = Mixes abort abort abort abort abort
instance Append (Mixes t a) where 
  Mixes pre‚ÇÅ post‚ÇÅ inf‚ÇÅ infl‚ÇÅ infr‚ÇÅ ‚ß∫ Mixes pre‚ÇÇ post‚ÇÇ inf‚ÇÇ infl‚ÇÇ infr‚ÇÇ = 
    Mixes (pre‚ÇÅ ‚éÖ pre‚ÇÇ) (post‚ÇÅ ‚éÖ post‚ÇÇ) (inf‚ÇÅ ‚éÖ inf‚ÇÇ) (infl‚ÇÅ ‚éÖ infl‚ÇÇ) (infr‚ÇÅ ‚éÖ infr‚ÇÇ)
instance Monoid (Mixes t a)

mixesPure ‚à∑ Mixes t a ‚Üí MixesF t ID a
mixesPure (Mixes pre post inf infl infr) =
  MixesF
  (map kextract pre)
  (map kextract post)
  (map kextract2 inf)
  (map kextract2 infl)
  (map kextract2 infr)

data Mixfix t a = Mixfix 
  { mixfixTerminals ‚à∑ Parser t a
  , mixfixLevels ‚à∑ ‚Ñï ‚á∞ Mixes t a
  }

instance Null (Mixfix t a) where null = Mixfix abort bot
instance Append (Mixfix t a) where Mixfix ts‚ÇÅ ls‚ÇÅ ‚ß∫ Mixfix ts‚ÇÇ ls‚ÇÇ = Mixfix (ts‚ÇÅ ‚éÖ ts‚ÇÇ) (ls‚ÇÅ ‚ß∫ ls‚ÇÇ)
instance Monoid (Mixfix t a)

data Mix t a =
    Pre  ‚Ñï (Parser t (a ‚Üí a))
  | Post ‚Ñï (Parser t (a ‚Üí a))
  | Inf  ‚Ñï (Parser t (a ‚Üí a ‚Üí a))
  | Infl ‚Ñï (Parser t (a ‚Üí a ‚Üí a))
  | Infr ‚Ñï (Parser t (a ‚Üí a ‚Üí a))
  | Terminal (Parser t a)

mix ‚à∑ Mix t a ‚Üí Mixfix t a
mix (Pre l pre) = null {mixfixLevels = dict [l ‚Ü¶ null {mixesPre = pre}]}
mix (Post l post) = null {mixfixLevels = dict [l ‚Ü¶ null {mixesPost = post}]}
mix (Inf l inf) = null {mixfixLevels = dict [l ‚Ü¶ null {mixesInf = inf}]}
mix (Infl l infl) = null {mixfixLevels = dict [l ‚Ü¶ null {mixesInfl = infl}]}
mix (Infr l infr) = null {mixfixLevels = dict [l ‚Ü¶ null {mixesInfr = infr}]}
mix (Terminal term) = null {mixfixTerminals = term}

mixfixPure ‚à∑ Mixfix t a ‚Üí MixfixF t ID a
mixfixPure (Mixfix terminals levels) = MixfixF terminals $ map mixesPure levels

mixfixParser ‚à∑ Mixfix t a ‚Üí Parser t a
mixfixParser mixfix = unID ^$ mixfixParserF (mixfixPure mixfix) (map ID)
