module UVMHS.Lib.Logging where

import UVMHS.Core
import UVMHS.Lib.Pretty

newtype LogLevel = LogLevel { unLogLevel ‚à∑ ‚Ñï64 }
  deriving (Eq,Ord,Show,Pretty)

newtype LogDepth = LogDepth { unLogDepth ‚à∑ ‚Ñï64 }
  deriving (Eq,Ord,Show,Pretty)

pplog ‚à∑ (Monad m,MonadIO m,MonadReader r m,HasLens r LogLevel) ‚áí ‚Ñï64 ‚Üí Doc ‚Üí m ()
pplog l ~msg = do
  ll ‚Üê unLogLevel ^$ askL hasLens
  whenZ (l ‚â§ ll) $ io $ do
    pprint $ concat 
      [ ppBG grayDark $ ppFG white $ ppString $ concat ["‚ñ∑",showùïä l,"‚óÅ"]
      , ppSpace 1
      , ppGA msg
      ]
    oflush

pplogd ‚à∑ (Monad m,MonadIO m,MonadReader r m,HasLens r LogLevel,HasLens r LogDepth) ‚áí ‚Ñï64 ‚Üí Doc ‚Üí m ()
pplogd l msg = do
  ld ‚Üê unLogDepth ^$ askL hasLens
  pplog l $ ppSpace (ld √ó ùïü64 2) ‚ß∫ ppGA msg

pplogdIndent ‚à∑ (Monad m,MonadIO m,MonadReader r m,HasLens r LogLevel,HasLens r LogDepth) ‚áí m a ‚Üí m a
pplogdIndent = mapEnvL hasLens $ LogDepth ‚àò succ ‚àò unLogDepth

pplogdIndentU ‚à∑ (Monad m,MonadIO m,MonadUCont m,MonadReader r m,HasLens r LogLevel,HasLens r LogDepth) ‚áí m a ‚Üí m a
pplogdIndentU = umapEnvL hasLens $ LogDepth ‚àò succ ‚àò unLogDepth

pplogdIndentReset ‚à∑ (Monad m,MonadIO m,MonadReader r m,HasLens r LogLevel,HasLens r LogDepth) ‚áí m a ‚Üí m a
pplogdIndentReset = mapEnvL hasLens $ const $ LogDepth zero

pplogdIndentResetU ‚à∑ (Monad m,MonadIO m,MonadUCont m,MonadReader r m,HasLens r LogLevel,HasLens r LogDepth) ‚áí m a ‚Üí m a
pplogdIndentResetU = umapEnvL hasLens $ const $ LogDepth zero
