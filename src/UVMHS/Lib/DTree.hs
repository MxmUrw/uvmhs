module UVMHS.Lib.DTree where

import UVMHS.Core
import UVMHS.Lib.Pretty

data DTree a = DTree 
  { dtreeValues ‚à∑ ùêº a
  , dtreeNested ‚à∑ ùêº (ùïä ‚àß DTree a)
  } deriving (Show)

instance Null (DTree a) where 
  null = DTree null null
instance Append (DTree a) where 
  DTree m‚ÇÅ n‚ÇÅ ‚ß∫ DTree m‚ÇÇ n‚ÇÇ = DTree (m‚ÇÅ ‚ß∫ m‚ÇÇ) $ n‚ÇÅ ‚ß∫ n‚ÇÇ
instance Monoid (DTree a)

instance Eps (DTree a) where 
  eps = DTree null null
instance Seq (DTree a) where
  DTree v‚ÇÅ n‚ÇÅ ‚ñ∑ DTree v‚ÇÇ n‚ÇÇ
    | isEmpty $ list n‚ÇÅ = DTree (v‚ÇÅ ‚ß∫ v‚ÇÇ) n‚ÇÇ
    | otherwise = DTree v‚ÇÅ $ map (mapSnd (‚ñ∑ DTree v‚ÇÇ n‚ÇÇ)) n‚ÇÅ
instance Seqoid (DTree a)

dtk ‚à∑ ùïä ‚Üí DTree a ‚Üí DTree a
dtk s x = DTree null $ single $ s :* x

dtv ‚à∑ a ‚Üí DTree a
dtv x = DTree (single x) null

instance (Pretty a) ‚áí Pretty (DTree a) where
  pretty (DTree v n) = ppVertical $ concat
    [ map pretty v
    , mapOn n $ \ (k :* v') ‚Üí ppHorizontal
        [ ppFG teal $ ppBD $ ppString k
        , ppGA $ pretty v'
        ]
    ]
