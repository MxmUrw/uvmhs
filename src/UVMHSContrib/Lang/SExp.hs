module UVMHSContrib.Lang.SExp where

import UVMHS

lexer ‚à∑ Lexer CharClass ‚ÑÇ TokenClassBasic ‚Ñï64 TokenBasic
lexer = lexerBasic (list ["(",")"]) (list ["KEY"]) (list ["PRIM"]) (list ["+"])

testSExpTokenizerSuccess ‚à∑ IO ()
testSExpTokenizerSuccess = 
  tokenizeIOMain lexer $ tokens "((-1-2-1.42(\"astringwith\\\\stuff\\n\" ( "

testSExpTokenizerFailure1 ‚à∑ IO ()
testSExpTokenizerFailure1 =
  tokenizeIOMain lexer $ tokens "((foo-1and0.01+bar"

testSExpTokenizerFailure2 ‚à∑ IO ()
testSExpTokenizerFailure2 =
  tokenizeIOMain lexer $ tokens "()foo-1\"astring\\badescape\""

data Lit =
    IntegerL ‚Ñ§
  | DoubleL ùîª
  | StringL ùïä
makePrettySum ''Lit

data Atom =
    LitA Lit
  | NameA ùïä
  | KeyA
  | PrimA
  | PlusA
makePrettySum ''Atom

type Exp = Annotated FullContext ExpPre
data ExpPre =
    AtomE Atom
  | ListE (ùêø Exp)
makePrettySum ''ExpPre

cpLit ‚à∑ CParser TokenBasic Lit
cpLit = concat
  [ IntegerL ^$ cpShaped $ view integerTBasicL
  , DoubleL ^$ cpShaped $ view doubleTBasicL
  , StringL ^$ cpShaped $ view stringTBasicL
  ]

cpAtom ‚à∑ CParser TokenBasic Atom
cpAtom = cpNewContext "atom" $ concat
  [ LitA ^$ cpLit
  , NameA ^$ cpShaped $ view nameTBasicL
  , const KeyA ^$ cpSyntax "KEY"
  , const PrimA ^$ cpSyntax "PRIM"
  , const PlusA ^$ cpSyntax "+"
  ]

cpExpPre ‚à∑ CParser TokenBasic ExpPre
cpExpPre = concat
  [ AtomE ^$ cpAtom
  , ListE ^$ cpList
  ]

cpList ‚à∑ CParser TokenBasic (ùêø Exp)
cpList = do
  void $ cpSyntax "("
  es ‚Üê cpMany cpExp
  void $ cpSyntax ")"
  return es

cpExp ‚à∑ CParser TokenBasic Exp
cpExp = cpNewContext "Exp" $ cpWithContextRendered cpExpPre

testSExpParserSuccess ‚à∑ IO ()
testSExpParserSuccess = do
  tokenizeIOMain lexer input
  toks ‚Üê tokenizeIO lexer input
  parseIOMain cpExp $ stream toks
  where
    input ‚à∑ ùïç (ParserToken ‚ÑÇ)
    input = tokens " ( PRIM KEY x + y  {- yo -} ( -1-2)  0.0 \n x   y   z \n abc -12  )  "
