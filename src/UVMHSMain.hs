{-# OPTIONS_GHC -Wno-unused-imports #-}
module UVMHSMain where

import UVMHS 

import qualified Examples.Lang.Arith as Arith
import qualified Examples.Lang.ArithBlocks as ArithBlocks
import qualified Examples.Lang.SExp as SExp

-- -- state space
-- data SS val lœÑ dœÑ = SS
--   { ssCxt ‚à∑ ‚Ñï
--   , ssStore ‚à∑ ‚Ñï
--   , ssStack ‚à∑ ‚Ñï
--   } deriving (Eq, Ord)
-- makePrettyRecord ''SS

-- data Thing = Thing
--   { thing ‚à∑ ‚Ñï
--   , think ‚à∑ ‚Ñï
--   }
-- makePrettyRecord ''Thing

-- data Exp =
--     Var_E ùïä
--   | Let_E ùïä Exp Exp
-- 
-- instance Pretty Exp where
--   pretty = \case
--     Var_E x ‚Üí ppString x
--     Let_E x e‚ÇÅ e‚ÇÇ ‚Üí concat
--       [ ppForceBreak
--       , ppVertical
--           [ ppKey "let"
--           , concat
--               [ ppSpace $ ùïü64 2
--               , ppHorizontal
--                   [ ppString x
--                   , ppPun "="
--                   , ppGA $ pretty e‚ÇÅ
--                   ]
--               ]
--           , ppGroup $ pretty e‚ÇÇ
--           ]
--       ]

main ‚à∑ IO ()
main = cleanExit $ do
  pprint $ ppHeader "COLOR TEST"
  pprint colorsDemo
  pprint $ ppFG teal $ ppString "¬Ø\\_Ôπô„ÉÑÔπö_/¬Ø"
  -- let e‚ÇÅ = Let_E "x" (Var_E "y") $ Var_E "x"
  -- -- pprint $ e‚ÇÅ :* e‚ÇÅ
  -- -- pprint $ ppGroup $ concat
  -- --   [ pretty $ ((ppForceBreak ‚ß∫ pretty 1) :* pretty 2) :* ((ppForceBreak ‚ß∫ pretty 3) :* pretty 4)  
  -- --   ]
  -- pprint $ concat
  --   [ ppSpaceIfBreak
  --   , ppSpaceIfBreak
  --   , ppAlign $ pretty e‚ÇÅ
  --   ]
  -- pprint $ concat
  --   [ ppSpace $ ùïü64 2
  --   , ppAlign $ pretty e‚ÇÅ
  --   ]
